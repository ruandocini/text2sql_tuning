db_id,train_example
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the average number of courses taught by a professor? professor refers to professor = 1; average number of courses = divide(count(taughtBy.course_id), count(taughtBy.p_id) where professor = 1 )"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the ratio of professors and students? professors refers to professor = 1; students refers to student = 1; ratio = divide(count(person.p_id) when professor = 1, count(person.p_id) when student = 1)"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Calculate the percentage of high-level undergraduate course. high-level undergraduate course refers to courseLevel = 'Level_400'; percentage = divide(count(course.course_id) when courseLevel = 'Level_400', count(course.course_id)) * 100%"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List down all the person IDs who taught course ID of 18. person IDs refers to taughtBy.p_id; course ID of 18Â  refers to taughtBy.course_id = 18"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Provide the position status and IDs of professor who advised student ID ""303"". position status refers to hasPosition; IDs of professor refers to p_id_dummy; student ID ""303"" refers to advisedBy.p_id = 303"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the person IDs and course levels of the affiliated professors in faculty. person IDs refers to person.p_id; affiliated professors in faculty refers to professor = 1 and hasPosition = 'Faculty_aff'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Describe the year in program and in phase status for the student with most number in advisor. student refers to advisedBy.p_id; most number in advisor refers to max(count(p_id_dummy))"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List down the advised student IDs and IDs of employing professor in faculty. advised student IDs refers to person.p_id; IDs of employing professor in faculty refers to p_id_dummy and hasPosition = 'Faculty_eme'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the course IDs and levels of person IDs from 40 to 50. course IDs and levels refers to course.course_id and courseLevel; person IDs from 40 to 50 refers to taughtBy.p_id between 40 and 50"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Describe the course level and list of person IDs who taught course ID of 147. person IDs refers to taughtBy.p_id; course ID of 147 refers to course.course_id = 147"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Mention the person ID of faculty professor who taught course ID 104 and the course level. person ID refers to person.p_id; faculty professor refers to professor = 1 and hasPosition ! = 0"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Find the professor ID and position in faculty who taught high-level undergraduate course of less than 10 in ID. professor ID refers to person.p_id when professor = 1; position in faculty refers to hasPosition; high-level undergraduate course refers to courseLevel = 'Level_400'; less than 10 in ID refers to course.course_id < 10"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the professor ID who taught the course ID from 121 to 130 of basic undergraduate courses. professor ID refers to taughtBy.p_id; course ID from 121 to 130 of basic undergraduate courses refers to courseLevel = 'Level_300' and course.course_id between 121 and 130"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List the advisor IDs for students with eighth year of program and position status in faculty of those professors. advisor IDs refers to p_id_dummy and person.p_id where professor = 1; eighth year of program refers to yearsInprogram = 'Year_8'; position status in faculty of those professors refers to hasPosition"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: List any five of course IDs with professor IDs who taught master courses. professor IDs refers to taughtBy.p_id; master course refers to courseLevel = 'Level_500'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many students are under advisor 415? advisor 415 refers to p_id_dummy = 415"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many professional or master/graduate courses are there? professional or master/graduate courses refers to courseLevel = 'Level_500'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many non-faculty members are not undergoing the phase of qualifications? non-faculty members refers to hasPosition = 0; are not undergoing the phase of qualifications refers to inPhase = 0"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which professor taught the least amount of courses? professor refers to taughtBy.p_id; least amount of courses refers to min(count(course_id))"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Among the students being advised by Advisor 5, how many students are in the 5th year? Advisor 5 refers to p_id_dummy = 5; are in the 5th year refers to yearsInProgram = 'Year_5'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which professor teaches the highest number of professional or master/graduate courses? professor refers to taughtBy.p_id; highest number of professional or master/graduate courses refers to max(count(taughtBy.course_id)) where courseLevel = 'Level_500'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Among the faculty affiliated professor, how many professors teaches professional or master/undergraduate courses? faculty affiliated professor refers to professor = 1 and hasPosition = 'Faculty_aff'; professional or master/undergraduate courses refers to courseLevel = 'Level_500'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses? professors refers to course.p_id; highest number of professional or master/undergraduate courses refers to max(count(course.course_id)) where courseLevel = 'Level_500'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many advisors are in charge of advising all the students in 1st year? advisors refers to p_id_dummy; students in 1st year refers to student = 1 and yearsInProgram = 'Year_1'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many professors teaches no more than two high-level or harder undergraduate courses? professors refers to taughtBy.p_id; high-level or harder undergraduate coursesÂ  refers to courseLevel = 'Level_400' ; no more than two refers to count(taughtBy.course_id) < = 2"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Between the faculty employee professors, how many teaches high-level or harder undergraduate courses? Indicate each of the professors unique identifying number. faculty employee professors refers to hasPosition = 'Faculty_eme' and professor = 1; high-level or harder undergraduate courses refers to courseLevel = 'Level_400'; professors unique identifying number refers to person.p_id"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the position in the faculty of the professor who teaches the highest number of courses? position in the faculty refers to hasPosition; professor refers to professor = 1; teaches the highest number of courses refers to max(count(taughtBy.course_id))"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What year in the program do the students with more than 2 advisors are in? students refers to student = 1; more than 2 advisors refers to count(p_id_dummy) > 2"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many professors teaches basic or medium undergraduate courses? professors refers to taughtBy.p_id; basic or medium undergraduate courses refers to couresLevel = 'Level_300'"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Among the students being advised by advisors, which students' year in the program do the advisors advise the majority of? students refers to student = 1; students' year in the program do the advisors advise the majority of refers to max(count(yearsInProgram))"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many students that are undergoing the pre-phase of qualification have advisors? students refers to student = 1 and ; undergoing the phase of pre-qualification refers to inPhase = 'Pre-Quals'; have advisors refers to advisedBy.p_id"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the average number of professional or master/undergraduate courses being taught by each professor? professional or master/undergraduate courses refers to courseLevel = 'Level_500'; average number = divide(count(taughtBy.course_id), count(taughtBy.p_id))"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many courses were taught by more than 4 people? courses refers to taughtBy.course_id; more than 4 people refers to count(taughtBy.p_id) > 4"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the total of professional courses available at the university? List out all the course id. professional courses refers to courseLevel = 'Level_500'; course id refers to course.course_id"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: What is the sum of year 1 and year 2 students? year 1 and year 2 students refers to yearsInProgram = 'Year_1' and yearsInProgram = 'Year_2' and student = 1"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: How many courses were taught by a professor who is currently the member of faculty? professor refers to professor = 1;Â  member of faculty refers to hasPosition <> 0"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which professor taught the most courses and what is the position of this person in the university? professor refers to taughtBy.p_id; most courses refers to max(taughtBy.p_id); position refers to hasPosition"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which courses were taught by a professor who is not a faculty member? courses refers to taughtBy.course_id; professor refers to professor = 1; is not a faculty member refers to hasPosition = 0"
computer_student,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE course (
course_id integer,
courseLevel text,
PRIMARY KEY (course_id),
);
CREATE TABLE person (
p_id integer,
professor integer,
student integer,
hasPosition text,
inPhase text,
yearsInProgram text,
PRIMARY KEY (p_id),
);
CREATE TABLE advisedBy (
p_id integer,
p_id_dummy integer,
FOREIGN KEY (p_id) REFERENCES person(p_id),
FOREIGN KEY (p_id_dummy) REFERENCES person(p_id),
);
CREATE TABLE taughtBy (
course_id integer,
p_id integer,
FOREIGN KEY (course_id) REFERENCES course(course_id),
FOREIGN KEY (p_id) REFERENCES person(p_id),
);
---------------------
QUESTION: Which member of the faculty are teaching the most courses and what is his/her general course level? member of the faculty refers to hasPosition <> 0, most courses refers to max(count(course.course_id))"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the device id of the oldest user? oldest user refers to MAX(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events were held at coordinate 97,40? coordinate 97,40 refers to longitude = 97 AND latitude = 40;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users are in the age group of M32-38? male refers to gender = 'M'; age group refers to group; `group` = 'M32-38';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many female users over the age of 50 are there? female refers to gender = 'F'; over the age of 50 refers to age > 50;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many active users were there in the event id 2? active users refers to is_active = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the gender of the youngest user? youngest user refers to MIN(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the name of the category which most users belong to? most users belong to refers to MAX(COUNT(app_id)); name of category refers to category;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the model of the oldest user's device? model of the device refers to device_model; oldest user refers to MAX(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users are there in the Home Decoration category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users are active in the events held on 5/1/2016? male refers to gender = 'M'; active refers to is_active = 1; on 5/1/2016 refers to timestamp LIKE '2016-05-01%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many female users use ZenFone 5 devices? female refers to gender = 'F'; ZenFone 5 refers to device_model = 'ZenFone 5';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31? oldest user refers to MAX(age); active user refers to is_active = 1; on 5/6/2016 refers to timestamp LIKE '2016-05-06%'; coordinates 121, 31 refers to longitude = 121 AND latitude = 31;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the most common device model among female users between the ages 27 to 28? most common device model refers to MAX(COUNT(device_id)); female refers to gender = 'F'; between the ages 27 to 28 refers to group = 'F27-28';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the categories of the top 2 oldest events? oldest event refers to MIN(timestamp);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the gender of the majority of Vivo phone users? majority of Vivo phone users refers to MAX(COUNT(phone_brand = 'vivo'));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which category has the highest number of users? highest number of users refers to MAX(COUNT(app_id));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users belong to the MOBA category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the percentage of female OPPO users against the male OPPO users? percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'F'), 100), COUNT(device_id)), '%') AS 'the percentage of female OPPO users'; DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'M'), 100), COUNT(device_id)), '%') AS 'the percentage of male OPPO users';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What were the locations of the events on 8th May, 2016? location = longitude, latitude; on 8th May, 2016 refers to `timestamp` LIKE '2016-05-08%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List the app users IDs and installed status for the event ID of 844. app user IDs refers to app_id; is_installed = 1 means the app status is installed; is_installed = 0 means the app status is not installed;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events were there on 30th April, 2016? on 30th April, 2016 refers to `timestamp` LIKE '2016-04-30%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users used Vivo Xplay3S model? Vivo Xplay3S model refers to phone_brand = 'vivo' AND device_model = 'Xplay3S';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ratio of male and female users in 27-28 age group? ratio = DIVIDE(COUNT(device_id WHERE gender = 'M' AND `group` = 'M27-28'), COUNT(device_id WHERE gender = 'F' AND `group` = 'F27-28')); 27-28 age group refers to `group` = 'F27-28';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the labels' IDs of online shopping and online malls categories?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Describe the phone brands and models of the users who participated in events on 5th May, 2016 at the coordinates of (112,44). models refers to device_model; on 5th May, 2016 refers to timestamp LIKE '2016-05-05%'; coordinates of (112,44) refers to longitude = 112 AND latitude = 44;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the app users IDs and time for the event ID of 82. app user IDs refers to app_id; time refers to timestamp;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Describe the device user gender and age of the event ID of 15251."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events did the 88-years-old male users participate on 4th May,2016? 88-years-old refers to age = 88; male refers to gender = 'M'; on 4th May, 2016 refers to timestamp LIKE '2016-05-04%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38). coordinates of (-102,38) refers to longitude = -102, latitude = 38;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the phone brands and models of the users who were at the coordinates of (80,44). models refers to device_model; coordinates of (80,44) refers to longitude = 80 AND latitude = 44;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List the included categories in the event ID of 155."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among HTC Butterfly phone users, list any five devices' IDs used by females. HTC Butterfly refers to phone_brand = 'HTC' AND device_model = 'Butterfly'; females refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many app IDs were included under science fiction category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the ages and genders of the LG L70 users? LG L70 refers to phone_brand = 'LG' AND device_model = 'L70';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Calculate the percentage of the app user IDs under Industry tag category. percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(app_id WHERE category = 'Industry tag'), 100), COUNT(app_id)),'%');"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the LG brand users, calculate the percentage of the Nexus 5 model user. What is the ratio of male and female users of it? LG brand refers to phone_brand = 'LG'; percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE device_model = 'Nexus 5'), 100), COUNT(device_id)),'%'); ratio = DIVIDE(COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'M'), COUNT(device_id WHERE device_model = 'Nexus 5' AND gender = 'F')); Nexus 5 model refers to device_model = 'Nexus 5';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users of the app were not active when event no.2 happened? not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events in total have happened on the devices in 2016? in 2016 refers to `timestamp` LIKE '2016%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events have happened on device no.29182687948017100 in 2016? device no. refers to device_id; device_id = 29182687948017100; in 2016 refers to `timestamp` LIKE '2016%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many device users are male? male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age of the oldest device user? oldest device user refers to MAX(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the female users of the devices, how many of them are under 30? female refers to gender = 'F'; under 30 refers to age < 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the users who use a Galaxy Note 2, how many of them are female? Galaxy Note 2 refers to device_model = 'Galaxy Note 2'; female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the ages of all the users who use a Galaxy Note 2. Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the device model of the device used by the oldest user? oldest user refers to MAX(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: To which user group do most of the users who uses a vivo device belong? user group where most of the users belong refers to MAX(COUNT(group)); vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many app users belong to the category of Securities?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: To which categories does app user no.1977658975649780000 belong? app no. refers to app_id; app_id = 1977658975649780000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the categories of the app users who are not active when event no.2 happened. not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the location coordinates of all the devices with an inactive app user when event no.2 happened. location coordinates = longitude, latitude; inactive refers to is_active = 0; event no. refers to event_id; event_id = 2;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among all the times event no.2 happened when the app user was not active, when was the earliest time this situation happened? event no. refers to event_id; event_id = 2; not active refers to is_active = 0; earliest time refers to MIN(timestamp);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the IDs of the events happened on all the vivo devices. IDs of the events refers to event_id; vivo devices refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the devices with event no.2 happening, how many of them are vivo devices? event no. refers to event_id; event_id = 2; vivo devices refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the time when event no.2 happened on a vivo device. time refers to timestamp; event no. refers to event_id; event_id = '2'; vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events in total have happened on all the vivo devices in the year 2016? vivo devices refers to phone_brand = 'vivo'; in the year 2016 refers to year(timestamp) = 2016;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the users who uses a vivo device, how many of them are female and under 30? vivo device refers to phone_brand = 'vivo'; female refers to gender = 'F'; under 30 refers to age < 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the category that the most app users belong to? most app users refers to MAX(COUNT(app_id));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the brand of the device used by the youngest female user? brand of the device refers to phone_brand; youngest refers to MIN(age); female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users in user group M23-26 use a vivo device? user group M23-26 refers to group = 'M23-26'; vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among all the users who use a vivo device, what is the percentage of the users in the M23-26 user group? vivo device refers to phone_brand = 'vivo'; percentage = MULTIPLY(DIVIDE(COUNT(phone_brand = 'vivo WHERE group = 'M23-26), COUNT(phone_brand = 'vivo)), 100); M23-26 user group refers to group = 'M23-26';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among all the devices with event no.2 happening, what is the percentage of the device being a vivo phone? event no. refers to event_id; event_id = '2'; percentage = SUM(IF(phone_brand = 'vivo',1,0)), COUNT(device_id) WHERE event_id = '2'; vivo phone refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the average age of all the vivo device users? average age = AVG(age); vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many female users belong to the age group of 27 to 28? female refers to gender = 'F'; age group of 27 to 28 refers to `group` = 'F27-28';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age of the oldest male user of the app? oldest user refers to MAX(age); male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users installed the app but are not active? installed refers to is_installed = 1; not active refers to is_active = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age of the youngest female user of the app? youngest user refers to MIN(age); female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many models does the VIVO phone brand released? models refers to device_model;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List at least 15 phone models released under the OPPO brand. phone models refers to device_model; OPPO brand refers to phone_brand = 'OPPO';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List at least 10 device models that male users over the age of 39 usually use. male refers to gender = 'M'; over the age of 39 refers to group = 'M39+';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List 5 device models that users use to install the app and are active in using the app. install refers to is_installed = 1; active refers to is_active = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users belong to ""Financial Information"" category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users belong to ""game-Art Style"" category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the total number of the male users that use OPPO as their phone brand. male refers to gender = 'Male';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the brand of the youngest user's device? brand of the device refers to phone_brand; youngest user refers to MIN(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List at least 3 categories with the lowest number of users. lowest number of users refers to MIN(COUNT(label_id));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users use the Galaxy Ace Plus model? male refers to gender = 'M'; Galaxy Ace Plus refers to device_model = 'Galaxy Ace Plus';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age group of most OPPO users? age group refers to group; most OPPO users refers to MAX(COUNT(phone_brand = 'OPPO')); OPPO users refers to phone_brand = 'OPPO';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List at least 5 device models that are commonly used by female users. device models that are commonly used refers to MAX(COUNT(device_model)); female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Calculate the ratio in percentage between the average number of app users belonging to ""80s Japanese comic"" and ""90s Japanese comic"". ratio in percentage = DIVIDE(SUM(IF(category = '80s Japanese comic',1,0)), COUNT(app_id)) as '80s'; DIVIDE(SUM(IF(category = '90s Japanese comic',1,0)), COUNT(app_id)) as '90s'; 80s Japanese comic refers to category = '80s Japanese comic'; 90s Japanese comic refers to category = '80s Japanese comic';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the female users that uses OPPO as their phone brand, what is the percentage of them of the user that uses R815T model to install the app? female refers to gender = 'F'; percentage = DIVIDE(SUM(IF(phone_brand = 'OPPO',1,0)), SUM(IF(device_id = 'R815T',1,0))); R815T refers to device_id = 'R815T';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the phone brand of the device model ""åæææº""?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the number of device models for ""ä¸­å´"" phone brand."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which group does age 24 belong to?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the time stamp for event No.887711. event no. refers to event_id; event_id = '887711';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the number of events that happened on 2016/5/6. on 2016/5/6 refers to timestamp = '2016/5/6 XX:XX:XX';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: For the event which happened at 23:55:16 on 2016/5/7, in the location coordinate(113, 28), on what device did it happen? Give the name of the device model. at 23:55:16 on 2016/5/7 refers to timestamp = '2016/5/7 23:55:16'; location coordinate (113, 28) refers to longitude = '113' AND latitude = '28';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the number of ""game-Fishing"" apps. game-Fishing refers to category = 'game-Fishing';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: State the number of the ""é­èNote 2"" users who are in the ""F29-32"" group. é­èNote 2 refers to device_model = 'é­èNote 2';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the number of 30-year-old users who were active in the events on 2016/5/2. 30-year-old refers to age = '30'; active refers to is_active = 1; on 2016/5/2 refers to timestamp = '2016/5/2 XX:XX:XX';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: For the event which happened at 23:33:34 on 2016/5/6, how many installed apps were involved? at 23:33:34 on 2016/5/6 refers to timestamp = '2016/5/6 23:33:34'; installed refers to is_installed = '1';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the number of female users of ""Eæ´¾"" brand devices. female refers to gender = 'F'; Eæ´¾ brand refers to phone_brand = 'Eæ´¾';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users of the ""Galaxy S5"" device model? male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users from the group ""F29-32"" who were active in the events on 2016/5/7? active users refers to is_active = '1'; on 2016/5/7 refers to timestamp = '2016/5/7 XX:XX:XX';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which category does the app id No.894384172610331000 belong to?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active? at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many times is the number of active apps in the event that happened at 7:50:28 on 2016/5/2 than in the event that happened at 7:41:03 on 2016/5/2? how many times = DIVIDE(SUM(IF(timestamp = '2016/5/2 7:50:28', 1,0)), SUM(IF(timestamp = '2016/5/2 7:41:03',1,0))); active refers to is_active = '1'; at 7:50:28 on 2016/5/2 refers to timestamp = '2016/5/2 7:50:28'; at 7:41:03 on 2016/5/2 refers to timestamp = '2016/5/2 7:41:03';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many devices are of the brand vivo? brand vivo refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many more devices are there of the brand vivo than of the brand LG? how many more = SUBTRACT(SUM(IF(phone_brand = 'vivo',1,0)), SUM(IF(phone_brand = 'LG',1,0))); brand vivo refers to phone_brand = 'vivo'; brand LG refers to phone_brand = 'LG';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ID of the device used by the youngest user? ID of the device refers to device_id; youngest user refers to MIN(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the female users of the devices, how many of them are over 30? female refers to gender = 'F'; over 30 refers to age > 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Is the oldest device user male or female? MAX(Age) AND gender = 'M' means that the oldest device user is male; MAX(Age) AND gender = 'F' means that the oldest device user is female;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age of the youngest female device user? youngest refers to MIN(age); female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among all the users who use a vivo device, what is the age of the youngest user? vivo device refers to phone_brand = 'vivo'; youngest refers to MIN(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the app IDs of all the users in the Securities category."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: For the device with an event occurring on 2016/5/1 at 0:55:25, what is the gender of its user? on 2016/5/1 at 0:55:25 refers to timestamp = '2016-05-01 00:55:25';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the devices with an event occurring in 2016, how many of them are owned by a user in the M23-26 user group? in 2016 refers to year(timestamp) = 2016; M23-26 user group refers to `group` = 'M23-26';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the brand of the device used by the most users in the M23-26 user group? brand of the device refers to phone_brand; M23-26 user group refers to `group` = 'M23-26';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the location coordinates of all the Galaxy Note 2 devices when an event happened. location coordinates = longitude, latitude; Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list all the models of the devices used by a female user. models of the devices refers to device_model; female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the categories that app user ID7324884708820020000 belongs to? app user ID refers to app_id; app_id = 7324884708820020000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the app users who were not active when event no.2 happened, how many of them belong to the category Property Industry 1.0? not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many categories in total do the app users who were not active when event no.2 happened belong to? not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the device model used by the most female users over 30? female users refers to gender = 'F'; most female users refers to MAX(COUNT(gender = 'F')); over 30 refers to age > 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the models of all the devices with an event under the location coordinates (121, 31). models of the devices refers to device_model; location coordinates (121, 31) refers to longitude = 121 AND latitude = 31;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the top 3 categories with the most app users? most app users refers to MAX(COUNT(app_id));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the event IDs of the events that have happened on the device of the oldest user. oldest user refers to MAX(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events have happened on the device of the youngest female user? youngest refers to MIN(age); female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the devices on which an event happened on 2016/5/1, how many of them are used by a male user? on 2016/5/1 refers to timestamp = '2016-05-01'; male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which category has more app users, Securities or Finance? more app users refers to SUBTRACT(IF(SUM(category = 'Securities'), SUM(category = 'Finance')) > 0,'Securities','Finance') as more;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list the device models of all the devices used by a user in the M23-26 user group. M23-26 user group refers to `group` = 'M23-26';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the average age of the female users who uses a vivo device? average age = AVG(age); female refers to gender = 'F'; vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ratio of female users to male users who uses a vivo device? ratio = DIVIDE(SUM(gender = 'M' WHERE phone_brand = 'vivo'), SUM(gender = 'F' WHERE phone_brand = 'vivo')); female refers to gender = 'F'; male refers to gender = 'M'; vivo device refers to phone_brand = 'vivo';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ratio of the number of app users that belong to the Securities category to the number of app users that belong to the Finance category? ratio = DIVIDE(SUM(category = 'Securities'), SUM(category = 'Finance'));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the label ID of ""Third-party card management"" category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ratio of active and inactive app users of the event ID ""58""? ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events did the device ID ""3915082290673130000"" join?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Calculate the percentage of male users among all device users. percentage = DVIDE(SUM(gender = 'M'), COUNT(device_id)); male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events were participated by the users at longitude of ""-156""?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many app users belong to label ID of ""48""?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many category names start with the word ""game""? category names refers to category; start with the word game refers to category like 'game%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the number of events participated by the device users at coordinates of (80,37). coordinates of (80,37) refers to longitude = 80 and latitude = 37;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List down the labels' IDs and categories of the app ID ""5758400314709850000""."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List down the app IDs under the category of game-Rowing ."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the label IDs and app IDs of the Chinese Classical Mythology category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Describe the number of app IDs and location of the event ID ""79641"". location = longitude, latitude;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Provide the locations and times of the events of app ID ""8715964299802120000"". locations = longitude, latitude; times of the events refers to timestamp;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many OPPO users participated in events which were held around 12 AM on 1st May,2016? OPPO refers to phone_brand = 'OPPO'; around 12 AM on 1st May, 2016 refers to timestamp is '2016-05-01'"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the ratio of male and female users of vivo X5pro model? ratio = DIVIDE(SUM(gender = 'M' WHERE device_model = 'X5Pro'), SUM(gender = 'F' WHERE device_model = 'X5Pro')); male refers to gender = 'M'; female refers to gender = 'F'; vivo X5pro model refers to phone_brand = 'vivo' AND device_model = 'X5Pro';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many females use ZUK Z1 phones in the age group under 23? females refers to gender = 'F'; ZUK Z1 refers to phone_brand = 'ZUK' AND device_model = 'Z1'; under 23 refers to `group` = 'F23-' ;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List the phone brands and models of the users under 10 years of age. models refers to device_model; under 10 years of age refers to age < 10;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the HTC users, calculate the percentage of female users who are over 80. HTC refers to phone_brand = 'HTC'; percentage = DIVIDE(SUM(gender = 'F' AND age > 80), COUNT(device_id)); female refers to gender = 'F'; over 80 refers to age > 80"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which phone brand and model was used for event ID ""6701""? model refers to device_model;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Between device ID of ""-9215352913819630000"" and ""-9222956879900150000"", mention the age and gender of device user who participated more events. more events refers to MAX(COUNT(event_id));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List out the time of the event id 12. time refers to timestamp;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many active users are there in the event? active refers to is_active = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many devices belong to model ""A51""? model refers to device_model; device_model = 'A51';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: State the gender of users who use the device ""-9222956879900150000"". device refers to device_id; device_id = -9222956879900150000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many labels belong to the game-card category? labels refers to label_id;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age group of users who use phone brand of vivo? age group refers to group;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users who are under 30 years old use device model of Galaxy Note 2? under 30 refers to age < 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the users who use OPPO, calculate the percentage of those who are under 50 years old. OPPO refers to phone_brand = 'OPPO'; percentage = MULTIPLY(DIVIDE(SUM(age < 50), COUNT(device_id)), 1.0); under 50 years old refers to age < 50;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the average age of the users who use model device of R7? average age = AVG(age);"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the category of the label that represented the behavior category of app id 5902120154267990000? label that represented the behavior category refers to label_id;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Mention the group of age of users who use phone brand of LG. group of age refers to group;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: State the category of the label that represented the behavior category of app id 4955831798976240000. label that represented the behavior category refers to label_id;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many female users use device model of MI 3? female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the male users, how many users use device model of Desire 820? male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the users who are above 20, how many users use device model of ELIFE E7 Mini? above 20 refers to age > 20;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: State the number of users who are under 50 and above 20 use device model of Galaxy Premier. under 50 and above 20 refers to age BTWEEEN 20 AND 50;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Give the number of male users who use phone branded HTC. male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users who are between 20 and 60 use phone brand of TCL?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Among the users who use SUGAR, calculate the percentage of those who are above 20 years old. SUGAR refers to phone_brand = 'SUGAR'; percentage = MULTIPLY(DIVIDE(SUM(age > 20), COUNT(device_id)) 1.0); above 20 years old refers to age > 20;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Indicate the location of all the events that occurred on April 30, 2016. location = longitude, latitude; on April 30, 2016 refers timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many different models does the HTC brand have? models refers to device_model; HTC brand refers to phone_brand = 'HTC';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Identify all installed and activated apps by their id. installed refers to is_installed = 1; activated refers to is_active = 1; id refers to app_id;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many apps are labeled 7? labeled 7 refers to label_id = 7;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Identify by their id all the devices that are used by women who are in the age range of 29 to 31 years. id refers to device_id; women refers to gender = 'F'; age range of 29 to 31 years refers to age between 29 and 31;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Identify by their id all the apps that belong to the game-stress reliever category. id refers to device_id;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: On what date were the most events logged on devices for 40-year-old male users? date refers to timestamp; most events refers to MAX(COUNT(event_id)); 40-year-oldÂ  refers to age = 40; male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: On which brand of phone are the most applications installed? brand of phone refers to phone_brand; most applications are installed refers to MAX(COUNT(is_installed = 1));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many men under the age of 23 have apps installed but are not active on their devices? men refers to gender = 'M'; under the age of 23 refers to age < 23; installed refers to is_installed = 1; not active refers to is_active = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many women have apps from the game-Finding fault category installed on their device? women refers to gender = 'F'; installed refers to is_installed = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which gender logged in the most to an event in the first 10 days of May 2016? gender that logged in the most refers to MAX(COUNT(gender)); first 10 days of May 2016 refers to timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What age group is the most using SM-T2558 model phones? age group using SM-T2558 model phones the most refers to MAX(COUNT(group WHERE device_model = 'SM-T2558')); SM-T2558 model phones refers to device_model = 'SM-T2558';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many people over the age of 50 do not have HTC One M8 Eye phones? over the age of 50 refers to age > 50; do not have HTC One M8 Eye phones refers to phone_brand ! = 'HTC' AND device_model ! = 'One M8 Eye';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Locate all events on devices of women under 30 years old. locate = longitude, latitude; women refers to gender = 'F'; under 30 years old refers to age < 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What percentage of women do not have applications installed on their mobile with respect to men? percentage = MULTIPLY(DIVIDE(SUM(gender = 'F'), SUM(gender = 'M')), 1.0); women refers to gender = 'F'; not installed refers to is_installed = 0; men refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Calculate the average age of people who have apps installed but are not active on their devices. average age = AVG(age); installed refers to is_installed = 1; not active refers to is_active = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list any three events that happened on the 1st of May 2016 that have the same latitude of 31. on the 1st of May 2016 refers to timestamp like '2016-05-01%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list any three events that have the longitude and latitude of 0."
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the difference between the events of device number -9222956879900150000 that can be located and those that are unable to be located? difference = SUBTRACT(SUM(latitude! = 0 and longitude! = 0), SUM(latitude = 0 and longitude = 0)); device number refers to device_id; device_id = -922956879900150000; can be location refers to latitude ! = 0 and longitude ! = 0; unable to be location refers to latitude = 0 and longitude = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list any three devices that are owned by female users. female refers to gender = 'F';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list any five app categories that are related to games, along with their label ID. app categories refers to category; related to games refers to category like '%game%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please list any three OPPO device models. OPPO refers to phone_brand = 'OPPO';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the percentage of users who experienced event number 6 who have the app installed but do not use the app? percentage = MULTIPLY(DIVIDE(SUM(is_installed = 1 and is_active = 0), COUNT(app_id)), 1.0); event number refers to event_id = 6; installed refers to is_installed = 1; do not use refers to is_active = 0;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which gender owned more of the Galaxy Note 2 device model? gender that owned more = SUBTRACT(IF(SUM(gender = 'M'), SUM(gender = 'F'),'M','F'));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: When did event number 2 happen and how many users were active? event number refers to event_id; event_id = 2; active refers to is_active = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which behavior category does user number 5902120154267990000 belong to? behavior category refers to category; number refers to app_id; app_id = 5902120154267990000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many users belong to the same behavior category as comics? behavior category refers to category; category = 'comics';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the age and gender of the person who uses the device number 29182687948017100 on event number 1? device number refers to device_id; device_id = 29182687948017100; event number refers to event_id; and event_id = 1;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users have the log of events at the same longitude of 114? male refers to gender = 'M';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: When did event number 7 happen for user number -8022267440849930000? event number refers to event_id; event_id = 7; user number refers to app_id; app_id = -8022267440849930000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What are the behavior categories that user number -9222198347540750000 belongs to? behavior categories refers to category; user number refers to app_id; app_id = -9222198347540750000;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please provide the age group of any LG Nexus 4 device users. age group refers to `group`; LG Nexus 4 refers to phone_brand = 'LG' AND device_model = 'Nexus 4';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Please provide the gender of at least one user who owns an HTC Desire 826 device. HTC Desire 826 refers to phone_brand = 'HTC' AND device_model = 'Desire 826';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the percentage of users who are in the same behavior category as ""Academic Information""? percentage = MULTIPLY(DIVIDE(SUM(category = 'Academic Information'), COUNT(app_id)), 1.0); behavior category refers to category; category = 'Academic Information';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016? percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many OPPO devices are there? OPPO devices refers to phone_brand = 'OPPO';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What is the most common age group among all device users? most common age group refers to MAX(COUNT(`group`));"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many events does the device ""4069764298338760000"" have?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many of the apps belong in the ""Equity Fund"" category?"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List all females aged 24 to 26 devices' locations. females refers to gender = 'F'; aged 24 to 26 refers to `group` = 'F24-26';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: How many male users have a Galaxy Note 3? male refers to gender = 'M'; Galaxy Note 3 refers to device_model = 'Galaxy Note 3';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: List all the devices' brands and models of events on 5/7/2016 at 6:03:22 AM. devices' brands refers to phone_brand; models refers to device_model; on 5/7/2016 at 6:03:22 AM refers to timestamp = '2016-05-07 06:03:22';"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: Which brand is most common among people in their twenties? brand refers to phone_brand; brand that is most common refers to MAX(COUNT(phone_brand)); twenties refers to age BETWEEN 20 AND 30;"
talkingdata,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE app_all (
app_id integer,
PRIMARY KEY (app_id),
);
CREATE TABLE app_events (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events(event_id),
);
CREATE TABLE app_events_relevant (
event_id integer,
app_id integer,
is_installed integer,
is_active integer,
FOREIGN KEY (event_id) REFERENCES events_relevant(event_id),
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
);
CREATE TABLE app_labels (
app_id integer,
label_id integer,
FOREIGN KEY (app_id) REFERENCES app_all(app_id),
FOREIGN KEY (label_id) REFERENCES label_categories(label_id),
);
CREATE TABLE events (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
);
CREATE TABLE events_relevant (
event_id integer,
device_id integer,
timestamp datetime,
longitude real,
latitude real,
PRIMARY KEY (event_id),
FOREIGN KEY (device_id) REFERENCES gender_age(device_id),
);
CREATE TABLE gender_age (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
FOREIGN KEY (device_id) REFERENCES phone_brand_device_model2(device_id),
);
CREATE TABLE gender_age_test (
device_id integer,
PRIMARY KEY (device_id),
);
CREATE TABLE gender_age_train (
device_id integer,
gender text,
age integer,
group text,
PRIMARY KEY (device_id),
);
CREATE TABLE label_categories (
label_id integer,
category text,
PRIMARY KEY (label_id),
);
CREATE TABLE phone_brand_device_model2 (
device_id integer,
phone_brand text,
device_model text,
);
CREATE TABLE sample_submission (
device_id integer,
F23- real,
F24-26 real,
F27-28 real,
F29-32 real,
F33-42 real,
F43+ real,
M22- real,
M23-26 real,
M27-28 real,
M29-31 real,
M32-38 real,
M39+ real,
PRIMARY KEY (device_id),
);
---------------------
QUESTION: What percentage of vivo devices belong to users with no information? percentage = MULTIPLY(DIVIDE(SUM(gender = NULL and age = NULL and `group` = NULL), COUNT(device_id)), 1.0); vivo devices refers to phone_brand = 'vivo'; no information refers to gender = NULL AND age = NULL AND `group` = NULL;"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list all the keywords of the episode ""Refuge: Part 1"". episode ""Refuge: Part 1"" refers to title = 'Refuge: Part 1'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many keywords are there for season 9, episode 23 of law_and_order?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode with the keyword ""laundering money""? keyword ""laundering money"" refers to keyword = 'laundering money'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list all the keywords for the episodes with a rating of over 8. a rating of over 8 refers to rating > 8"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many 10-star votes were given to the episode titled ""Cherished""? 10-star vote refers to stars = 10; titled ""Cherished"" refers to title = 'Cherished'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many votes did the episode titled ""Cherished"" get in total? titled ""Cherished"" refers to title = 'Cherished'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode that got the most 10-star votes? the most refers to max(votes); 10-star refers to stars = 10"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Park Dietz was credited in which role in the episode titled ""Cherished""? credited refers to credited = 'true'; titled ""Cherished"" refers to title = 'Cherished'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people had filled a role in the episode titled ""Cherished"", but did not show up in the on-screen credits? titled ""Cherished"" refers to title = 'Cherished'; did not show up in the on-screen credits refers to credited = ''"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who was credited as ""technical advisor"" in the episode titled ""Cherished""? who refers to name; credited refers to credited = 'true'; as ""technical advisor"" refers to role = 'technical advisor'; titled ""Cherished"" refers to title = 'Cherished'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: For how many times was Park Dietz credited? credited refers to credited = 'true'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list the titles of all the episodes in which Park Dietz was credited. credited refers to credited = 'true'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Was Anthony Azzara's role in episode tt0629204 displayed in the credits at the end of the episode? episode tt0629204 refers to episode_id = 'tt0629204'; credited refers to credited = 'true'; not credited refers to credited = ''"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many keywords are there in the episode Disciple? episode Disciple refers to title = 'Disciple'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode got the most 1 star votes? Give its title. the most refers to max(votes); 1 star refers to stars = '1'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many nominations did Law and Order season 9, episode 20 get? Law and Order refers to series = 'Law and Order'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit? Law and Order refers to series = 'Law and Order'; included in the credit refers to credited = 'true'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Describe what happened in the episode of award no.296. description of what happened refers to summary; award no.296 refers to award_id = '296'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which role did Joseph Blair play in the show?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards has Rene Balcer been nominated for?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: For the episode with the most votes, give its air date. the most votes refers to max(votes)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who was nominated for award no.313? Give the full name. award no.313 refers to award_id = '313'; full name refers to name"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes did J.K. Simmons' role appear on the show?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Display the number of 9-star votes the episode Sideshow received. 9-star vote refers to stars = '9'; episode Sideshow refers to title = 'Sideshow'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many times is the number of keywords in ""Refuge: Part 1"" episode than ""Shield"" episode? ""Refuge: Part 1"" episode refers to title = 'Refuge: Part 1'; ""Shield"" episode refers to title = 'Shield'; times = divide(count(keyword where title = 'Refuge: Part 1'), count(keyword where title = 'Shield'))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Calculate the average number of cast members that appeared in the credit from the 185th to the 193rd episode. appeared in the credit refers to credited = 'TRUE'; from the 185th to the 193rd episode refers to number_in_series between 185 and 193; cast refers to category = 'Cast'; average number = divide(count(episode_id), 9)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the names of the person that were not credited at the end of episode tt0629391? not credited refers to credited = ''; episode tt0629391 refers to episode_id = 'tt0629391'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people have won at least 3 awards? won refers to result = 'Winner'; at least 3 awards refers to count(result) > 3"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the script supervisor of the series in episode tt0629204? who refers to name; script supervisor refers to role = 'script supervisor'; episode tt0629204 refers to episode_id = 'tt0629204'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards has Julia Roberts been nominated for? been nominated refers to result = 'Nominee'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the tallest camera operator? who refers to name; the tallest refers to max(height_meters); camera operator refers to role = 'camera operator'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people, who were born in Canada, won an award in 1999? born in Canada refers to birth_country = 'Canada'; in 1999 refers to year = 1999"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people gave the most enjoyed episode a 10-star rating? the most enjoyed refers max(rating); 10-star refers to stars = 10"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the ""Shield"" episode? ""Shield"" episode refers to title = 'Shield'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the percentage of people who gave the ""True North"" episode a 1-star rating? the ""True North"" episode refers to title = 'True North'; 1-star refers to stars = 1; percentage = divide(count(episode_id where stars = 1), count(episode_id)) * 100% where title = 'True North'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode with the highest number of keywords? the highest number of keywords refers to max(count(keyword))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the episodes that were aired in 1998, how many won an International Monitor Awards? aired in 1998 refers to air_date like '1998%'; won refers to result = 'Winner'; International Monitor Awards refers to organization = 'International Monitor Awards'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many times did the episode titled ""Agony"" win an award? titled ""Agony"" refers to title = 'Agony'; win an award refers to result = 'Winner'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes are there in the 9th season of Law and Order? Calculate the average number of casts per season of the said series. the 9th season refers to season = 9; Law and Order refers to series = 'Law and Order'; cast refers to category = 'Cast'; average number of casts per season = divide(count(person_id), count(episode_id))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the episode which received the 2nd-highest number of votes? the 2nd-highest number of votes refers to second max(votes)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many awards did the ""Agony"" win? the ""Agony"" refers to title = 'Agony'; win refers to result = 'Winner'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the narrator of the ""Flight"" episode? who refers to name; narrator refers to role = 'Narrator'; the ""Flight"" episode refers to title = 'Flight'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In which organization did Constantine Makris win the most awards? win refers to result = 'Winner'; the most awards refers to max(count(award_id))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the stunt coordinator in episode 3? who refers to name; stunt coordinator refers to role = 'stunt coordinator'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people were not credited at the end of the ""Admissions"" episode? not credited refers to credited = ''; the ""Admissions"" episode refers to title = 'Admissions'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode that has the highest number of crews in the Art Department? the highest number of crews refers to max(count(person_id)); in the Art Department refers to category = 'Art Department'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many roles did Julia Roberts play in the series?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the titles of the top 3 episodes that received no less than 30 votes in its 10-star rating? no less than 30 votes refers to votes > = 30; 10-star rating refers to stars = 10"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the youngest person to ever play a ""clerk"" role in the series? who refers to name; the youngest person refers to max(birthdate); a ""clerk"" role refers to role = 'Clerk'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people did not enjoy the finale episode? did not enjoy refers to stars = 1; the finale episode refers to episode = 24"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the names of all the cast members in the series. cast member refers to category = 'Cast'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the person who appeared the most in the series? Calculate in percentage how many times he or she appeared. who refers to name; appear the most refers to max(count(person_id)); percentage = divide(count(person_id where max(count(person_id))), count(person_id)) * 100%"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episodes of the Law & Order have been nominated for the Primetime Emmy Awards? episode refers to award; the Primetime Emmy Awards refers to award_category like 'Primetime Emmy'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes have not won any Law & Order series awards? have not won any award refers to Result = 'Nominee'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What roles have not been credited at the end of the episodes? have not been credited refers to credited = ''"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the 3 worst rated episodes? worst rated refers to min(rating)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the full place of birth of Rene Chenevert Balcer? full place of birth refers to birth_place, birth_region; Rene Chenevert Balcer refers to birth_name = 'Rene Chenevert Balcer'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the name of the actors born in the USA? born in the USA refers to birth_country = 'USA'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episodes that were least enjoyed? least enjoyed refers to stars = 1"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the names of the two people who won an award for their role as directors? won an award refers to result = 'Winner'; role as director refers to role = 'director'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many votes did the episode titled Juvenile get? the episode titled Juvenile refers to title = 'Juvenile'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In which episodes was Anthony Azzara not credited? which episode refers to title; not credited refers to credited = ''"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In what year did the episodes titled DWB get an award? titled DWB refers to title = 'DWB'; get an award refers to result = 'Winner'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: In which region were the assistant location managers born? region refers to birth_region; assistant location manager refers to role = 'assistant location manager'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many stars did the episodes in which Donna Villella worked?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What role was Julia Roberts nominated for? nominated refers to result = 'Nominee'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What role does the tallest person play? the tallest refers to max(height_meters)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the title of the episode with the most nominations? the most nominations refers to max(count(episode_id where result = 'Nominee'))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What was the rating of the episodes that Jace Alexander worked on?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the names of all the people who worked on episode 19 of season 9?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average star rating of the episodes Jim Bracchitta has worked on? average star rating = divide(sum(stars), count(episode_id)) where name = 'Jim Bracchitta'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What percentage of people have worked on the True North episode as additional crew? the True North episode refers to title = 'True North'; additional crew refers to role = 'Additional Crew'; percentage = divide(count(episode_id where role = 'Additional Crew'), count(episode_id)) * 100% where title = 'True North'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the title, summary, and air date of the episode that garnered 72 10-star votes. 72 10-star votes refers to stars = 10 and votes = 72"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many 6-star votes did episode 12 get? Please include the air date and rating. 6-star vote refers to stars = 6"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who is the winner of the Best Television Episode award for the Edgar category in 2000? Include his or her name and role. the Best Television Episode award refers to award = 'Best Television Episode'; the Edgar category refers to award_category = 'Edgar'; in 2000 refers to year = 2000"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Write down the organization, year, award, and award category in which Rene Balcer is the winner. Rene Balcer refers to name = 'Rene Balcer'; the winner refers to result = 'Winner'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Give me the years and episode IDs in which Constantine Makris was the winner of the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years. the winner refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years? who refers to name; writer refers to role = 'writer'; won refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999? nominated refers to result = 'nominee'; the Law and Order series refers to series = 'Law and Order'; the Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; in 1999 refers to year = 1999"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: On what episode did Julia Roberts win the ""Outstanding Guest Actress in a Drama Series"" award during the 1999 Primetime Emmy Awards? Tell me her role. win refers to result = 'Winner'; the ""Outstanding Guest Actress in a Drama Series"" award refers to award = 'Outstanding Guest Actress in a Drama Series'; the 1999 refers to year = 1999; Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List the titles and air dates of episodes that were produced by Billy Fox. produced refers to role = 'producer'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Among the American casts, how many were uncredited on episode ID tt0629228? American refers to birth_country = 'USA'; cast refers to category = 'Cast'; uncredited refers to credited = ''"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What was the role of Jason Kuschner in episode 9?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who played the role of the ""president of NBC West Coast"" in the first episode? who refers to name; the role of the ""president of NBC West Coast"" refers to role = 'president of NBC West Coast'; the first episode refers to episode = 1"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List down the titles of the top 3 episodes, from highest to lowest, in terms of their weighted stars. weighted stars = divide(sum(stars, percent), 100)"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the ratio of American casts on episode 2 of the series? Please include their roles. American refers to birth_country = 'USA'; cast refers to category = 'Cast'; ratio = divide(count(person_id where birth_country = 'USA'), total(category)) where category = 'Cast'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many people from Canada are nominated for an award? from Canada refers to birth_country = Canada; nominated refers to award is NOT NULL"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many episodes are credited to Jerry Orbach?"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out all the credit names for episode 9. credit name refers to name"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out all award titles nominated for episode 20. award title refers to title; nominated refers to result = 'Winner' or result = 'Nominee'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which role have won at least two awards for the entire season and list out the name? at least two awards refers to count(role) >1"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: List out director names that received an award along with the episode number. director refers to role = 'director'; received an award refers to result = 'Winner'; episode number refers to episode"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episodes are nominated for an awards but not win? nominated for an award but not win refers to result = 'Nominee'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average rating for each episode in season 9? average rating = divide(sum(rating), count(episode_id))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the difference of 10 stars votes between the first episode and the last episode? the first episode refers to episode = 1; the last episode refers to episode = 24; 10 stars vote refers to stars = 10; the difference = subtract(votes where episode = 1, votes where episode = 24) where stars = 10"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the episode rating with the most award won? the most award won refers to max(episode_id where result = 'Winner')"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many credits have been displayed from episode 1 until 10? credit displayed refers to credited = 'true'; from episode 1 until 10 refers to episode > = 1 AND episode < = 10"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the episode that has mafia keyword? mafia keyword refers to Keyword = 'mafia'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average star with highest percentage for episodes that have received award? received award refers to result = 'Winner'; the highest percentage refers to max(percent); average star = divide(sum(stars), count(episode_id))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the average ranking episodes that are nominated for an award? average ranking = divide(sum(rating), sum(episode_id))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: How many winners have been awarded a Television award by the ""American Bar Association Silver Gavel Awards for Media and the Arts""? winner refers to result = 'Winner'; Television award refers to award = 'Television'; the ""American Bar Association Silver Gavel Awards for Media and the Arts"" refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which continent was Michael Preston born on? continent refers to birth_country"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who was the nominee playing the role of Katrina Ludlow in the Law & Order series? nominee refers to result = 'Nominee'; the role of Katrina Ludlow refers to role = 'Katrina Ludlow'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who played the role of a teleplay in the episode that won ""Best Television Episode""? the role of a teleplay refers to role = 'teleplay'; won refers to result = 'Winner'; ""Best Television Episode"" refers to award = 'Best Television Episode'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What is the date of birth of the actor who played the role of a ""writer""? date of birth refers to birthdate"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode was nominated for the award for ""Outstanding Costume Design for a Series""? episode refers to title; ""Outstanding Costume Design for a Series"" refers to award = 'Outstanding Costume Design for a Series'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode has the highest total number of viewer votes? episode refers to title; the highest total number of viewer votes refers to max(sum(votes))"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who was the actor who was portraying ""Alex Brown"" and has been credited? who refers to name; portraying ""Alex Brown"" refers to role = 'Alex Brown'; has been credited refers to credited = 'true'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Where is the place of birth of the actor with the number nm0007064 who has not been credited for playing the role of a ""Narrator""? place of birth refers to birth_place; actor with the number nm0007064 refers to person_id = 'nm007064'; has not been credited refers to credited = ''; the role of a ""Narrator"" refers to role = 'narrator'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: What are the keywords of the episode ""Shield""? the episode ""Shield"" refers to title = 'Shield'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Who are the actors with a height of over 1.80m in an episode that won an award? who refers to name; a height of over 1.80m refers to height_meters > 1.80; won an award refers to result = 'Winner'"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode has the two keywords ""nun"" and ""priest""? episode refers to title; the two keywords ""nun"" and ""priest"" refers to keyword = 'nun' or keyword = 'priest';"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Which episode number has the second highest positive viewer comments and has been awarded ""Best Television Episode""? episode number refers to episode_id; awarded ""Best Television Episode"" refers to award = 'Best Television Episode' and result = 'Winner'; the second highest positive viewer comments refers to rating = 8.5"
law_episode,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Episode (
episode_id text,
series text,
season integer,
episode integer,
number_in_series integer,
title text,
summary text,
air_date date,
episode_image text,
rating real,
votes integer,
PRIMARY KEY (episode_id),
);
CREATE TABLE Keyword (
episode_id text,
keyword text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
CREATE TABLE Person (
person_id text,
name text,
birthdate date,
birth_name text,
birth_place text,
birth_region text,
birth_country text,
height_meters real,
nickname text,
PRIMARY KEY (person_id),
);
CREATE TABLE Award (
award_id integer,
organization text,
year integer,
award_category text,
award text,
series text,
episode_id text,
person_id text,
role text,
result text,
PRIMARY KEY (award_id),
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Credit (
episode_id text,
person_id text,
category text,
role text,
credited text,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
FOREIGN KEY (person_id) REFERENCES Person(person_id),
);
CREATE TABLE Vote (
episode_id text,
stars integer,
votes integer,
percent real,
FOREIGN KEY (episode_id) REFERENCES Episode(episode_id),
);
---------------------
QUESTION: Please list any three episodes that were most enjoyed by the viewers. episode refers to title; most enjoyed by the viewers refers to stars = 10"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: According to the observation on 2008/3/11, what was the height of Elly Koss? 2008/3/11 refers to date = '2008-03-11'; height refers to DESCRIPTION = 'Body Height' from observations;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: By how much did Elly Koss's weight increase from the observation in 2008 to the observation in 2009? SUBTRACT((DATE like '2009%'), (DATE like '2008%')) where DESCRIPTION = 'Body Weight';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: During all the observations of Elly Koss, what was the highest Systolic Blood Pressure observed? the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: For how many times had Elly Koss have her Systolic Blood Pressure observed? Systolic Blood Pressure refers to DESCRIPTION = 'Systolic Blood Pressure';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name. the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations; full name refers to first, last;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: For how long was Elly Koss required to take Acetaminophen? SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION like 'Acetaminophen%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Please list all the medication that are prescribed to Elly Koss. medication that are prescribed refers to DESCRIPTION from medications;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Why did Elly Koss need to take Acetaminophen? why need to take Acetaminophen refers to REASONDESCRIPTIONÂ  where DESCRIPTION like 'Acetaminophen%' from medications;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What medication did Elly Koss take when she had Streptococcal sore throat? medication refers to DESCRIPTION from medications; Streptococcal sore throat refers to REASONDESCRIPTION like 'Streptococcal sore throat%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Please give the full names of all the patients who had been prescribed with Acetaminophen. full name refers to first, last; prescribed with Acetaminophen refer to DESCRIPTION like 'Acetaminophen%' from medications;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What was the condition of Elly Koss on 2009/1/8? condition on 2009/1/8 refers to DESCRIPTION from conditions where START = '2009-01-08';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: For how long did Elly Koss's cystitis last? SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION = 'Cystitis';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: According to all the observations of Elly Koss, what was her average weight? DIVIDE(SUM(VALUE), COUNT(VALUE)) WHERE DESCRIPTION = 'Body Weight';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among all the patients who once had cystitis, what was the percentage of them being married? DIVIDE(COUNT(marital = 'M'), COUNT(patient)) as percentage where DESCRIPTION = 'Cystitis';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give the body height status of Mr. Vincent Wyman on 2010/8/2. body height status refers to DESCRIPTION = 'Body Height' from observations;Â on 2010/8/2 refers to DATE = '2010-08-02';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many care plans has Mrs. Norman Berge taken?"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Why did Mrs. Annabelle Pouros take leucovorin 100 mg injection on 1970/12/19? State the reason. reason why take leucovorin 100 mg injection refers to REASONDESCRIPTION where DESCRIPTION = 'Leucovorin 100 MG Injection'; on 1970/12/19 refers to START = '1970-12-19';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the prevalence percentage of condition no. 64859006? condition no. 64859006 refers to conditions where CODE = '64859006';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: State the prevalence rate of condition no. 368581000119106. condition no. 368581000119106 refers to conditions where CODE = '368581000119106';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give the procedure description of Ms. Jacquelyn Shanahan on 2009/8/9. on 2009/8/9 refers to DATE = '2009-08-09';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give the number of claims did Ms. Abbie Cole have in the year of 2011. in the year of 2011 refers to BILLABLEPERIOD between '2010-12-31' and '2012-01-01';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many allergies does Mrs. Saundra Monahan have? allergies refer to PATIENT from allergies;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the name of the patient who had a claim on 1947/9/11. name of the patient implies full name and refers to first, last; on 1947/9/11 refers to BILLABLEPERIOD = '1947-09-11';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Describe the encounter of Mr. Hubert Baumbach on 2008/10/25. encounter refers to DESCRIPTION from encounters; on 2008/10/25 refers to DATE = '2008-10-25';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What kind of condition did Keven Kuhn have from 2016/9/24 to 2016/10/10? Describe the condition. kind of condition refers to DESCRIPTION from conditions;Â from 2016/9/24 to 2016/10/10 refers to START = '2016-09-24' and STOP = '2016-10-10';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: When did Mrs. Ira Deckow have the standard pregnancy test? standard pregnancy test refers to DESCRIPTION = 'Standard pregnancy test' from procedures;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the average period of Mr. Wesley Lemke's care plans. DIVIDE(SUBTRACT(stop time - start time), COUNT(ID)));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: State the average period of Ms. Angelena Kertzmann's several normal pregnancies. DIVIDE(SUBTRACT(stop time - start time), COUNT(DESCRIPTION = 'Normal pregnancy')));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the id of the patient who has the longest allergy period? id of the patient refers to PATIENT from allergies where STOP is not null; the longest allergy period refers to MAX(SUBTRACT((SUBSTR(STOP, - 2, 1)! = '9' then substr(STOP, length(STOP) - 1) + 2000 end), (SUBSTR(START, - 2, 1) = '9' then substr(START, length(START) - 1) + 1900 else substr(START, length(START) - 1) + 2000 end)));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients have diabetes that started in 1988? diabetes that started in 1988 refers to DESCRIPTION = 'Diabetes' from conditions and START like '1988%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients are allergic to eggs? allergic to eggs refer to DESCRIPTION = 'Allergy to eggs' from allergies;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the id of the patient whose hypertension started most recently? id of the patient refers to PATIENT from conditions;Â  hypertension refers to DESCRIPTION = 'Hypertension'; most recently refers to MAX(START);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the most common allergy among patients? the most common allergy refers to MAX(COUNT(DESCRIPTION)) from allergies;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is/are the ids of the tallest patient/s? id of the tallest patient/s refers to PATIENT from observations where MAX(DESCRIPTION = 'Body Height');"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the most common condition among the female Americans? the most common condition refers to MAX(COUNT(DESCRIPTION)); among the female Americans refer to PATIENT where gender = 'F' and ethnicity = 'american';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients that started taking Ibuprofen 200mg Oral Tablet in 2016, how many Dominican patients stopped taking the medicine after exactly one month? Ibuprofen 200mg Oral Tablet refers to DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' from medications; started in 2016 refers to START like '2016%'; Dominican patients refer to ethnicity = 'dominican'; stopped taking the medicine after exactly one month refers to SUBTRACT(strftime('%m', STOP), strftime('%m', START)) = 1;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many of the patients born in 1920s had pneumonia? patients born in 1920s refer to patient where birthdate like '192%'; pneumonia refers to DESCRIPTION = 'Pneumonia' from conditions;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What are the full names of the patients who started taking Yaz 28 Day Pack in 2011? full name refers to first, last; Yaz 28 Day Pack refers to DESCRIPTION = 'Yaz 28 Day Pack' from medications; started taking in 2011 refers to START like '2011%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many Black patients were immunized with DTaP in 2013? Black patients refer to patient where race = 'black'; immunized with DTaP refers to DESCRIPTION = 'DTaP' from immunizations; in 2013 refers to DATE like '2013%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many immunizations did the patient with the most prevalent condition that started recently get? patient with the most prevalent condition refers to patient where MAX(PREVALENCE RATE); started recently refers to MAX(START);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients have the most prevalent conditions? the most prevalent conditions refer to MAX(PREVALENCE RATE);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization? the most common condition refers to MAX(DESCRIPTION) from conditions; patients who received influenza seasonal injectable preservative free immunization refer to PATIENT where DESCRIPTION = 'Influenza seasonal injectable preservative free' from immunizations;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List the ids of all the patients with condition that has a prevalence percentage of 18.8%. ids of the patients refer to PATIENT from conditions; condition that has a prevalence percentage of 18.8% refers to PREVALENCE PERCENTAGE = 18.8;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many conditions did Tyree Eichmann have? conditions refer to DESCRIPTION from conditions;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization? immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients with prediabetes, how many are female? patients with prediabetes refer to PATIENT from conditions where DESCRIPTION = 'Prediabetes'; female refers to gender = 'F';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Indicate the patient's full name with the lowest body mass index in kg/m2. full name refers to first, last; the lowest body mass index in kg/m2 refers to DESCRIPTION = Body Mass Index from observations where MIN(VALUE) and UNITS = 'kg/m2';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the age of the patient with hypertension named Giovanni Russel? age refers to SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)); hypertension refers to conditions where DESCRIPTION = 'Hypertension';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many Asian female patients take oxaliplatin 5 MG/ML [Eloxatin]? female refers to gender = 'F'; oxaliplatin 5 MG/ML [Eloxatin] refers to medications where DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Count all of the living patients that had a stroke. if deathdate is null, it means this patient is still alive or living; stroke refers to conditions where DESCRIPTION = 'Stroke';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the total number of Asian patients who are allergic to peanuts? Asian refers to race like 'asian%'; allergic to peanuts refers to allergies where DESCRIPTION = 'Allergy to peanuts';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients with hypertension, what is the average of their diastolic blood pressure? hypertension refers to conditions where DESCRIPTION = 'Hypertension'; average diastolic blood pressure refers to AVG(VALUE) where DESCRIPTION = 'Diastolic Blood Pressure' from observations;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the medicine prescribed for the patient with social security number 999-94-3751? medicine prescribed refers to DESCRIPTION from medications; social security number 999-94-3751 refers to ssn = '999-94-3751';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give the social security number of the female Irish patient allergic to grass pollen. social security number refers to ssn; female refers to gender = 'F'; Irish refers to ethnicity = 'irish'; allergic to grass pollen refers to allergies where DESCRIPTION = 'Allergy to grass pollen';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Who is the patient involved in the care plan with code 311791003?"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients that died, what is the condition of the oldest patient? if deathdate is not null, it means this patient died; condition refers to DESCRIPTION from conditions; the oldest patient refers to MAX(SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the code of the prevalent disease with the highest occurrences?"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the glucose level of the patient that lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US? glucose level refers to VALUE, UNITS where DESCRIPTION = 'Glucose' from observations; lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US refers to address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide at least 5 social security numbers of patients with a prevalent disease with a prevalence percentage lower than 30% of the average prevalence percentage of conditions. social security number refers to ssn; prevalence percentage lower than 30% of the average prevalence percentage of conditions refers to PREVALENCE PERCENTAGE < MULTIPLY(0.3, AVG(PREVALENCE PERCENTAGE));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients with acute bronchitis, what is the percentage of Asian women? DIVIDE(COUNT(PATIENT where gender = 'F' and race = 'asian'), COUNT(PATIENT)) as percentage where DESCRIPTION = 'Acute bronchitis (disorder)' ;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the number of encounters for Major D'Amore."
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List the procedures received by Emmy Waelchi. procedures refer to DESCRIPTION from procedures;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the patients' full names who received the extraction of wisdom tooth. patient's full name refers to first, last; extraction of wisdom tooth refers to DESCRIPTION = 'Extraction of wisdom tooth' from procedures;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the body weight of Elly Koss in every observation. body weight VALUE and UNITS where DESCRIPTION = 'Body Weight' from observations;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Name the patients who had an allergy to soy. allergy to soy refers to allergies where DESCRIPTION = 'Allergy to soya';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many times did Keven Kuhn receive DTaP immunization? DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Who had to take Clopidogrel 75 MG Oral Tablet for over 10 years? Who implies the full name of the patient which refers to first, last; Clopidogrel 75 MG Oral Tablet refers to medications where DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet'; for over 10 years refers to SUBTRACT(strftime('%Y', STOP), strftime('%Y', START)) > 10;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Which procedures and medications were received by the patient with the third-degree burn? procedures refer to DESCRIPTION from procedures; medications refers to DESCRIPTION from medications; third-degree burn refers to conditions where DESCRIPTION = 'Third degree burn';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide medications received by patients with an allergy to mould on 6th June 2016. medications refers to DESCRIPTION from medications; allergy to mould refers to allergies where DESCRIPTION = 'Allergy to mould'; on 6th June 2016 refers to START = '6/6/16';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Describe the care plans received by the patient with secondary malignant neoplasm of the colon. care plans refer to DESCRIPTION from careplans; secondary malignant neoplasm of the colon refers to conditions where DESCRIPTION = 'Secondary malignant neoplasm of colon';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the prevalence rate of the patients' diseases started on 9th May 2014? diseases started on 9th May 2014 refer to DESCRIPTION from conditions where START = '5/9/2014';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg. name implies the patient's full name which refers to first, last; age refers to deathdate is null then SUBTRACT(strftime('%Y', DATE), strftime('%Y', birthdate)); Systolic Blood Pressures are 200mmHg refers to DESCRIPTION = 'Systolic Blood Pressure' and VALUE = 200 and UNITS = 'mmHg' from observations; in 2011 refers to DATE like '2011%';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English? DIVIDE(COUNT(PATIENT when DESCRIPTION = 'Influenza seasonal injectable preservative free'), COUNT(PATIENT)) as percentage where strftime('%Y', 2017); English refers ethnicity = 'english';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the first name of patients who encountered normal pregnancy. encountered normal pregnancy refers to encounters where REASONDESCRIPTION = 'Normal pregnancy';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What are the birth date of patients who took outpatient encounter care plan? outpatient encounter care plan refers to careplans where DESCRIPTION = 'Outpatient Encounter';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the first name of patients who have cystitis condition. cystitis refers to conditions where DESCRIPTION = 'Cystitis';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many stroke patients have married? stroke refers to conditions where DESCRIPTION = 'Stroke'; married refers to the marital status of the patient in which marital = 'M';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the address of patients who have billable period in 2010."
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the last name of patients who are allergic to dairy products. allergic to dairy products refers to allergies where DESCRIPTION = 'Allergy to dairy product';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: When the allergy starts for Angelo Buckridge."
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many of the male patients are allergic to house dust mites? male patients refer to PATIENT where gender = 'M'; allergic to house dust mites refers to allergies where DESCRIPTION = 'House dust mite allergy';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What kind of allergy is most common among white people? kind of allergy is most common refers to MAX(COUNT(DESCRIPTION)) from allergies; white refers to race = 'white';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the first name of patients who received ""Influenza seasonal injectable preservative free"" immunization. ""Influenza seasonal injectable preservative free"" immunization refers to immunizations where DESCRIPTION = 'Influenza seasonal injectable preservative free';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the number of female patients who accepted ""HPV quadrivalent"" immunization. female refers to gender = 'F'; ""HPV quadrivalent"" immunization refers to immunizations where DESCRIPTION = 'HPV quadrivalent';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the encounter descriptions of patients who were born in Pittsfield MA US. born in Pittsfield MA US refers to birthplace = 'Pittsfield MA US';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the total type of allergies for German people. type of allergies refers to DESCRIPTION from allergies; German people refer to PATIENT where ethnicity = 'german';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the average age of patients with prediabetes care plan. SUBTRACT(SUM(deathdate), SUM(birthdate)), COUNT(patient) where REASONDESCRIPTION = 'Prediabetes' from careplans;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many of the patients who have stopped taking medication for 'coronary heart disease' are still alive? patients who have stopped taking medication for 'coronary heart disease' refer to PATIENT where REASONDESCRIPTION = 'Coronary Heart Disease' and STOP is not null from medications; if deathdate is null, it means this patient is still alive;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many of the patients who underwent a 'bone immobilization' procedure have a driver's license? patients who underwent a 'bone immobilization' procedure refer to PATIENT from procedures where DESCRIPTION = 'Bone immobilization'; have a driver's license refers to drivers is not null;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Indicate the full name of the patients who have 3 different allergies. full name refers to first, last; have 3 different allergies refer to allergies where COUNT(DESCRIPTION) > 3;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients with 'allergy to eggs' have been immunized with 'Td (adult) preservative free'? allergy to eggs' refers to allergies where DESCRIPTION = 'Allergy to eggs'; immunized with 'Td (adult) preservative free' refers to immunizations where DESCRIPTION = 'Td (adult) preservative free';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients with a body weight of more than 100 kg have a 'diabetes self-management plan' care plan? body weight of more than 100 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg'; diabetes self-management plan refers to careplans.DESCRIPTION = 'Diabetes self management plan';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What gender is more prone to 'dander (animal) allergy'? gender who is more prone to dander (animal) allergy refers to MAX(COUNT(Gender WHERE allergies.DESCRIPTION = 'Dander (animal) allergy'));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: On what dates did the billable period begin for patients with the last name Dickinson? dates when the billable period begin refers to BILLABLEPERIOD;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List the full name of all patients with 'otitis media'. full name = first, last; otitis media refers to conditions.DESCRIPTION = 'Otitis media';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients of Irish ethnicity take medication for 'myocardial infarction'? take medication for myocardial infarction refers to medications.REASONDESCRIPTION = 'Myocardial Infarction';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients with care plan for 'concussion with loss of consciousness' are married? concussion with loss of consciousness refers to careplans.DESCRIPTION = 'Concussion with loss of consciousness'; married refers to marital = 'M';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients immunized against 'monovalent rotavirus' ceased their care plan on 11/23/2013? immunized against monovalent rotavirus refers to immunizations.DESCRIPTION = 'rotavirus monovalent'; ceased their care plan on 11/23/2013 refers to careplans.STOP = '2013-11-23';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many women need to take 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'? women refers to gender = 'F';Â Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual] refers to medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What percentage of patients born in 'Pembroke MA US' have 'allergy to grass pollen'? percentage = MULTIPLY(DIVIDE(SUM(patient WHERE allergies.DESCRIPTION = 'Allergy to grass pollen'), COUNT(patient) WHERE birthplace = 'Pembroke MA US'), 100.0); born in Pembroke MA US refers to birthplace = 'Pembroke MA US'; allergy to grass pollen refers to allergies.DESCRIPTION = 'Allergy to grass';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the average body weight of Asian patients? average = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Weight' AND observations.UNITS = 'kg'); body weight refers to observations.DESCRIPTION = 'Body Weight'; Asian refers to race = 'asian';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Write down the Social Security numbers of patients who have latex allergies. Social Security numbers refers to ssn; latex allergies refers to allergies.DESCRIPTION = 'Latex allergy';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How long did Isadora Moen's allergy last? Tell me what kind of allergy she has. how long the allergies last = SUBTRACT(allergies.STOP, allergies.START); kind of allergy refers to allergies.DESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many times was Elly Koss given a care plan between 1/11/2009 and 10/23/2010? between 1/11/2009 and 10/23/2010 refers to careplans.START between '2009-11-1' and '2010-10-23';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: In 2009, who among the married patients had undergone a care plan for more than 60 days? in 2009 refers to year(careplans.START) = 2009; married patients refers to marital = 'M'; undergone a care plan for more than 60 days refers to SUBTRACT(careplans.STOP, careplans.START) > 60;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Please provide the dates on which Elly Koss was immunized with the influenza seasonal injectable preservative-free vaccine. date of immunization refers to immunizations.DATE; immunized with the influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: From 7/9/2010 to 10/29/2013, how many black patients were immunized with the meningococcal MCV4P vaccine? From 7/9/2010 to 10/29/2013 refers to DATE between '2010-07-09' and '2013-10-29'; black patients refers to race = 'black'; immunized with the meningococcal MCV4P vaccine refers to immunizations.DESCRIPTION = 'meningococcal MCV4P';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give me the immunization codes and dates on which Ms. Jacquelyn Shanahan was immunized with influenza seasonal injectable preservative-free vaccine. immunization codes refers to immunizations.CODE; immunization dates refers to immunizations.DATE; immunized with influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free'; 4 consecutive years refers to 4 succeeding years;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How long did Berry Keebler take the Acetaminophen 160 MG when he was admitted due to acute bronchitis? how long = SUBTRACT(medications.STOP, medications.START); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG'; acute bronchitis refers to medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: In 2010, how many single patients took Nitrofurantoin 5 mg/ML [Furadantin] to cure cystitis? in 2010 refers to substr(medications.START, 1, 4) = '2010' AND substr(medications.stop, 1, 4) = '2010'; Nitrofurantoin 5 mg/ML [Furadantin] refers to medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'; cystitis refers to medications.REASONDESCRIPTION = 'Cystitis';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Tell me the reason for Lavelle Vandervort's encounter on 11/20/2013? reason for encounter refers to encounters.REASONDESCRIPTION; on 11/20/2013 refers to encounters.DATE = '2013-11-20';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: From 1/9/2011 to 8/29/2012, how many German patients have their outpatient encounters? From 1/9/2011 to 8/29/2012 refers to encounters.DATE between '2011-09-01' and '2012-08-29'; German patients refers to ethnicity = 'german'; outpatient encounters refers to encounters.DESCRIPTION = 'Outpatient Encounter';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008? social security number refers to ssn; encountered viral sinusitis refers to encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'; on 6/13/2008 refers to encounters.DATE = '2008-06-13';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Give me the reason, name of the drug, and duration of medication under encounter ID 23c293ec-dbae-4a22-896e-f12cf3c8bac3. Tell me if the patient is still alive. reason refers to medications.REASONDESCRIPTION; name of the drug refers to medications.DESCRIPTION; duration of medication = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); ecounter ID refers to encounters.ID; encounters.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'; if patients.deathdate is null then the patient is alive; if patients.deathdate is not null then the patient is not alive;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients with shellfish allergies died when they were under 12 years old? Please give their full names. shellfish allergies refers to allergies.DESCRIPTION = 'Shellfish allergy'; died under 12 years old = DIVIDE(SUBTRACT(julianday(patients.deathdate), julianday(patients.birthdate)), 365) < 12; full names = first, last;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How long was Mr. Major D'Amore prescribed with Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]? how long = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin] refers to medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many types of medication have been prescribed to Mr. Major D'Amore since his visit to the hospital? types of medications refers to medications.DESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out all the observation information collected for the patient named Bella Rolfson. observation information refers to observations.DESCRIPTION AND observations.VALUE AND observations.UNITS;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out patient names with calcium deficiency. patient names = first, last; calcium deficiency refers to observations.DESCRIPTION = 'Calcium' and observations.VALUE < 8.6;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out 5 most common conditions for underweight patient. most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); underweight patient refers to MIN(observations.VALUE WHERE observations.DESCRIPTION = 'Body Mass Index');"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many mothers have taken immunization during prenatal visit? expecting mothers can be attributed to encounters.REASONDESCRIPTION = 'Normal pregnancy';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What care plans have been received by Mrs. Elly Koss during year 1970? during year 1970 refers to substr(careplans.START, 1, 4) = '1970' and substr(careplans.STOP, 1, 4) = '1970';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the care plan, procedure, medication and the patient's full name for encounter 6f2e3935-b203-493e-a9c0-f23e847b9798? car plan refers to careplans.DESCRIPTION; procedure refers to procedures.DESCRIPTION; medication refers to medications.DESCRIPTION; full name = first, last; encounter refers to encounters.ID; encounters.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many male patients are diagnosed with hypertension as compared to female patients? male refers to gender = 'M'; diagnosed with hypertension refers to conditions.DESCRIPTION = 'Hypertension'; female refers to gender = 'F'; number of male patients with hypertension = count(patient WHERE gender = 'M' AND conditions.DESCRIPTION = 'Hypertension'); number of female patients with hypertension = count(patient WHERE gender = 'F' AND conditions.DESCRIPTION = 'Hypertension');"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many unmarried women were checked for normal pregnancy? unmarried refers to marital = 'S'; women refers to gender = 'F'; normal pregnancy refers to conditions.DESCRIPTION = 'normal pregnancy';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out the procedure and medicine prescribed for drug overdose patients. procedure refers to procedures.DESCRIPTION; medicine prescribed refers to medications.DESCRIPTION; drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the average body mass index for patients with higher total cholesterol? average body mass index = DIVIDE(SUM(observations.VALUE), COUNT(PATIENT) WHERE observations.DESCRIPTION = 'Body Mass Index'); body mass index refers to observations.DESCRIPTION = 'Body Mass Index'; higher total cholesterol refers to observations.DESCRIPTION = 'Total Cholesterol' and observations.VALUE > = 200;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the difference between average glucose reading for patients in the 20s and 50s? sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end)-sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end)"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the percentage of the most common conditions for patients age 60 and above? most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); age 60 and above refers to SUBTRACT(conditions.START, birthdate) > 60; percentage = MULTIPLY(DIVIDE(SUM(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)) AND SUBTRACT(conditions.START, birthdate) > 60))), COUNT(patients.patient WHERE MAX(COUNT(conditions.DESCRIPTION)), 10);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Name the reason Walter Bahringer visited medical professionals in July 2009. reason for visiting medical professionals refers to encounters.REASONDESCRIPTION;Â  in July 2009 refers toÂ  substr(encounters.DATE, 1, 7) = '2009-07' ;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How old was Mr. Stacy Morar at the time of his first emergency room admission due to a drug overdose? how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); his first emergency room admission refers to MIN(encounters.DATE); drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose' ;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What drug is administered more often to treat child attention deficit disorder? drug that was administered refers to medications.DESCRIPTION; child attention deficit disorder refers to medications.REASONDESCRIPTION = 'Child attention deficit disorder';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Please include the full name of the patient who received a lung transplant. full name = first, last; lung transplant refers to procedures.DESCRIPTION = 'Transplant of lung (procedure)';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients on average receive combined chemotherapy and radiation therapy procedures each year? average = DIVIDE(COUNT(procedures.PATIENT), COUNT(substr(procedures.DATE, 1, 4))); combined chemotherapy and radiation therapy refers to procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Indicate the time frame and details of the most recent care plan suggested to Jacquelyn Shanahan. time frame = SUBTRACT(JULIANDAY(careplans.STOP), JULIANDAY(careplans.START)); details of care plan refers to careplans.DESCRIPTION; most recent care plan refers to MIN(careplans.STAR);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Identify the allergy period for Isadora Moen and what triggered it. allergy period = SUBTRACT(allergies.START, allergies.STOP); what triggered the allergy refers to allergies.DESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How old was Mrs. Laronda Bernier at the time of her most recent medical encounter? how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); most recent medical encounter refers to MIN(encounters.DATE);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What condition forced Mrs. Joye Homenick to seek medical attention in 2017? condition refers to conditions.DESCRIPTION; in 2017 refers to substr(conditions.START, 1, 4) = '2017';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: When did Mrs. Joye Homenick receive her most recent influenza seasonal vaccine? when a patient received her most recent vaccine refers to MAX(immunications.DATE); influenza seasonal vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How long did Elly Koss have to take Acetaminophen 160 MG? how long = SUBTRACT(julianday(medications.stop), julianday(medications.START)); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients sought medical attention due to a second-degree burn? Describe the care plan recommended to them. second-degree burn refers to encounters.REASONDESCRIPTION = 'Second degree burn'; ;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among all patients who sought medical attention in 2010 due to contact dermatitis, identify the percentage of females. in 2010 refers to substr(encounters.DATE, 1, 4) = '2010'; contact dermatitis refers to encounters.REASONDESCRIPTION = 'Contact dermatitis'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.PATIENT WHERE gender = 'F'), count(encounters.PATIENT) WHERE encounters.REASONDESCRIPTION = 'Contact dermatitis'), 1.0) females refers to gender = 'F';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many interactions did Lorri Simons have with medical professionals between 2010 and 2017? What percentage of encounters are attributed to prenatal visits? between 2010 and 2017 refers to substr(encounters.DATE, 1, 4) between '2010' and '2017'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.ID WHERE DESCRIPTION = 'Prenatal visit'), count(encounters.ID)), 1.0); prenatal visits refers to encounters.DESCRIPTION = 'Prenatal visit';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: State description of medication taken by Joe Homenick. description of medication refers to medications.DESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the start date of the care plan of the patient whose maiden name is Adams? start date of the care plan refers to careplans.START;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the male patients, who has the earliest starting date of the care plan? male patients refers to gender = 'M'; earliest starting date of the care plan refers to MIN(careplans.START);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the percentage of Hispanic patients who stopped their care plan in 2011? Hispanic patients refers to ethnicity = 'hispanic'; percentage = MULTIPLY(DIVIDE(COUNT(careplans.PATIENT WHERE ethnicity = 'hispanic'), COUNT(careplans.PATIENT)), 1.0); stopped their care plan in 2011 refers to substr(careplans.stop, 1, 4) = '2011';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: State the description of the reason why Angelo Buckridge needs the care plan. description of the reason of the care plan refers to careplans.REASONDESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Mention the description of the care plan of American patients. American refers to ethnicity = 'american';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What are the medical encounter ids of patients who were born in Pembroke MA US? medical encounter ids careplans.ID; born in Pembroke MA US refers to birthplace = 'Pembroke MA US';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out the start date of the care plan of alive patients. start of the care plan refers to careplans.START; alive patients refers to deathdate is null;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many white patients have the reason code of 10509002? white refers to race = 'white'; reason code of 10509002 refers to careplans.REASONCODE = '10509002';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out full name of patients who have ""Diabetic diet"" in the description of the care plan. full name = first, last; Diabetic diet refers to careplans.DESCRIPTION = 'Diabetic diet';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List out the stop date of the care plan of dead patients. stop date of the care plan refers to careplans.STOP; dead patients refers to deathdate is not null;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many Italian patients have the care plan code of 304510005? Italian patients refers to ethnicity = 'italian';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the percentage of female patients who started the care plan in 2010? female patients refers to gender = 'F'; started the care plan in 2010 refers to substr(careplans.START, 1, 4) = '2010'; percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE patients.gender = 'F'), COUNT(patients.patient) WHERE substr(careplans.START, 1, 4) = '2010'), 100);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many black patients stopped their care plan in 2017? black refers to race = 'black'; stopped their care plan in 2017 refers to substr(careplans.STOP, 1, 4) = '2017';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many male patients have prediabetes condition? male refers to gender = 'M'; prediabetes condition refers to conditions.DESCRIPTION = 'Prediabetes';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List the full names of patients with nut allergy. full names = first, last; nut allergy refers to allergies.DESCRIPTION = 'Allergy to nut';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Describe the condition of patient Wilmer Koepp."
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively. viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the full names of patients who have been taking Penicillin V Potassium 250 MG since 1948. full names = first, last; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; since 1948 refers to substr(medications.START, 1, 4) > = '1948';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many white patients whose birth year is 1935 have a stroke? white refers to race = 'white'; birth year is 1935 refers to substr(birthdate, 1, 4) = '1935'; stroke refers to conditions.DESCRIPTION = 'Stroke';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Which conditions the patient has when receiving the IPV immunization? IPV immunization refers to immunizations.DESCRIPTION = 'IPV';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List the patient ids whose disease has the most occurrences. patient ids refers to patients.patient; disease with the most occurrence refers to MAX(all_prevalences.OCCURENCES);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List all the full names of patients with a condition described as cystitis. full names = first, last; condition described as cystitis refers to conditions.DESCRIPTION = ''Cystitis';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many male patients have been described as immune to quadrivalent HPV? male refers to gender = 'M'; immune to quadrivalent HPV refers to immunizations.DESCRIPTION = 'HPV quadrivalent';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Indicate the start date of patient Walter Bahringer's care plan. start date of the care plan refers to careplans.START;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Describe the care plans of patient Major D'Amore's plan of care."
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the percentage of male patients with viral sinusitis condition. percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE gender = 'M'), COUNT(patients.patient) WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder))), 100); male patients refers to gender = 'M'; viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the patients who have been using Penicillin V Potassium 250 MG, what percentage of patients are female? Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; percentage = MULTIPLY(DIVIDE(patients.patient WHERE gender = 'F'), COUNT(patients.patient) WHERE medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'), 100) female refers to gender = 'F';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the white patients, what is the average body height of the patients? white refers to race = 'white'; average body height = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Height'); body height refers to observations.DESCRIPTION = 'Body Height';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Indicate the care plan needed for the patient living at 179 Sydni Roads, Taunton, MA 02780 US. living at 179 Sydni Roads, Taunton, MA 02780 US refers to address = '179 Sydni Roads Taunton MA 02780 US';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the allergen of the Dominican patient named Dirk Languish. allergen refers to allergies.DESCRIPTION;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: How many patients who are allergic to peanuts have asthma? allergic to peanuts refers to allergies.DESCRIPTION = 'Allergy to peanuts'; asthma refers to conditions.DESCRIPTION = 'Asthma';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Who is the 44-year-old patient diagnosed with drug overdose? 44-year-old = DIVIDE(SUBTRACT(julianday(conditions.START), julianday(patients.birthdate)), 365, 0) = 44;"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Provide the social security number of the patient with the highest systolic blood pressure. social security number refers to ssn; highest systolic blood pressure refers to MAX(observations.VALUE WHERE observations.DESCRIPTION = 'Systolic Blood Pressure');"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the care plan description of the prevalent disease with the highest prevalence percentage? highest prevalence percentage refers to MAX(PREVALENCE PERCENTAGE);"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the care plan for the patient with social security number 999-15-3685? social security number refers to ssn; ssn = '999-15-3685';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Calculate the average age of the male patients that have hypertension. average age = AVG(DIVIDE(SUBTRACT(deathdate is null WHERE (julianday(substr(datetime('now'), 1, 10)))), julianday(patients.birthdate)), 365); male refers to gender = 'M'; hypertension refers to conditions.DESCRIPTION = 'Hypertension'"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List 5 patients' name that need medication due to streptococcal sore throat disorder. patients name = first, last; streptococcal sore throat disorder refers to medications.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Who is the patient with a body weight of 61.97 kg? body weight of 61.97 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97; observations.UNITS = 'kg'"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: Among the male patients, list down 5 birth dates of patients taking the medication ""Penicillin V Potassium 250 MG"". male patients refers to gender = 'M'; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG';"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: List down the full name of Irish patients diagnosed with the prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions. full name = first, last; Irish refers to ethnicity = 'irish'; prevalent diseases that have an occurrence greater than the 96% of the average occurrences of all conditions = OCCURRENCES > (AVG(MULTIPLY(all_prevalences.OCCURRENCES, 0.96)));"
synthea,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE all_prevalences (
ITEM text,
POPULATION TYPE text,
OCCURRENCES integer,
POPULATION COUNT integer,
PREVALENCE RATE real,
PREVALENCE PERCENTAGE real,
PRIMARY KEY (ITEM),
);
CREATE TABLE patients (
patient text,
birthdate date,
deathdate date,
ssn text,
drivers text,
passport text,
prefix text,
first text,
last text,
suffix text,
maiden text,
marital text,
race text,
ethnicity text,
gender text,
birthplace text,
address text,
PRIMARY KEY (patient),
);
CREATE TABLE encounters (
ID text,
DATE date,
PATIENT text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
PRIMARY KEY (ID),
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
);
CREATE TABLE allergies (
START text,
STOP text,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE careplans (
ID text,
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE real,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE conditions (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
FOREIGN KEY (DESCRIPTION) REFERENCES all_prevalences(ITEM),
);
CREATE TABLE immunizations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE medications (
START date,
STOP date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE observations (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE text,
DESCRIPTION text,
VALUE real,
UNITS text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE procedures (
DATE date,
PATIENT text,
ENCOUNTER text,
CODE integer,
DESCRIPTION text,
REASONCODE integer,
REASONDESCRIPTION text,
FOREIGN KEY (PATIENT) REFERENCES patients(patient),
FOREIGN KEY (ENCOUNTER) REFERENCES encounters(ID),
);
CREATE TABLE claims (
ID text,
PATIENT text,
BILLABLEPERIOD date,
ORGANIZATION text,
ENCOUNTER text,
DIAGNOSIS text,
TOTAL integer,
PRIMARY KEY (ID),
);
---------------------
QUESTION: What is the difference between the number of married patients and the number of single patients with diabetes? difference = SUBTRACT(patients.patient WHERE marital = 'M'), COUNT(patients.patient WHERE marital = 'S') WHERE conditions.DESCRIPTION = 'Diabetes'); married patients refers to marital = 'M'; single patients refers to marital = 'S'; diabetes refers to conditions.DESCRIPTION = 'Diabetes';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List the country and how many customers are there."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which different vendor has the most amount of orders? Calculate the total estimated earnings. amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003? Mini Gifts Distributors Ltd. Is the customer name; shippedDate between '2003-01-01' and '2003-12-31'; total price = MULTIPLY(quantityOrdered, priceEach);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many employees are there in Sydney? sales agent and sales representative are synonyms; Sydney is a city;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers. reportsTO' is the leader of the 'employeeNumber';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005? paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address. highest paying customer refers to MAX(amount); entire address = addressLine1+addressLine2;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many checks were issued by Euro+ Shopping Channel in the year 2004? Euro+ Shopping Channel is a customer name; year(paymentDate) = '2004';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers? classic car is a product line; most ordered product refers to MAX(quantityOrdered);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004? creditLimit < = 100000; total payment amount refers to amount; highest total payment amount refers to MAX(amount); year(paymentDate) = '2004';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments. Tokyo is a city; 'reportsTO' is the leader of the 'employeeNumber'; highest payment refers to MAX(amount); total amount of payments = SUM(amount);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which two products has the highest and lowest expected profits? Determine the total price for each product in terms of the largest quantity that was ordered. expected profits = SUBTRACT(msrp, buyPrice); total price = MULTIPLY(quantityOrdered, priceEach)"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many different orders with a total price greater than 4000 are cancelled? total price = MULTIPLY(quantityOrdered, priceEach) > 4000; cancelled orders refer to status = 'Cancelled';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many distinct orders were there in 2003 when the quantity ordered was less than 30? year(orderDate) = '2003'; quantityOrdered < 30;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the total value of cancelled orders? total value = SUM(MULTIPLY(quantityOrdered, priceEach)); cancelled orders refers to status = 'Cancelled';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please calculate the total value of Motorcycles orders. Motorcycle is a product line; total value = SUM(MULTIPLY(quantityOrdered, priceEach));"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many Planes orders were there? Planes is a product line;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many orders which expected profits greater than 100? expected profits greater than 100 = (SUBTRACT(msrp, buyPrice))>100;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please calculate the average total price of orders from Exoto Designs Vendor in 2005. average total price = DIVIDE(SUM(MULTIPLY(quantityOrdered, priceEach))), COUNT(orderNumber)); year(orderDate) = '2005';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many sales representatives who have office code is 1? sales representative refers to jobTitle = 'Sales Rep';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list different customer names with the payment amount of over 50,000. amount > 50000;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please calculate the total payment amount of customers who come from the USA. USA is a country; total amount payment refers to SUM(amount);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What are the total payments of customers with no credit limit in 2003? total payment refers to SUM(amount); no credit limit refers to creditLimit = 0; year(paymentDate) = '2003';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list the name and phone number of the customer whose order was cancelled. cancelled order refers to status = 'Cancelled';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many French customers shipped 2 orders which have been cancelled? French is a nationality of country = 'France'; cancelled orders refers to status = 'Cancelled';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please calculate the average total price of shipped orders from German customers. average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out full name of employees who are working in Tokyo? Tokyo is a city; full name = firstName+lastName;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many Sales Rep who are working in Tokyo? List out email and full name of those employees. Sales Rep is a job title; Tokyo is a city; full name = firstName+lastName;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco staff of refers to reportsTO; San Francisco is a city;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Determine the email and Code of employee who are working at United State, state MA code of employee refers to employeeNumber; United States of America refers to country = 'USA';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many Sales Manager who are working in Sydney? List out their email. Sales Manager is a job title; Sydney is a city;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many employees who are living in Australia and have the credit limit under 200000? State their email address and countries where they are working. Australia is a country; creditLimit < 20000;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: State 10 emails of UK Sales Rep who have the lowest credit limit. UK is a country; Sales Rep is a job title;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many Australian customers who have credit line under 220000? Australian is a nationality of country = 'Australia'; credit line refers to creditLimit; creditLimit < 220000;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out 3 customer numbers who have highest amount payment amount of payment refers to amount;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Determine the email and Code of employee who are working at United State, state CA United States of America refers to country = 'USA'; code of employee refers to employeeNumber;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out full name of employees who are working in Boston? full name = contactFirstName, contactLastName; Boston is a city;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: State top 3 emails of UK Sales Rep who have the highest credit limit. UK is a country; Sales Rep is a job title;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many customers who are in Norway and have credit line under 220000? Norway is a country; credit line refers to creditLimit; creditLimit<220000;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out full name and email of employees who are working in Paris? full name = firstName+LastName; Paris is a city;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List the product code of the top five motorcycles, by descending order, the number of quantity in stock. motorcycle is a product line;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Among the German customers, how many of the them has credit limit of zero? German is a nationality of country = 'Germany'; CREDITLIMIT = 0"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: From 2003 to 2004, how many customers have paid more than three times? paymentdate BETWEEN '2003-01-01' AND '2004-12-31'; customers who have paid more than three times refers to (COUNT(customernumber)>3);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the average actual profit by 1937 Lincoln Berline? average actual profit = AVG(SUBTRACT(priceEach, buyPrice)); 1937 Lincoln Berline is a product name;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers? motorcycle is a product line; American is a nationality of country = 'USA';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers. paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: For the planes which has the hightest total price, how much it exceeds the average? plane is a product line; total price = MULTIPLY(quantityOrdered, priceEach); how much the total price exceeds the average = SUBTRACT(MAX(MULTIPLY(quantityOrdered, priceEach))), AVG(priceEach));"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the total value of shipped vintage car orders from 2003-2004? total value = SUM(MULTIPLY(quantityOrdered, priceEach)); shipped orders refers to status = 'Shipped'; vintage car is a product line; year(orderDate) between 2003 and 2004;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Who is the sales agent of the customer who has made the highest payment? Include the full names of employee and his/her supervisor. payment refers to amount; full name = firstName+lastName; supervisor refers to reportsTO; 'reportsTO' is the leader of the 'employeeNumber';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount. Boston is a city; amount of order = MULTIPLY(quantityOrdered, priceEach);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the total actual profit gained from orders made by American customers from 2003-01-06 to 2005-05-09? total actual profit = SUM(SUBTRACT(priceEach, buyPrice)); American is a nationality of country = 'USA'; orderDate BETWEEN '2003-01-06' AND '2005-05-09';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number. orderDate between '2005-01-01' and '2005-12-31'; full address = addressLine1+addressLine2;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany? last name of contact person starts with M refers to lastName LIKE 'M%'; Germany is a country; not from Germany refers to country<>'Germany';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Calculate the average amount of payments made by customers during the first half of 2004. average amount of payments = DIVIDE(SUM(amount), COUNT(customerNumber); first half of 2014 refers to paymentDate > = '2004-01-01' AND paymentDate < '2004-07-01;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186? shipped orders refers to status = 'shipped'; year(shippedDate) = 2005; percentage = DIVIDE(SUM(customerNumber = 186)), COUNT(orderNumber)) as percentage;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many customers with a canceled shipment have a credit limit greater than 115,000? cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: To whom does the employee have to inform that is the sales representative of the French customer? inform refers to reportsTo; 'reportsTO' is the leader of the 'employeeNumber'; France is a country; country = 'France';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the full address of the customer who commented that DHL be used for the order that was shipped on April 4, 2005? full address = addressLine1+addressLine2; shippedDate = '2005-04-04';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works? full address = addressLine1 + addressLine2; NYC is a shortname of New York City."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the full address of the office where 4 people work and one of them is Sales Representation? full address = addressLine1+addressLine2; Sales Manager is a job title;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What profit can the seller Carousel DieCast Legends make from the sale of the product described as ""The perfect holiday or anniversary gift for executives""? seller and product vendor are synonyms; Carousel DieCast Legends is a product vendor; profit = SUM(SUBTRACT(msrp, buyPrice));"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment. average amount payment = AVG(amount);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price. 18th Century Vintage Horse Carriage is a product name; average price = AVG(priceEach);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many kinds of products did order No. 10252 contain? Products refer to productCode;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Who is the sales representative that made the order which was sent to 25 Maiden Lane, Floor No. 4? Sales representative is an employee;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Where's Foon Yue Tseng's office located at? Give the detailed address. Detailed address comprises addressLine1 and addressLine2;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value? 2005-04-08 and two days later refer to orderDate = '2005-04-08' and orderDate = '2005-04-10'; order with a higher value refers to MAX(Total price) = MULTIPLY(quantityOrdered, priceEach);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many products with the highest expected profits were sold in total? Products refer to productCode; Expected profits = SUBTRACT(MSRP, buyPrice);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How much did Petit Auto pay on 2004-08-09? Petit Auto is name of customer; paymentDate = '2004-08-09';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What was the contact name for the check ""NR157385""? Contact name refers to customerName;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which customer made the order No. 10160? Give the contact name."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Where was the order No. 10383 shipped to? Show me the address. Address comprises addressLine1 and addressLine2;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: For the productline where the product No.S18_2949 was produced, what's the text description for that product line?"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to? E-mail address belongs to employee; customerName = 'Dragon Souveniers, Ltd.';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many French customers does Gerard Hernandez take care of? Gerakd Hermandez is an employee; French customer refers to customer from France where country = 'France'"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What was the latest order that customer No.114 made? Give the name of the product. The latest refers to the most recent orderDate;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: For the product No. S18_3482 in the Order No.10108, how much discount did the customer have? DIVIDE(SUBTRACT(MSRP, priceEach)), MSRP); product No. S18_3482 refers to productCode = 'S18_3482'"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: To whom does Steve Patterson report? Please give his or her full name. reportsTO' is the leader of the 'employeeNumber';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How do I contact the President of the company? President refers to the jobTitle;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name. Sales representative refers to jobTitle = 'Sales Rep'; Muscle Machine Inc is name of customer;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive? Muscle Machine Inc is name of customer; superior refers to 'reportsTO', who is the leader of the 'employeeNumber'"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list all the customers that have Steve Patterson as their sales representitive. Steve Patterson is an employee;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many customers have an employee who reports to William Patterson as their sales representitive? reportsTO' is the leader of the 'employeeNumber';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list the phone numbers of the top 3 customers that have the highest credit limit and have Leslie Jennings as their sales representitive."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many sales representitives are based in the offices in the USA? Sales representative refers to jobTitle = 'Sales Rep'; country = 'USA';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Where can I find the office of the President of the company? Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What's the postal code of the office the VP Sales is at? VP Sales refers to jobTitle"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the total price of the order made by Cruz & Sons Co. on 2003/3/3? SUM(MULTIPLY(quantityOrdered, priceEach)) where orderDate = '2003-03-03'; customerName = 'Cruz & Sons Co.'"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which product did Cruz & Sons Co. order on 2003/3/3? Cruz & Sons Co. is name of customer; 2003/3/3 refers to orderDate;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which product did Cruz & Sons Co. ask for the biggest amount in a single order? Cruz & Sons Co. is name of customer; the biggest amount refers to MAX(quantityOrdered)."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped? Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the amount of customers of 1957 Chevy Pickup by customers in a month?"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Name the product from the 'Classic Cars' production line that has the greatest expected profit. The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List all the name of customers who have orders that are still processing. Still processing refers to status = 'In Process';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Among all orders shipped, calculate the percentage of orders shipped at least 3 days before the required date. Orders shipped refer to status = 'Shipped'; at least 3 days before the required date refers to SUBTRACT(shippedDate, requiredDate)>3; DIVIDE(COUNT(orderNumber where SUBTRACT(shippedDate, requiredDate)>3), (COUNT(orderNumber) as percentage;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Find the customer who made the highest payment in 2005. The highest payment refers to max(amount); 2005 refers to year(paymentDate);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which is the most ordered quantity product? What is its expected profit margin per piece? The most ordered quantity product refers to productName where Max(quantityOrdered); SUBTRACT(MSRP, buyPrice);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: For the order has the most product ordered, name the customer who placed the order. The largest order in terms of total price refers to MAX(SUM(MULTIPLY(quantityOrdered, priceEach))."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List all customer names with orders that are disputed. Orders that are disputed refer to status = 'Disputed'; the sales representative means employees; names refers to firstName, lastName."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the percentage of employees are in Paris office? DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to? Sales Manager refers to jobTitle; Europe, Middle East, and Africa region refers to territory = 'EMEA';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List the name of employees in Japan office and who are they reporting to. Japan is the name of the country; 'reportsTO' is the leader of the 'employeeNumber';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which customer ordered 1939 'Chevrolet Deluxe Coupe' at the highest price? 1939 'Chevrolet Deluxe Coupe' refers to productName; the highest price refers to MAX(priceEach)"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the percentage of the payment amount in 2004 was made by Atelier graphique? DIVIDE(SUM(amount) where customerName = 'Atelier graphique'), (SUM(amount)) as percentage where year(paymentDate) = 2004;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Calculate the actual profit for order number 10100. SUM(MULTIPLY(quantityOrdered (SUBTRACT (priceEach, buyPrice));"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How much did customer 103 pay in total? Pay in total refers to SUM(amount);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: What is the total price of the order 10100? SUM(MULTIPLY(quantityOrdered, priceEach)"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list the top three product names with the highest unit price. The highest unit price refers to MAX(priceEach)"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Among the customers of empolyee 1370, who has the highest credit limit?Please list the full name of the contact person. Employee 1370 refers to employeeNumber = '1370';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many 2003 Harley-Davidson Eagle Drag Bikes were ordered? 2003 Harley-Davidson Eagle Drag Bikes refers to productName; how many ordered refers to COUNT(quantityOrdered);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: When was the product with the highest unit price shipped? The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many motorcycles have been ordered in 2004? Motorcycles refer to productLine = 'motorcycles'; ordered in 2004 refers to year(orderDate) = 2004;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Please list the order number of the customer whose credit card has a limit of 45300. Credit card does not have a limit refers to creditLimit = 45300;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: For Which order was the most profitable, please list the customer name of the order and the profit of the order. Most profitable order can be computed as MAX(MULTIPLY(quantityOrdered, SUBTRACT(priceEach, buyPrice))."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many transactions payment made by customer that is lower than 10000. Group the result by year. Transactions payment lower than 10000 refer to COUNT(amount) < 1000; by year refers to YEAR(paymentDate)"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out 3 best seller products during year 2003 with their total quantity sold during 2003. Best selling products refer to products with MAX(quantityOrdered); 2003 refers to year(orderDate) = 2003;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List out sale rep that has sold 1969 Harley Davidson Ultimate Chopper. List out their names and quantity sold throughout the year. 1969 Harley Davidson Ultimate Chopper refers to the name of the product; sale rep refers to employee; 2003 refers to year(orderDate) = 2003; quantity sold refers to quantityOrdered; their names refer to the name of customers;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Who are the sales representatives in New York City? List their full names. New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Identify the customer and list down the country with the check number GG31455."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many 2001 Ferrari Enzo were ordered? 2001 Ferrari Enzo refers to productName;"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Which 5 products has the lowest amount of orders? List the product names. The lowest amount of orders refers to MIN(quantityOrdered);"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: List down the customer names with a disputed order status."
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: How many countries from the USA have an In Process order status? country = 'USA'"
car_retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE offices (
officeCode text,
city text,
phone text,
addressLine1 text,
addressLine2 text,
state text,
country text,
postalCode text,
territory text,
PRIMARY KEY (officeCode),
);
CREATE TABLE employees (
employeeNumber integer,
lastName text,
firstName text,
extension text,
email text,
officeCode text,
reportsTo integer,
jobTitle text,
PRIMARY KEY (employeeNumber),
FOREIGN KEY (officeCode) REFERENCES offices(officeCode),
FOREIGN KEY (reportsTo) REFERENCES employees(employeeNumber),
);
CREATE TABLE customers (
customerNumber integer,
customerName text,
contactLastName text,
contactFirstName text,
phone text,
addressLine1 text,
addressLine2 text,
city text,
state text,
postalCode text,
country text,
salesRepEmployeeNumber integer,
creditLimit real,
PRIMARY KEY (customerNumber),
FOREIGN KEY (salesRepEmployeeNumber) REFERENCES employees(employeeNumber),
);
CREATE TABLE orders (
orderNumber integer,
orderDate date,
requiredDate date,
shippedDate date,
status text,
comments text,
customerNumber integer,
PRIMARY KEY (orderNumber),
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE payments (
customerNumber integer,
checkNumber text,
paymentDate date,
amount real,
FOREIGN KEY (customerNumber) REFERENCES customers(customerNumber),
);
CREATE TABLE productlines (
productLine text,
textDescription text,
htmlDescription text,
image blob,
PRIMARY KEY (productLine),
);
CREATE TABLE products (
productCode text,
productName text,
productLine text,
productScale text,
productVendor text,
productDescription text,
quantityInStock integer,
buyPrice real,
MSRP real,
PRIMARY KEY (productCode),
FOREIGN KEY (productLine) REFERENCES productlines(productLine),
);
CREATE TABLE orderdetails (
orderNumber integer,
productCode text,
quantityOrdered integer,
priceEach real,
orderLineNumber integer,
);
---------------------
QUESTION: Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products. SUM(MULTIPLY(quantityOrdered, priceEach)) where productLine = 'Classic Cars'; status = 'Shipped'; customername = 'Land of Toys Inc';"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants have not obtained a minimum of 3 in their reviews? have not obtained a minimum of 3 in review refers to review < 3"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What types of food are served at the 4 top-reviewed restaurants? top-reviewed refers to review = 4; type of food refers to food_type"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants in the city of Richmond serve Mediterranean food? Mediterranean food refers to food_type = Â  'mediterranean'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all the cities in Sonoma County."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What counties are not in the Bay Area Region? not in the Bay Area region refers to region ! = 'bay area'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all cities in the Northern California Region."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List by its ID number all restaurants on 11th Street in Oakland. 11th Street refers to street_name = '11th street'; Oakland refers to city = 'oakland'; ID number of restaurant refers to id_restaurant"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants can we find at number 871 on its street? number 871 on its street refers to street_num = 871"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: At what numbers on 9th Avenue of San Francisco there are restaurants? 9th Avenue refers to street_name = '9th avenue'; San Francisco refers to City = 'san francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What type of food is there in the restaurants on Adeline Street in Berkeley city? Adeline Street refers to street_name = 'adeline st'; type of food refers to food_type"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which regions are there no African food restaurants? no African food restaurants refers to food_type <> 'african'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which counties are there A&W Root Beer Restaurants? A&W Root Beer Restaurant refers to label = 'a & w root beer'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Indicate street and number of the Adelitas Taqueria Restaurants. street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What type of food is served at the restaurant located at 3140, Alpine Road at San Mateo County? 3140 Alpine Road at San Mateo County refers to street_num = 3140 AND street_name = 'alpine rd' AND County = 'san mateo county'; type of food refers to food_type"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which streets of the city of San Francisco are there restaurants that serve seafood? street refers to street_name; seafood refers to food_type = 'seafood'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all counties where there is no Bakers Square Restaurant & Pie Shop. no Bakers Square Restaurant & Pie Shop refers to label <> 'bakers square restaurant & pie shop'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In how many counties is there a street called Appian Way? a street called Appian Way refers to street_name = 'appian way'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the rating of each restaurant reviews on Atlantic Ave? Atlantic Ave refers to street_name = 'atlantic ave'; rating refers to review"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Identify all restaurants in Contra Costa County by id."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Identify all the restaurants in Yolo County by their label."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What restaurant on Drive Street in San Rafael doesn't serve American food? Drive Street refers to street_name = 'drive'; San Rafael refers to city = 'san rafael'; American food refers to food_typeÂ <> 'american'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: On which streets in the city of San Francisco are there restaurants with a review of 1.7? street refers to street_name; review of 1.7 refers to review = 1.7"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which restaurant on the street Alameda de las Pulgas in the city of Menlo Park is the worst rated? restaurant refers to label; street Alameda de las Pulgas refers to street_name = 'avenida de las pulgas'; the worst rated refers to min(review)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: On what street in Tuolumne County is Good Heavens restaurant located? street refers to street_name; Good Heavens restaurant refers to label = 'good heavens'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Indicate the street numbers where Aux Delices Vietnamese Restaurant are located. street numbers refers to street_num; Aux Delices Vietnamese Restaurant refers to label = 'aux delices vietnamese restaurant'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Identify all the restaurants in Marin County by their id."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which regions are there no pizza restaurants? no pizza restaurants refers to food_type = 'pizza'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Calculate the average rating of reviews for restaurants in Santa Cruz County. average rating = divide(sum(review where county = 'santa cruz county'), count(id_restaurant where county = 'santa cruz county'))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What percentage of restaurants in Monterey County have Mexican food? Mexican food refers to food_type = 'mexican'; percentage = divide(count(id_restaurant where food_type = 'mexican'), count(id_restaurant)) where county = 'monterey county' * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What percentage of streets named 11th Street are in Alameda County? street named 11th Street refers to street_name = '11th st'; percentage = divide(count(street_name = '11th st' and County = 'alameda county'), count(street_name where County = 'alameda county')) * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please list all of the restaurants that serve European food. restaurant refers to label; European food refers to food_type = 'european'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What cities are located in Northern California? Northern California refers to region = 'northern california'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What does the one and only 24-hour diner's name? 24-hour diner refers to food_type = '24 hour diner'; diner name refers to label"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please list any five cities that have an unidentified county and region. unidentified county and region refers to county = 'unknown' AND region = 'unknown'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the county and region of Davis City?"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please list all of the street names in Clayton City."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What are the most popular restaurants in San Francisco among diners? the most popular refers to max(review); restaurant refers to label; San Francisco refers to city = 'San Francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many American food restaurants are unpopular in Carmel? American Food Restaurant refers to food_type = 'ameraican'; unpopular refers to min(review); Carmel refers to city = 'Carmel'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the percentage of restaurants that serve American food in Dublin city? American food refers to food_type = 'american food'; percentage = divide(count(id_restaurant), count(id_restaurant where food_type = 'american food')) where city = 'dublin' * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the full address of Albert's CafÃ©? full address = street_num, street_name, city; Albert's CafÃ© refers to label = 'Albert's CafÃ©'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What are the restaurants that are located at ""19th St. Oakland""? restaurant refers to label; ""19th St. Oakland"" refers to street_name = '19th St' AND city = 'Oakland'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What kind of restaurants can be found at ""106 E 25th Ave""? kind of restaurant refers to food_type; ""106 E 25th Ave"" refers to street_name = 'e 25th ave'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please name any three restaurants that have an unidentified region. restaurant name refers to label; unidentified region refers to region = 'unknown'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the name of the Chinese restaurant that can be found at 104 San Tomas Aquino Road, Campbell? restaurant name refers to label; Chinese restaurant refers to food_type = 'chinese'; 104 San Tomas Aquino Road Campbell refers to street_num = 104 AND street_name = 'san tomas aquino road' AND city = 'campbell'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many Thai restaurants can be found in San Pablo Ave, Albany? Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the county and region of Plearn-Thai Cuisine restaurant? Plearn-Thai Cuisine restaurant refers to label = 'plearn-thai cuisine'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the name of the restaurant that is located in El Dorado County, Lake Tahoe region? restaurant name refers to label"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which county and region does the street E. El Camino Real belong to? street E. El Camino Real refers to street_name = 'E. El Camino Real'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley? restaurant name refers to label; the least popular refers to min(review); Indian restaurant refers to food_type = 'Indian restaurant'; Shattuck Avenue in Berkeley refers to street_name = 'shattuck ave' and city = 'berkeley'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the percentage of restaurants in the Bay Area region that scored over 4 for the review rating? scored over 4 refers to review > 4; percentage = divide(count(id_restaurant where region = 'bay area' and review > 4), count(id_restaurant where region = 'Bay Area')) * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List every city in San Mateo County."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants have more than 4 star reviews? more than 4 star review refers to review > 4"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which street has the most restaurants? street refers to street_name; the most restaurants refers to max(count(street_name))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which chicken restaurant has the highest review? chicken restaurant refers to food_type = 'chicken'; the highest review refers to max(review)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which county is El Cerrito from? El Cerrito refers to city = 'el cerrito'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants are on Irving Street? Irving Street refers to street_name = 'irving'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Provide a list of restaurants from Marin county. restaurant refers to label"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the address of the Peking Duck restaurant? address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all the streets with more than 10 restaurants in Alameda county. street refers to street_name; more than 10 restaurants refers to count(id_restaurant) > 10"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What are the regions with Greek restaurants? Greek restaurant refers to food_type = 'greek'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all of the restaurant addresses from an unknown region. restaurant address refers to street_num, street_name; unknown region refers to region = 'unknown'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the review of the restaurant at 8440 Murray Ave? 8440 Murray Ave refers to street_num = 8440 and street_name = 'murray ave'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What type of restaurant is most common in Monterey county? type refers to food_type; most common refers to max(count(food_type))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which street in San Francisco has the most burger restaurants? street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the region of 1149 El Camino Real? 1149 El Camino Real refers to street_num = 1149 and street_name = 'el camino real'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the county of the Sankee restaurant? Sankee restaurant refers to label = 'sankee'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many streets with restaurants are there in the Northern California region?"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all of the restaurants on Park St. restaurant refers to label; Park St refers to street_name = 'park st'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What percentage of restaurants are from the Bay Area? Bay Area refers to region = 'bay area'; percentage = divide(count(id_restaurant where region = 'bay area'), count(id_restaurant)) * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all the average reviews of Chinese restaurants for each county from highest to lowest. Chinese restaurant refers to food_type = 'chinese'; average review refers to divide(sum(review), count(review))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List street names in San Francisco city."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List restaurant ids located in Danville city."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many cities are located in the Bay Area? the Bay Area refers to region = 'bay area'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many labels of the restaurant have an unknown country? unknown county refers to county = 'unknown'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please indicate the street names of restaurants with food type is American."
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Please indicate which labels have the city located in Santa Cruz. Santa Cruz refers to county = 'Santa Cruz county'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Give the review of the restaurant at 430, Broadway. 430 Broadway refers to street_num = 430 and street_name = 'Broadway'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Indicate the address of the restaurant with the most popular reviews. address refers to street_num, street_name; the most popular review refers to max(review)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which country has the most restaurants with Italian food? Italian food refers to food_type = 'Italian'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Find the percentage of restaurant in Napa Valley. Napa Valley refers to region = 'Napa Valley'; percentage = divide(count(id_restaurant where region = 'Napa Valley'), count(id_restaurant)) * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many of the cities are in a Bay Area? Bay Area refers to region = 'bay area'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List down the cities with unknown country. unknown county refers to county = 'unknown'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the city located in Bay Area of Santa Clara? Bay Area refers to region = 'bay area'; Santa Clara refers to county = 'santa clara county'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List down the restaurant ID of restaurants located in Sunnyvale. Sunnyvale refers to city = 'sunnyvale'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among the restaurants on street number below 1000, how many of them are in Railroad St.? street number below 1000 refers to street_num < 1000; Railroad St. refers to street_name = 'railroad'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the name of the 24 hour diner at San Francisco? name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Give the review of the restaurant located in Ocean St., Santa Cruz. Ocean St. refers to street_name = 'ocean st'; Santa Cruz refers to city = 'santa cruz'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Give the street number of a bar in Oakland with a 2.7 review. street number refers to street_num; bar refers to food_type = 'bar'; Oakland refers to city = 'oakland'; 2.7 review refers to review = 2.7"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto? bakery refers to food_type = 'bakery'; University Avenue refers to street_name = 'university ave.'; Palo Alto refers to city = 'palo alto'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among the listed winery, what is the street number of the winery named ""Tulocay Winery""? winery refers to food_type = 'winery'; street number refers to street_num; ""Tulocay Winery"" refers to label = 'Tulocay winery'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List the review and label of the restaurants in Mission Blvd., Hayward. Mission Blvd. refers to street_name = 'mission blvd'; Hayward refers to city = 'hayward'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label? indian restaurant refers to food_type = 'indian'; Castro St. refers to street_name = 'castro st'; Mountainview refers to city = 'mountainview'; have the word ""Indian"" in label refers to label = 'indian'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In restaurants with a review of 2, how many restaurants have a street number below 500? review of 2 refers to review = 2; street number below 500 refers to street_num < 500"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among all asian restaurants in N. Milpitas Blvd., Milpitas, how many of them have restaurant ID greater than 385? asian restaurant refers to food_type = 'asian'; N. Milpitas Blvd. refers to street_name = 'n milpitas blvd'; Milpitas refers to city = 'milpitas'; restaurant ID greater than 385 refers to id_restaurant > 385"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the restaurant's name and ID located at Ocean Avenue, San Francisco? restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the full address of the restaurant named ""Sanuki Restaurant""? full address refers to city, street_num, street_name; restaurant named ""Sanuki Restaurant"" refers to label = 'sanuki restaurant'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List the food type of the restaurant located in 22779 6th St., Hayward City. 22779 refers to street_num = 22779; 6th St. refers to street_name = '6th St'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many American restaurants are located in Front, San Francisco? American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000. American restaurant refers to food_type = 'american'; street number greater than 2000 refers to street_num > 2000; review greater than the 70% of average review refers to review > multiply(avg(review), 0.7)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there? street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the name of the most popular restaurant serving Asian foods in San Francisco? the most popular refers to max(review); Asian food refers to food_type = 'asian'; San Francisco refers to city = 'san francisco'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many cities are there in Monterey? Monterey refers to region = 'monterey'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many deli in Belmont have a review rating of 2 or more? deli ris a food type; Belmont refers to city = 'belmont'; review rating of 2 or more refers to review > 2"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which county in northern California has the highest number of cities? northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants can you find in Concord? Concord refers to city = 'concord'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which region can you find the top 4 most popular restaurants? the top 4 most popular restaurant refers to top 4 max(review)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many Chinese restaurants are there on 1st st, Livermore? Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many Indian restaurants are there in the Los Angeles area? Indian restaurant refers to food_type = 'indian'; the Los Angeles area refers to region = 'los angeles area'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In the Bay Area, what is the most common type of food served by restaurants? the Bay Area refers to region = 'bay area'; the most common type of food refers to max(count(food_type))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many restaurants in Broadway, Oakland received a review of no more than 3? Broadway refers to street_name = 'broadway';Â  Oakland refers to city = 'oakland'; a review of no more than 3 refers to review < 3"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which region can you find the highest number of Baskin Robbins restaurants? the highest number refers to max(count(city)); Baskin Robbins restaurant refers to label = 'baskin robbins'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List all the streets where pizza-serving restaurants are found in San Jose. street refers to street_name; pizza-serving restaurant refers to food_type = 'pizza'; San Jose refers to city = 'san jose'"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: How many types of restaurants are there in the Yosemite and Mono Lake area?"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: What is the full address of the most popular restaurant among the diners? full address refers to street_num, street_name, city; the most popular refers to max(review)"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: In which counties can you find the restaurant with the highest number of branches? restaurant refers to label; the highest number of branches refers to max(count(city))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: Which region has the highest number of restaurants? the highest number refers to max(count(id_restaurant))"
restaurant,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE geographic (
city text,
county text,
region text,
PRIMARY KEY (city),
);
CREATE TABLE generalinfo (
id_restaurant integer,
label text,
food_type text,
city text,
review real,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
CREATE TABLE location (
id_restaurant integer,
street_num integer,
street_name text,
city text,
PRIMARY KEY (id_restaurant),
FOREIGN KEY (id_restaurant) REFERENCES generalinfo(id_restaurant),
FOREIGN KEY (city) REFERENCES geographic(city),
);
---------------------
QUESTION: List the full address of all the American restaurants with a review of 4 or more? full address refers to street_num, street_name, city; American restaurant refers to food_type = 'american'; a review of 4 or more refers to review > 4"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players were born after the year 1985? born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were there in May, 2008? in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: For how many times has player no.41 won the ""man of the match"" award? player no.41 won the ""man of the match"" refers to Man_of_the_Match = 41"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Please list the IDs of all the matches in the year 2008. ID of matches refers to Match_Id; in the year 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players are from Australia? Australia refers to Country_Name = 'Australia'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which country is the oldest player from? country refers to Country_Name; the oldest refers to min(DOB)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the bowling skill of SC Ganguly? SC Ganguly refers to Player_Name = 'SC Ganguly'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players who use the right hand as their batting hand, how many of them were born after 1985? right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; born after 1985 refers to SUBSTR(DOB, 1, 4) > 1985"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Please list the names of the players who use the right hand as their batting hand and are from Australia. name of player refers to Player_Name; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; Australia refers to Country_Name = 'Australia'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Please list the bowling skills of all the players from Australia. Australia refers to Country_Name = 'Australia'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players whose bowling skill is ""Legbreak"", when was the oldest one of them born? the oldest refers to min(DOB); date of birth refers to DOB"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the bowling skill used by most players? bowling skill used by most players refers to max(count(Bowling_Skill))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the player who won the ""man of the match"" award in the match on 2008/4/18? name of player refers to Player_Name; on 2008/4/18 refers to Match_Date = '2008-04-18'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: For how many times has SC Ganguly played as team captain in a match? SC Ganguly refers to Player_Name = 'SC Ganguly'; team captain refers to Role_Desc = 'Captain'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the role of SC Ganguly in the match on 2008/4/18? role refers to of Role_Id; SC Ganguly refers to Player_Name = 'SC Ganguly'; on 2008/4/18 refers to Match_Date = '2008-04-18'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among all the matches SC Ganguly has played in, what is the highest winning margin? SC Ganguly refers to Player_Name = 'SC Ganguly'; the highest winning margin refers to max(Win_Margin)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the average winning margin of all the matches SC Ganguly has played in? SC Ganguly refers to Player_Name = 'SC Ganguly'; the average winning margin = divide(sum(Win_Margin), count(Match_Id)) where Player_Name = 'SC Ganguly'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand? born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985; right hand as batting hand refers to Batting_Hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_Hand = 'Right-hand bat'), count(Player_Id)) * 100% where SUBSTR(DOB, 1, 4) > 1985"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the name of the youngest player. name of player refers to Player_Name; the youngest refers to max(DOB)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times has Sunrisers Hyderabad been the toss winner of a game? Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; time of toss winner refers to count(Toss_Winner)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the name of the striker in the match no. 419169, over no.3, ball no.2, inning no.2. name of the striker refers to Player_Name; match no. 419169 refers to Match_Id = 419169; over no.3 refers to Over_Id = 3; ball no.2 refers to Ball_Id = 2; inning no.2 refers to Innings_No = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the name of venue for the game with a win margin of 138 points. name of venue refers to Venue_Name; a win margin of 138 points refers to Win_Margin = 138"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: For the game on 2008/5/12, who was the man of the match? on 2008/5/12 refers to Match_Date = '2008-05-12'; name refers to Player_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: State the name of captain keeper of the match no.419117. name refers to Player_Name; captain keeper refers to Role_Desc = 'CaptainKeeper'; match no.419117 refers to Match_Id = '419117'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who was the man of the series in 2013? Give the full name. full name refers to Player_Name; in 2013 refers to Season_Year = 2013"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the date of birth of the 2014 Orange Cap winner. date of birth refers to DOB; 2014 refers to Season_Year = 2014; Orange Cap winner refers to Orange_Cap IS NOT NULL"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the nationality of the 7th season Purple Cap winner? nationality refers to Country_Name; the 7th season refers to Season_Id = 7; Purple Cap winner refers to Purple_Cap IS NOT NULL"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which country does Ranchi city belong to? country refers to Country_Name; Ranchi city refers to City_Name = 'Ranchi'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many Indian cities are there in the database? Indian refers to Country_Name = 'India'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: State the name of the city with the most venues. name of the city refers to City_Name; the most venues refers to max(count(Venue_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the batting hand of MK Pandey? MK Pandey refers to Player_Name = 'MK Pandey'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In the database, how many times is the number of Indian cities to the South African cities? Indian refers to Country_Name = 'India'; South African refers to Country_Name = 'South Africa'; how many times = divide(count(City_Id where Country_Name = 'India'), count(City_Id where Country_Name = 'South Africa'))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times does M Chinnaswamy Stadium host games than Maharashtra Cricket Association Stadium? M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'; Maharashtra Cricket Association Stadium refers to Venue_Name = 'Maharashtra Cricket Association Stadium'; how many times = divide(count(Match_Id where Venue_Name = 'M Chinnaswamy Stadium'), count(Match_Id where Venue_Name = 'Maharashtra Cricket Association Stadium'))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the oldest player? name of the player refers to Player_Name; the oldest refers to min(DOB)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were played on May 2008? in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players were born in the 90s? born in the 90s refers to DOB > = '1990-01-01' AND DOB < = '1999-12-31'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did Team 10 play in 2012? Team 10 refers to Team_1 = 10 OR Team_2 = 10; in 2012 refers to SUBSTR(Match_Date, 1, 4) = '2012'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the id of the player who won the Orange Cap for 2 consecutive seasons. id of the player who won the Orange Cap refers to Orange_Cap; for 2 consecutive seasons refers to count(Season_Year) > 1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were played in Season 7? Season 7 refers to Season_Id = 7"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many umpires are from South Africa? South Africa refers to Country_Name = 'South Africa'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the player with the highest number of outstanding player awards in a particular match? name of the player refers to Player_Name; the highest number of outstanding player awards refers to max(count(Man_of_the_Match))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In which country do the majority of the players are from? country refers to Country_Name; the majority of the playersÂ  refers to max(count(Country_Name))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many Orange Cap awards were won by CH Gayle? CH Gayle refers to Player_Name = 'CH Gayle'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which season played the highest number of matches at M Chinnaswamy Stadium? season refers to Season_Id; the highest number of matches refers to max(count(Season_Id)); M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the team that won the most number of matches in season 1? name of the team refers to Team_Name; the most number of matches refers to max(count(Match_Winner)); season 1 refers to season_Id = 1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which venue did Kolkata Knight Riders play most of their matches as a Team 1? venue refers to Venue_Name; Kolkata Knight Riders refers to Team_Name = 'Kolkata Knight Riders'; most of their matches refers to max(count(Venue_Id)); Team 1 refers to Team_Id = Team_1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which team has the highest number of losses of all time? name of the team refers to Team_Name; the highest number of losses refers to max(add(count(Team_1 where Team_Id = Team_1 and Team_1 <> Match_Winner), count(Team_2 where Team_Id = Team_2 and Team_2 <> Match_Winner)))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the player who won the first ever ""man of the match"" award? name of the player refers to Player_Name; the first ever refers to min(match_date); ""man of the match"" award refers to Player_Id in 'Man_of_the_Match'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: When did Chennai Super Kings play its first match? match date refers to Match_Date; Chennai Super Kings refers to Team_Name = 'Chennai Super Kings'; first match refers to min(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players with left-hand batting style are from India? left-hand batting style refers to Batting_hand = 'Left-hand bat'; India refers to Country_Name = 'India'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the player that has the highest number of roles as a captain for Deccan Chargers? name of the player refers to Player_Name; the highest number of roles refers to max(count(Role_Id)); as a captain refers to Role_Desc = 'Captain'; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the percentage of all right-handed batting players among all the other players? right-handed batting refers to Batting_hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_hand = 'Right-hand bat'), count(Player_Id)) * 100%"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Name the player who is born on July 7, 1981. name of the player refers to Player_Name; born on July 7 1981 refers to DOB = '1981-07-07'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were played by the player with player ID 2? player ID 2 refers to Player_Id = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the first team's name in the match with the highest winning margin. team's name refers to Team_Name; first team refers to Team_Id = Team_1; the highest winning margin refers to max(Win_Margin)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the country where St. George's Park is located. country refers to Country_Name; St. George's Park refers to Venue_Name = 'St George''s Park'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the player's name of Mumbai Indians in the match ID 335990. Mumbai Indians refers to Team_Name = 'Mumbai Indians'; match ID 335990 refers to Match_Id = 335990"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the winning team's name in the match with the point of winning margin of 7 on May 7, 2009. the winning team refers to Team_Id = Match_Winner; the point of winning margin of 7 refers to Win_Margin = 7; on May 7 2009 refers to Match_Date = '2009-05-07'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many of the matches are Superover? Superover refers to Outcome_Type = 'Superover'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the cities located in U.A.E. city refers to City_Name; U.A.E refers to Country_Name = 'U.A.E'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the total number of won matches of the team named ""Pune Warriors""? the team named ""Pune Warriors"" refers to Team_Name = 'Pune Warriors'; the total number of won matches = count(Team_Name where Team_Id = Match_Winner)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches held in 2015, who is the winning team in the match ID 829768? in 2015 refers to Match_Date LIKE '2015%'; the winning team refers to Team_Id = Match_Winner; match ID 829768 refers to Match_Id = 829768"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the role of K Goel in the match ID 335992? role refers to Role_Desc; K Goel refers to Player_Name = 'K Goel'; match ID 335992 refers to Match_Id = 335992"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many cities are located in South Africa? South Africa refers to Country_Name = 'South Africa'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were held at the venue named ""Newlands""? the venue named ""Newlands"" refers to Venue_Name = 'Newlands'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the point of the winning margin in a match between Mumbai Indians and Royal Challengers Bangalore on May 28, 2008. point of the winning margin refers to Win_Margin; Mumbai Indians refers to Team_Name = 'Mumbai Indians'; Royal Challengers Bangalore refers to Team_Name = 'Royal Challengers Bangalore'; on May 28 2008 refers to Match_Date = '2008-05-28'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the names of the first andthe second teams that played a match with the point of the winning margin lower than the 30% of the average winning margin of the matches held in 2011. name of the team refers to Team_Name; in 2011 refers to Match_Date LIKE '2011%'; the point of winning margin lower than 30% of the average winning margin refers to Win_Margin < multiply(avg(Win_Margin), 0.3) where Match_Date LIKE '2011%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players born in 1977, what is the percentage of the players with a role as a captain? born in 1977 refers to DOB LIKE '1977%'; a role as a captain refers to Role_Desc = 'Captain'; percentage = divide(count(Role_Id where Role_Desc = 'Captain'), count(Role_Id)) * 100% where DOB LIKE '1977%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many overs were there in the first innings of match ID ""335996""? the first innings refers to Innings_No = 1; match ID ""335996"" refers to Match_Id = 335996"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the over IDs, ball IDs, and innings numbers of the match ID ""336004"" while the batsman got the maximum scores. over ID refers to Over_Id; ball ID refers to Ball_Id; innings number refers to Innings_No; match ID ""336004"" refers to Match_Id = 336004; batsman got the maximum scores refers to max(Runs_Scored)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Describe any five matches IDs that reached over ID 20. reached over ID 20 refers to Over_Id = 20"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players got out in the first inning of match ID ""548335""? got out refers to Player_Out; the first inning refers to Innings_No = 1; match ID ""548335"" refers to Match_Id = 548335"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the players' names who were born in 1971. players' name refers to Player_name; born in 1971 refers to DOB LIKE '1971%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the match IDs which were held on 18th April 2015. on 18th April 2015 refers to DATE(Match_Date) = '2015-04-18'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the match IDs which had players out by hit wickets. had players out by hit wickets refers to Out_Name = 'hit wicket'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players got out by being stumped in the second innings of all matches? got out by being stumped refers to Out_Name = 'stumped'; the second innings refers to Innings_No = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times did Yuvraj Singh receive the Man of the Match award? Yuvraj Singh refers to Player_Name = 'Yuvraj Singh'; receive the Man of the Match award refers to Player_Id = Man_of_the_Match"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players who were born in 1977, provide names and birthdates of the players from England. born in 1977 refers to DOB LIKE '1977%'; name refers to Player_Name; birthdate refers to DOB; England refers to Country_Name = 'England'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who got the Man of the Series Award in 2010? player's name refers to Player_Name; got the Man of the Series Award refers to Man_of_the_Match = Player_Id; in 2010 refers to Season_Year = 2010"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the win rate of the team ""Chennai Super Kings"". team ""Chennai Super Kings"" refers to Team_Name = 'Chennai Super Kings'; win rate = divide(count(Match_Id where Match_Winner = 3), count(Match_Id)) * 100%"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the names and countries of the players from Gujarat Lions who played in the match held on 11th April 2016. player's name refers to Player_Name; country refers to Country_Name; Gujarat Lions refers to Team_Name = 'Gujarat Lions'; on 11th April 2016 refers to Match_Date = '2016-04-11'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the names and birthdates of players who have left-arm fast skills. player's name refers to Player_Name; birthdate refers to DOB; have left-arm fast skills refers to Bowling_skill = 'Left-arm fast'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Where did BR Doctrove come from? the country the umpire comes from refers to Country_Name; BR Doctrove refers to Umpire_Name = 'BR Doctrove'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who was the captain of the winning team in the match held on 1st June 2008? player's name refers to Player_Name; captain refers to Role_Desc = 'Captain'; the winning team refers to Match_Winner = Team_Id; on 1st June 2008 refers to Match_Date = '2008-06-01'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which team did CK Kapugedera belong to? How many matches did he play? team refers to Team_Name; CK Kapugedera refers to Player_Name = 'CK Kapugedera'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches held in Mumbai, how many percent of them were held in Wankhede Stadium? Mumbai refers to City_Name = 'Mumbai'; Wankhede Stadium refers to Venue_Name = 'Wankhede Stadium'; percent = divide(count(Match_Id where Venue_Name = 'Wankhede Stadium'), count(Match_Id)) * 100% where City_Name = 'Mumbai'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players out in match ID 392187, calculate the percentage of players out by bowl. out by bowl refers to Out_Name = 'bowled'; percentage = divide(count(Player_Out where Out_Name = 'bowled'), count(Player_Out)) * 100% where Match_Id = 392187"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016? decide to bowl first refers to Toss_Name = 'field'; from 2010 to 2016 refers to Match_Date BETWEEN '2010-01-01' AND '2016-12-31'; percent = divide(count(Toss_Id where Toss_Name = 'field'), count(Toss_Id)) * 100% where Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down the ID of toss winners who decided to bat after winning the ""toss of the coin"". decided to bat refers to Toss_Decide = 2; ID of toss winners refers to Toss_winner"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down the match ID of matches that the ""man of the match"" award was given to BB McCullum."
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down the DOB of players who received the ""man of the match"" award."
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down the name of teams that won the toss of the coin from matches with ID from 336010 to 336020. name of teams refers to Team_Name; won the toss refers to Toss_Winner; matches with ID from 336010 to 336020Â  refers to Match_Id BETWEEN 336010 AND 336020"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches have Mumbai Indians won? Mumbai Indians refers to Team_Name = 'Mumbai Indians'; won refers to Match_Winner"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down names of teams that have played as second team against Pune Warriors. names of teams refers to Team_Name; second team refers to Team_2; Pune Warriors refers to Team_Name = 'Pune Warriors'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the team that won match ID 336000? name of the team refers to Team_Name; won refers to Match_Winner"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the match IDs that were played at Brabourne Stadium? at Brabourne Stadium refers to Venue_Name = 'Brabourne Stadium'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down the name of venues in season 2. name of venues refers to Venue_Name; season 2 refers to Season_Id = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the city of M Chinnaswamy Stadium? city refers to City_Name; M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down all of the venues in Mumbai. venues refers to Venue_Name; Mumbai refers to City_Name = 'Mumbai'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List down all of the winning teams' IDs that played in St George's Park. winning teams' refers to Match_Winner; played in St George's Park refers to Venue_Name like 'St George%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Is SuperSport Park located at Centurion? SuperSport Park refers to Venue_Name = 'SuperSport Park'; Centurion refers to City_Name = 'Centurion'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the total winning match for Deccan Chargers. winning refers to Match_Winner; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Count the total venues located in Pune City. Pune City refers to City_Name = 'Pune'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219. most number of balls refers to max(Ball_Id); match 501219 refers to Match_Id = 501219;
player id also refers to non_striker or ball_id"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the average runs scored during the first half of all first innings. first half refers to 1 < Over_Id and Over_Id < 25; average = divide(sum(Over_Id) when 1 < Over_Id and Over_Id < 25, sum(Runs_Scored)) as percentage; first innings refers to Innings_No = 1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the average extra runs given in the second innings of every match? second innings refers to Innings_No = 2; average extra runs = divide(sum(Extra_Runs), count(Innings_No)) when Innings_No = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches, what percentage have a winning margin above 100? winning margin above 100 refers to Win_Margin > 100; percentage = divide(count(Match_Id) when Win_Margin > 100, count(Match_Id)) as percentage"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the name of the players born between 1970 and 1990 in descending order of age. name of the players refers to Player_Name; born between 1970 and 1990 refers to DOB between '1970-01-01' and '1990-12-31'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Of the wickets taken in the third overs, how many are without the involvement of fielders? third overs refers to Over_Id = 3; without the involvement of fielders refers to Fielders = ''"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: From which country does the most umpires are from? How many of them are from the mentioned country?
 which country refers to Country_Id; most umpires refers to max(count(Umpire_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players, what percentage are both captain and keeper? captain and keeper refers to Role_Desc = 'CaptainKeeper'; percentage = divide(count(Player_Id) when Role_Desc = 'CaptainKeeper', count(Player_Id)) as percentage"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In the players, how many were out by hit wicket? out by hit wicket refers to Out_Name = 'hit wicket'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: On average, how many players from each country bat with their right hand? bat with their right hand refers to Batting_hand = 'Right-hand bat'; average = divide(count(Player_Id) when Batting_hand = 'Right-hand bat', count(Country_Name))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What percentage of players have Legbreak skill? Legbreak skill refers to Bowling_skill = 'Legbreak' ; percentage = divide(sum(Player_Id) when Bowling_skill = 'Legbreak', count(Player_Id)) as percentage"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In the matches where the winning margin is less than fifty, how many teams won by wicket? winning margin is less than fifty refers to Win_Margin < 50; won by wicket refers to Win_Type = 'wickets'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In how many venues did team 2 win the toss and lose the match? team 2 win the toss refers to Toss_Winner = Team_2 ; lose the match refers to Match_Winner = Team_1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which player became the man of the series in the year 2012? Give the name and country of this player. year 2012 refers to Season_Year = 2012; name of player refers to Player_Name.; country of this player refers to Country_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the name of the venue where the most number of matches are held. name of the venue refers to Venue_Name; most number of matches refers to max(count(Venue_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which city hosted the least number of no-result matches? city refers to City_Name; no-result matches refers to Win_type = 'NoResult'; least number refers to min(count(Win_type = 'NoResult'))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Write the name of the player who was the man of the series more than one time. name of the player refers to Player_Name; man of the series more than one time refers to count(Man_of_the_Series) > 1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the name and country of the players who got more than average catches in ascending order of the number of catches. name and country of the players refers to Player_Name and Country_Name; catches refers to Out_name = 'caught'; average catches refers to divide(count(Player_ID) when Out_name = 'caught', sum(Player_ID))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Of the matches that were won by runs by team 1, what percentage have team 1 won the toss and decided to field? won by runs refers to Win_Type = 'runs'; won the toss and decided to field refers to Toss_Winner and Toss_Name = 'field'; percentage = divide(count(Team_1) when Match_Winner = Team_1 and Toss_Winner = Team_1, count(Team_1)) as percentage"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the difference in the average number of players out by lbw and runout in the matches? out by lbw refers to Out_Id = 4; runout refers to Out_Id = 3; average out by lbw refers toÂ  avg(Player_Out when Out_Id = 4); average out by runout refers toÂ  avg(Player_Out when Out_Id = 3)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Identify by their ID all the overs in which the player with ID 7 was on strike. Identify by their ID all the overs refers to Over_Id; player with ID 7 was on strike refers to Striker = 7"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many first teams chose to bat after winning the toss? first teams refers to Team_1; chose to bat after winning the toss refers to Toss_Winner and Toss_Decide = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many games were played in March 2010? were played in March 2010 refers to Match_Date = '2010-03%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players are older than Gurkeerat Singh player? older than Gurkeerat Singh player refers to DOB ! = 'Gurkeerat Singh' and DOB < '1990-06-29'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times has SR Watson been named 'Man of the Match'?"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Indicate the name of the most versatile players of the Delhi Daredevils. if a player has multiple roles in a match, it means this player is versatile; name refers to Player_Name; most versatile player refers to MAX(COUNT(Role_id)); Delhi Daredevils refers to Team_Name = 'Delhi Daredevils'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the player who has been chosen the most times for 'Man of the Series'? name of the player refers to Player_Name; most times for 'Man of the Series' refers to max(count(Man_of_the_Match))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In what year did SP Narine win the Orange Cap? year refers to Season_Year"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which teams have had a player awarded the Purple Cap and another with the Orange Cap in the same season?"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List all Zimbabwean players. Zimbabwean refers to Country_Name = 'Zimbabwea'; players refers to Player_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players bat with their left hands? bat with their left hands refers to Batting_hand = 'Left-hand bat'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many games were not won by runs? not won by runs refers to Win_Type ! = 'runs'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the name of all New Zealand umpires. New Zealand umpires refers to Country_Name = 'New Zealand'; name of umpires refers to Umpire_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In which country do most players have the 'slow left-arm chinaman' bowling style? 'slow left-arm chinaman' bowling style refers to Bowling_skill = 'Slow left-arm chinaman'; most playersÂ  refers to max(count(Country_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In which venue did Kochi Tuskers Kerala play most of their matches? Kochi Tuskers Kerala refers to Team_Name = 'Kochi Tuskers Kerala'; most of their matches refers to max(Venue_Id)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In how many games in which the batting team was the Delhi Daredevils were no runs scored? batting team was the Delhi Daredevils refers to Team_Name = 'Delhi Daredevils' and Team_1 = Team_Id where Team_Batting = 1 or Team_2 = Team_Id where Team_Batting = 2; no runs scored refers to Runs_Scored = 0"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10? Dr DY Patil Sports Academy venue refers to Venue_Name = 'Dr DY Patil Sports Academy'; win by a margin of less than 10 refers to Win_Margin < 10; percentage = divide(count(Venue_Id) when Win_Margin < 10, sum(Venue_Id)) as percentage"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the average number of extra runs made as noballs? noballs refers to Extra_Name = 'noballs' ; average number = divide(sum(Extra_Runs), count(Extra_Runs))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the player's ID of the top five players, by descending order, in terms of bowling skill. player's ID refers to Player_Id"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players were born before 10/16/1975, and have a bowling skill of less than 3? born before 10/16/1975 refers to DOB < 1975-10-16; bowling skill of less than 3 refers to Bowling_skill < 3"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the youngest player? name refers to Player_Name; youngest player refers to max(DOB)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Tally the player IDs of ""Man of the Series"" awardees for the seasons from 2011 to 2015. seasons from 2011 to 2015 refers to 2011 < Season_Year < 2015"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the total number of runs scored by the batsmen during the 2nd inning of the match ID 335988? number of runs refers to Runs_Scored; 2nd inning refers to Innings_No = 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Between match nos. 335989 and 337000, how many times did a batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches? Between match no. 335989 and 337000 refers to 335989 < Match_Id < 337000; batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches refers to Runs_Scored > 3 andÂ  Over_Id = 1 and Ball_Id = 1 and Innings_No = 1"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give me the match ID and date of the matches that were held in Kingsmead for three consecutive days. date of the matches refers to Match_Date; held in Kingsmead refers to Venue_Name = 'Kingsmead'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times did the matches were held in MA Chidambaram Stadium from 5/9/2009 to 8/8/2011? MA Chidambaram Stadium refers to Venue_Name = 'MA Chidambaram Stadium' ; from 5/9/2009 to 8/8/2011 refers to Match_Date between '2009-05-09' and '2011-08-08'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Where was the ID 336005 match held? Please give me the venue and the city. ID 336005 match refers to Match_Id = '336005'; venue refers to Venue_Name; city refers to City_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field? wins the toss refers to Toss_Winner; whether they decided to bat or field refers to Toss_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the South African players, how many were born before 4/11/1980? South African players refers to Country_Name = 'South Africa'; born before 4/11/1980 refers to DOB < '1980-4-11'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Write down the name of players whose bowling skill is Legbreak. name of players refers to Player_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: When and for what role did the youngest player appear in his first match? When refers to Match_Date; youngest player refers to max(DOB); first match refers to min(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Tally the match IDs in which V Kohli is the ""Man of the Match""."
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: From 2011 to 2012, how many Australian players became the ""Man of the Match""? From 2011 to 2012 refers to Match_Date between '2011%' and '2012%'; Australian players refers to Country_Name = 'Australia'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who among the players won both ""Man of the Series"" and ""Orange Cap"" in the same season? Who refers to Player_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: When did the Sunrisers Hyderabad win their first match? Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; win their first match refers to Match_Winner and min(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Write down the player names and IDs of the English umpires. English umpires refers to Country_Name = 'England'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the run rate at the end of 17 overs of the match ID 335987 on 4/18/2008. 4/18/2008 refers to Match_Date = 4/18/2008; end of 17 overs refers to count(Toss_Name = 'field' ) = 17; run rate = divide(sum(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id) when Toss_Name = 'field')"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Compute the run rate at the end of 16 overs of the match ID 335999. Please include the name of the ""Man of_the Match"". end of 16 overs refers to count(Toss_Name = 'field' ) = 16; run rate = divide(count(Runs_Scored) when Toss_Name = 'bat', sum(Over_Id)when Toss_Name = 'field'); name refers to Player_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the id of the team with the highest number of matches won? id of the team refers to Team_Id; highest number of matches won refers to max(count(Match_Winner))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which year do the majority of the players were born? year refers to DOB; majority of the players refers to max(count(Player_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the date of the match that has the highest wager on the final result of a game? date of the match refers to Match_Date; highest wager refers to max(Win_Margin)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which season has the fewest number of matches? fewest number of matches refers to min(count(Match_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players have won at least 5 man of the match awards? won at least 5 man of the match awards refers to COUNT(Match_Id) > = 5"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the player who received the man of the match award during the last match of Season 9? Who refers to Player_Name; last match of Season 9 refers to max(Match_Date) where Season_Id = 9"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the name of the team that won the first ever match? name of the team refers to Team_Name; won the first ever match refers to Match_Winner where max(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many cities are in U.A.E? U.A.E refers to Country_Name = 'U.A.E'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the names of all the umpires from England. from England refers to Country_Name = 'England'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players bowl in the legbreak style? legbreak style refers to Bowling_skill = 'Legbreak'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did Rajasthan Royals play in Season 8?  Season 8 refers to Season_Id = 8"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which country is umpire TH Wijewardene from? country refers to Country_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the names of the venues in Abu Dhabi? names of the venues refers to Venue_Name; Abu Dhabi refers to City_Name = 'Abu Dhabi'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which country is the youngest player from? country refers to Country_Name; youngest player refers to max(DOB)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List all the names of the winning team's players in the first match of season 1. names refers to Player_Name; winning team's refers to Match_Winner; first match of season 1 refers to Season_Id = 1 and min(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the youngest player to have won the Purple Cap? Who refers to Player_Name; youngest player to have won the Purple Cap refers to min(subtract(Season_Year, DOB))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the complete name of the venue, city and country where the last match was held. name of the venue, city and country refers to Venue_Name and City_Name and Country_Name; last match refers to max(Match_Date)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many overs were there in each innings of match ID ""336011""?"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the ball IDs, scores, and innings numbers in the over ID 20 of match ID ""335988"". innings numbers refers to Innings_No"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches were held in 2011? held in 2011 refers to Match_Date like '2011%';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How old is Ishan Kishan in 2022? old refers to SUBTRACT(2022, SUBSTR(DOB, 1, 4)); Ishan Kishan refers to Player_Name = 'Ishan Kishan';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the win rate of the toss-winners in 2012. in 2012 refers to Match_Date like '2012%'; win rate refers to DIVIDE(COUNT(Toss_Winner = Match_Winner), COUNT(Match_Date like '2012%'))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches in 2009 had win margins of less than 10? in 2009 refers to Match_Date like '2009%'; win margins of less than 10 refers to Win_Margin < 10;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the players' names in both teams of the match that was held in June 2014. held in June 2014 refers to SUBSTR(Match_Date, 7, 1) = 6 and SUBSTR(Match_Date, 1, 4) = 2014"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did Mohammad Hafeez play? Mohammad Hafeez refers to Player_Name = 'Mohammad Hafeez';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the players from South Africa, provide the players' names who were born in 1984. from South Africa refers to Country_Name = 'South Africa'; born in 1984 refers to DOB like '1984%';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the"" Mumbai Indians"" team that played in 2009, how many percent of the matches did they win? played in 2009 Match_Date like '2009%'; Mumbai Indians"" team refers to Team_Name = 'Mumbai Indians'; percent of the matches did they win refers to DIVIDE(COUNT(Match_Winner = Team_Id), COUNT(Match_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the ratio of players with batting hands of left and right? batting hands of left refers to Batting_hand = 'Left-hand bat'; right refers to Batting_hand = 2; ratio refers to DIVIDE(COUNT(Batting_hand = 'Right-hand bat'), COUNT(Batting_hand = 2))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the eldest player and where did he/she come from? eldest player refers to MIN(DOB); where he/she come from refers to Country_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which bowling skills did the players from Zimbabwea have? Zimbabwea refers to Country_Name = 'Zimbabwea';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the IDs and names of the umpires from New Zealand. New Zealand refers to Country_Name = 'New Zealand'; ID of the umpire refers to Umpire_Id; name of the umpire refers to Umpire_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who was the captain-keeper of Rising Pune Supergiants? captain-keeper refers to Role_Desc = 'CaptainKeeper'; Rising Pune Supergiants refers to Role_Desc = 'CaptainKeeper'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did the Sunrisers Hyderabad team win in 2013? Sunrisers Hyderabad team refers to Team_Name = 'Sunrisers Hyderabad'; in 2013 refers to Match_Date like '2013%';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide match ID which had the extra type of penalty. extra type of penalty refers to Extra_Name = 'penalty';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Name the teams played in a match which resulted in a tie in 2015. resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket? out by the leg refers to Out_Name = 'lbw'; out in the first innings refers to Innings_No = 2;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches are there in 2008? in 2008 refers to Match_Date like '2008%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Count the matches with a total of two innings. total of two innings refers to innings_no = 2;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which is the country of the city named ""Rajkot""? city named ""Rajkot"" refers to city_name = 'Rajkot';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many of the matches are Superover? are Superover refers to win_type = 'wickets';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009? point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the name of the team of T Kohli in the match ID 335989. team of T Kohli refers to player_name = 'T Kohli';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many venues are located at Centurion, South Africa? venues are located at Centurion refers to city_name = 'Centurion'; South Africa refers to country_name = 'South Africa'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches of Delhi Daredevils in 2014, how many won matches are there? Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2014 refers to Match_Date contains '2014';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches played by Royal Challengers Bangalore, what is the match ID of the match with the highest winning margin? Royal Challengers Bangalore refers to team_name = 'Royal Challengers Bangalore'; highest winning margin refers to MAX(win_margin)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times did K Goel played as a player only? K Goel refers to Player_Name = 'K Goel'; played as a player only refers to Role_Id = 3"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the average winning margin of the matches held in Newlands? average winning margin refers to avg(win_margin); held in Newlands refers to venue_name = 'Newlands'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the losing team's name in the match ID 336039. losing team's name refers to Team_Id NOT in ""match_winner"" column"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the venue for the match ID 829768? 
venue refers to Venue_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the second team's name in the match with the lowest winning margin? lowest winning margin refers to MIN(win_margin); team name refers to team_name; second team refers to team_2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches in 2013, what is the percentage of winning of the team ""Mumbai Indians""? in 2013 refers to Match_Date like '2013%'; winning of the team ""Mumbai Indians"" refers to Match_Winner = 7; percentage refers to DIVIDE(COUNT(Match_Winner = 7), COUNT(Match_Winner))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the difference between the number of matches where SC Ganguly played as a Captain and those matches where he played other roles? SC Ganguly refers to Player_Name = 'SC Ganguly'; played as a Captain refers to Role_Id = 1; played other roles refers to Role_Id > 1; difference refers to SUBTRACT(COUNT(Role_Id = 1), COUNT(Role_Id > 1))"
