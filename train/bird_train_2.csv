db_id,train_example
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players have the bowling skill greater than 2? bowling skill greater than 2 refers to Bowling_skill > 2"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players were born in 1970? born in 1970 refers to DOB like '1970%';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players were born in the 80s and have bowling skill of 2? born in the 80s refers to DOB like '198%'; have bowling skill of 2 refers to Bowling_skill = 2;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches are there in April, 2008? in April, 2008 refers to Match_date like '2008-04%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the city name of country ID 3?"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many victory matches were there in 2008? in 2008 refers to Match_Date like '2008%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Provide the country ID of East London. East London refers to City_Name = 'East London'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How old is SC Ganguly in 2008? SC Ganguly refers to Player_Name = 'SC Ganguly'; old refers to SUBTRACT(2008, strftime('%Y',DOB))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the names of players who play by the left hand. play by the left hand refers to Batting_hand =   'Left-hand bat'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players are Indians? are Indians refers to Country_Name = 'India'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the name of England players. England players refers to Country_Name = 'England'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the venue name of Bandladore? Bandladore refers to City_Name = 'Bangalore'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the names of players who participated in season year 2008? season year 2008 refers to Season_Year = 2008"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the names of players that have run scored less than 3? scored less than 3 refers to Runs_Scored < 3; name of player refers to Player_name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the role of SC Ganguly? SC Ganguly refers to Player_Name = 'SC Ganguly'; role refers to Role_Desc"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the names of players who played as a keeper. played as a keeper refers to Role_Desc = 'Keeper'; name of player refers to Player_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the names of players in team 1? in team 1 refers to Team_Id = 1; name of player refers to Player_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players played as a captain in season year 2008? played as a captain refers to Role_Desc = 'Captain'; in season year 2008 refers Match_Date like '2008%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which teams did SC Ganguly join in season year 2008? SC Ganguly refers to Player_Name = 'SC Ganguly'; in season year 2008 refers to Season_Year = 2008"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What type did match ID 336000 win? type of match won refers to Win_Type"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Where did SB Joshi come from? SB Joshi refers to Player_Name = 'SB Joshi'; where the player come from refers to Country_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many players have left arm fast in bowling skill? have left arm fast in bowling skill refers to Bowling_skill = 'Left-arm fast';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the outcome type of match ID 392195?"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the youngest player and which city did he/she come from? youngest player refers to MIN(DOB); city refers to City_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did team Kings XI Punjab win in season year 2008? in season year 2008 refers to Season_Year = 2008; team Kings XI Punjab refers to Team_Name = 'Kings XI Punjab'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many seasons did Pune Warriors participate in? Pune Warriors refers to Team_Name = 'Pune Warriors'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What year was R Dravid born and the role he played? R Dravid refers to Player_Name = 'R Dravid'; year born refers to DOB; role refers to Role_Desc"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many times did SC Ganguly be the man of the match? SC Ganguly refers to Player_Name = 'SC Ganguly'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches did team Mumbai Indians win in 2008? team Mumbai Indians refers to Team_Name = 'Mumbai Indians'; in 2008 refers to Match_Date like '2008%'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Which team won by wickets in match ID 335993? team refers to Team_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Count the matches that were won by wickets in all season. won by wickets refers to Win_type = 'wickets';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the role of W Jaffer in season year 2012? W Jaffer refers to Player_name = 'W Jaffer'; in season year 2012 refers to Season_Year = 2012; role refers to Role_Desc"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What are the names of players who had been man of the match more than 5 times in season year 2008? man of the match more than 5 times refers to COUNT(Man_of_the_Match) > 5; in season year 2008 refers to Season_Year = 2008; name of player refers to Player_Name;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the average of Indian players that were born between 1975 and 1985 among all players? Indian players refers to Country_Name = 'India'; born between 1975 and 1985 refers to strftime('%Y',T1.DOB) between '1975' and '1985'; average refers to DIVIDE(COUNT(Country_Name = 'India'), COUNT(Player_Id))"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Calculate the percentage of left hand batting style players among all players. left hand batting style players refers to Batting_hand = 'Left-hand bat'; percentage refers to DIVIDE(COUNT(Batting_hand = 'Left-hand bat'), COUNT(Player_Id)) * 100.0"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the percentage of matches that are won by runs? won by runs refers to win_type = 1; percentage refers to DIVIDE(COUNT(win_type = 1), COUNT(Win_Type)) * 100"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many matches have 7 points of winning margin? have 7 points of winning margin refers to win_margin = 7;"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: What is the total number of players born between 1970 to 1975? born between 1970 to 1975 refers to strftime('%Y',DOB) between '1970' and '1975'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points? winning margin of 6 points refers to Win_Margin = 6; held on April 26, 2009 refers to Match_Date = '2009-04-26'"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: In the match ID 419135, who won by runs? who refers to Team_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches held in St. George's Park, give the match ID of the match with the highest winning margin points. held in St. George's Park refers to Venue_Name = 'St George''s Park'; highest winning margin points refers to MAX(Win_Margin)"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: How many of the players are from Sri Lanka? from Sri Lanka refers to Country_Name = 'Sri Lanka';"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: List the player's name who played as a captain. played as a captain refers to Role_Desc = 'captain'; player refers to Player_Name"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Give the match's venue and winning team for the match ID 392194. venue refers to Venue_Name; winning team refers to match_winner"
soccer_2016,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Batting_Style (
Batting_Id integer,
Batting_hand text,
PRIMARY KEY (Batting_Id),
);
CREATE TABLE Bowling_Style (
Bowling_Id integer,
Bowling_skill text,
PRIMARY KEY (Bowling_Id),
);
CREATE TABLE City (
City_Id integer,
City_Name text,
Country_id integer,
PRIMARY KEY (City_Id),
);
CREATE TABLE Country (
Country_Id integer,
Country_Name text,
PRIMARY KEY (Country_Id),
);
CREATE TABLE Extra_Type (
Extra_Id integer,
Extra_Name text,
PRIMARY KEY (Extra_Id),
);
CREATE TABLE Extra_Runs (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Extra_Type_Id integer,
Extra_Runs integer,
Innings_No integer,
FOREIGN KEY (Extra_Type_Id) REFERENCES Extra_Type(Extra_Id),
);
CREATE TABLE Out_Type (
Out_Id integer,
Out_Name text,
PRIMARY KEY (Out_Id),
);
CREATE TABLE Outcome (
Outcome_Id integer,
Outcome_Type text,
PRIMARY KEY (Outcome_Id),
);
CREATE TABLE Player (
Player_Id integer,
Player_Name text,
DOB date,
Batting_hand integer,
Bowling_skill integer,
Country_Name integer,
PRIMARY KEY (Player_Id),
FOREIGN KEY (Batting_hand) REFERENCES Batting_Style(Batting_Id),
FOREIGN KEY (Bowling_skill) REFERENCES Bowling_Style(Bowling_Id),
FOREIGN KEY (Country_Name) REFERENCES Country(Country_Id),
);
CREATE TABLE Rolee (
Role_Id integer,
Role_Desc text,
PRIMARY KEY (Role_Id),
);
CREATE TABLE Season (
Season_Id integer,
Man_of_the_Series integer,
Orange_Cap integer,
Purple_Cap integer,
Season_Year integer,
PRIMARY KEY (Season_Id),
);
CREATE TABLE Team (
Team_Id integer,
Team_Name text,
PRIMARY KEY (Team_Id),
);
CREATE TABLE Toss_Decision (
Toss_Id integer,
Toss_Name text,
PRIMARY KEY (Toss_Id),
);
CREATE TABLE Umpire (
Umpire_Id integer,
Umpire_Name text,
Umpire_Country integer,
PRIMARY KEY (Umpire_Id),
FOREIGN KEY (Umpire_Country) REFERENCES Country(Country_Id),
);
CREATE TABLE Venue (
Venue_Id integer,
Venue_Name text,
City_Id integer,
PRIMARY KEY (Venue_Id),
FOREIGN KEY (City_Id) REFERENCES City(City_Id),
);
CREATE TABLE Win_By (
Win_Id integer,
Win_Type text,
PRIMARY KEY (Win_Id),
);
CREATE TABLE Match (
Match_Id integer,
Team_1 integer,
Team_2 integer,
Match_Date date,
Season_Id integer,
Venue_Id integer,
Toss_Winner integer,
Toss_Decide integer,
Win_Type integer,
Win_Margin integer,
Outcome_type integer,
Match_Winner integer,
Man_of_the_Match integer,
PRIMARY KEY (Match_Id),
FOREIGN KEY (Team_1) REFERENCES Team(Team_Id),
FOREIGN KEY (Team_2) REFERENCES Team(Team_Id),
FOREIGN KEY (Season_Id) REFERENCES Season(Season_Id),
FOREIGN KEY (Venue_Id) REFERENCES Venue(Venue_Id),
FOREIGN KEY (Toss_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Toss_Decide) REFERENCES Toss_Decision(Toss_Id),
FOREIGN KEY (Win_Type) REFERENCES Win_By(Win_Id),
FOREIGN KEY (Outcome_type) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Match_Winner) REFERENCES Team(Team_Id),
FOREIGN KEY (Man_of_the_Match) REFERENCES Player(Player_Id),
);
CREATE TABLE Ball_by_Ball (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Innings_No integer,
Team_Batting integer,
Team_Bowling integer,
Striker_Batting_Position integer,
Striker integer,
Non_Striker integer,
Bowler integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Batsman_Scored (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Runs_Scored integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
);
CREATE TABLE Player_Match (
Match_Id integer,
Player_Id integer,
Role_Id integer,
Team_Id integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Id) REFERENCES Player(Player_Id),
FOREIGN KEY (Role_Id) REFERENCES Rolee(Role_Id),
FOREIGN KEY (Team_Id) REFERENCES Team(Team_Id),
);
CREATE TABLE Wicket_Taken (
Match_Id integer,
Over_Id integer,
Ball_Id integer,
Player_Out integer,
Kind_Out integer,
Fielders integer,
Innings_No integer,
FOREIGN KEY (Match_Id) REFERENCES Match(Match_Id),
FOREIGN KEY (Player_Out) REFERENCES Player(Player_Id),
FOREIGN KEY (Kind_Out) REFERENCES Out_Type(Out_Id),
FOREIGN KEY (Fielders) REFERENCES Player(Player_Id),
);
---------------------
QUESTION: Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets? Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2009 refers to Match_Date = '2009%'; won by wickets refers to Win_Type = 'wickets'; percentage refers to DIVIDE(COUNT(Win_Type = 'wickets'), COUNT(Win_Type))"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times? release title refers to groupName; Ron Hunt is an artist; groupYear = 1979; releaseType = 'single'; downloaded 239 times refer to totalSnatched = 239;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many times was the album released by blowfly in 1980 downloaded? blowfly is an artist; groupYear = 1980; album refers to releaseType; downloaded refers to totalSnatched;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What is the tag of the album with the highest amount of downloads? album refers to releaseType; the highest amount of downloads refers to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What are the top 5 tags with the highest amount of downloads? the highest amount of downloads refers to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What is the release title of the single under the ""funk"" tag that was released the oldest? release title of single refers to groupName where releaseType = 'single'; the oldest means coming before all others in time and refers to MIN(groupYear);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Name all the release titles of the ""ep's"" under the alternative tag. release titles of the ""ep's"" refer to groupName where releaseType = 'ep';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What are the tags of the top 5 least downloaded live albums? least downloaded album refers to MIN(totalSnatched where releaseType = 'album');"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What is the tag and the artist of the most downloaded single? the most downloaded single refers to MAX(totalSnatched where releaseType = 'single');"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many releases are tagged ""1980s""? tag = '1980s';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many times has the release ""city funk"" been downloaded? groupName = 'city funk'; downloaded refers to totalSnatched;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Please list the releases that have been downloaded for more than 20000 times. releases refer to groupName; downloaded for more than 20000 times refers to totalSnatched > 20000;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What are the tags of the release ""sugarhill gang""? release ""sugarhill gang"" refers to groupName = 'sugarhill gang';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many tags does the release ""city funk"" have？ release ""city funk"" refers to groupName = 'city funk';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Please list the titles of all the releases with the tag ""1980s"". titles refer to groupName;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Among the releases with the tag ""1980s"", which one of them is the most downloaded? Please give its title. title refers to groupName; the most downloaded refers to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many releases by the artist michael jackson are tagged ""pop""? tag = 'pop';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Among the releases that were released in 2000, how many of them were released as an album and tagged ""pop""? groupYear = 2000; album refers to releaseType;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: What are the average download times for the a release tagged ""1980s""? AVG(totalSnatched where tag = '1980s');"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Name the title of the top three releases with the highest number of downloads. title refers to groupName; the highest number of downloads refers to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Provide the name of the artist who released his or her Single-Table in 2012 with the highest number of downloads. Name the Single-Table title as well. title refers to groupName; the highest number of downloads refers to MAX(totalSnatched where groupYear = 2012 and releaseType = 'single');"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many albums and Single-Tables were released by the artist named '50 cent' between 2010 and 2015? albums refer to releaseType = 'album'; releaseType = 'single'; between 2010 and 2015 refers to groupYear between 2010 and 2015;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released? 2Pac is an artist; album refers to releaseType; groupYear = 1991; SUBTRACT(groupYear = 1991, groupYear where releaseType = 'album' LIMIT 1 OFFSET 1);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Find the average number of downloads for Single-Tables released by '2Pac' between 2001 and 2013. 2Pac is an artist; releaseType = 'single'; between 2001 and 2013 refers to groupYear between 2001 and 2013; average number of downloads = AVG(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Provide the title, release year and the tag associated with the live album that has the highest number of downloads? release year refers to groupYear; title of live album refers to groupName where releaseType = 'live album'; the highest number of downloads refers to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Provide the name of artists who released at least two bootlegs in 2016. at least two bootlegs refer to COUNT(releaseType = 'bootleg')≥ 2; groupYear = 2016;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Which artist released singles between 1980 to 1982? releaseType = 'single'; between 1980 to 1982 refers to groupYear between 1980 and 1982;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Indicates groups with id from 10 to 20 with singles downloaded at least 20. releaseType = 'single'; downloaded at least 20 refers to totalSnatched ≥ 20; id from 10 to 20 refer to id between 10 and 20; groups refer to groupName;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Among the artists from 1980 to 1982. Which artist was tagged as ""disco""? from 1980 to 1982 refers to groupYear between 1980 and 1982; tag = 'disco';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Provide the name of artists who had no more than 100 downloads and are tagged ""funk"" in 1980. no more than 100 downloads refer to totalSnatched ≤ 100; groupYear = 1980; tag = 'funk';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Which artist has released the most singles with the tag ""soul""? the most singles refer to MAX(COUNT(releaseType = 'single'));"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Among the artists with the id from 10 to 30. Which artist released the product with the tag ""funk"" in 1980? id from 10 to 30 refers to id between 10 and 30; groupYear = 1980;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: List the group name has the most downloaded that have released jazz genres from 1982 or later. the most downloaded refers to MAX(totalSnatched); tag = 'jazz'; from 1982 or later refers to groupYear ≥ 1982;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Which artist has id ""16""? Provide her or his tag genre. FALSE;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Among id from 10 to 50. Which artist tagged as ""new.york"" has the most downloads? Among id from 10 to 50 refers to id between 10 and 50; tag = 'new.york'; the most downloads refer to MAX(totalSnatched);"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: List the name of artists who have released albums and mixtape from 1980 to 1985 in ""dance"" genre. albums and mixtape refer to releaseType; from 1980 to 1985 refers to groupYear between 1980 and 1985; tag = 'dance';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many singles were released between 1979 and 1981 labeled as ""soul""? releaseType = 'single'; between 1979 and 1981 refers to groupYear between 1979 and 1981; tag = 'soul';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many singles were released in 1979? releaseType = 'single'; groupYear = 1979;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: In 1980, how many singles were released by sugar daddy? sugar daddy is an artist; releaseType = 'single'; groupYear = 1980;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: How many christmas albums were released in 2004? album refers to releaseType; groupYear = 2004; tag = 'christmas';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Please list all tags of kurtis blow from 2000 to 2010. kurtis blow is an artist; from 2000 to 2010 refers to groupYear between 2000 and 2010;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Which album title and tag that millie jackson released in 1980? millie jackson is an artist; album title refers to groupName where releaseType = 'album'; groupYear = 1980;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Please list all release titles whose tag is jazz in 2005. release titles refer to groupName; groupYear = 2005;"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: From 1980 to 2000, which artist had the most disco releases? From 1980 to 2000 refers to groupYear between 1980 and 2000; tag = 'disco'; the most releases refer to MAX(COUNT(id));"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: Which artists have released singles with the tag 1970s? releaseType = 'single';"
music_tracker,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE torrents (
groupName text,
totalSnatched integer,
artist text,
groupYear integer,
releaseType text,
groupId integer,
id integer,
PRIMARY KEY (id),
);
CREATE TABLE tags (
index integer,
id integer,
tag text,
PRIMARY KEY (index),
);
---------------------
QUESTION: From 1979 to 1982, what was the percentage of united.states albums out of total albums were released? From 1979 to 1982 refers to groupYear between 1979 and 1982; United States refer to tag; albums refer to releaseType; DIVIDE(COUNT(releaseType = 'album' where tag = 'united.states' and groupYear between 1979 and 1982), COUNT(releaseType = 'album' where groupYear between 1979 and 1982)) as percentage;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Among the countries in the group of Heavily Indebted Poor Countries, how many of them are under the lending category of the International Development Associations? group of Heavily Indebted Poor Countries is OtherGroups = 'HIPC'; International Development Associations refers to lendingcategory = 'IDA'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the countries under the lending category of the International Development Associations and have a external debt reporting finished by estimation. countries refer to the ShortName; International Development Associations refers to lendingcategory = 'IDA'; have a external debt reporting finished by estimation refers to ExternalDebtReportingStatus = 'Estimate'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What's the description of the series code SM.POP.TOTL for Aruba? Aruba is the name of the country where ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the countries in Latin America & Caribbean with a note on the series code SM.POP.TOTL. Countries refer to the ShortName; Latin America & Caribbean is the name of the region"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group? countries refer to Countrycode; low-income group refers to incomegroup = 'Low income'; with notes refers to description IS NOT NULL; series code SM.POP.TOTL refers to Seriescode = 'SM.POP.TOTL'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the descriptions of the series code SM.POP.TOTL for all the countries that are under the lending category of the International Development Associations. Countries are the Countrycode; International Development Associations refers to lendingcategory = 'IDA'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many low-income countries under the lending category of the International Development Associations have a note on the series code SM.POP.TOTL? low-income countries are where the incomegroup = Low income"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE? countries refer to Countrycode; in the high income refers to incomegroup = 'High'; with notes refers to description IS NOT NULL; series code SP.DYN.AMRT.FE refers to Seriescode = 'SP.DYN.AMRT.FE'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the long name of the country with the description ""Estimates are derived from data on foreign-born population."" on the series code SM.POP.TOTL?"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the description of the footnote on the series code AG.LND.FRST.K2 in 1990 for Aruba? Year = 1990; Aruba is the name of country where ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: On which years did Aruba got a footnote on the series code AG.LND.FRST.K2? Aruba is the name of country where ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the countries that got the footnote ""Data are classified as official aid."" on the series code DC.DAC.AUSL.CD in 2002. countries are the Countrycode; footnote refers to Description = 'Data are classified as official aid'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many footnotes did Aruba got on different series code in the year 2002? Aruba is the name of country where ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD? Aruba is the name of country where ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the average adolescent fertility rate of the country whose Alpha2Code is 1A over the years this indicator was calculated. the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%'))"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the special notes for the country whose average adolescent fertility rate is the highest? the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%')); MAX(average adolescent fertility rate)"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List the East Asia & Pacific countries which are under the High income: nonOECD group. Please include their alpha code. the East Asia & Pacific countries are where Region = 'East Asia & Pacific'; High income: nonOECD group is where IncomeGroup = 'High income: nonOECD'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In which country's latest trade data and latest water withdrawal data were both updated in the year 2013? Give its long name and Alpha 2 code."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980? the average value of Adjusted net enrolment rate, primary, both sexes (%) is DIVIDE(SUM(Value), SUM(IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)')); Year BETWEEN 1975 AND 1980; Algeria is the name of country where CountryName = 'Algeria'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the Indicator names and aggregation methods when the topic is Economic Policy & Debt: Balance of payments: Capital & financial account?"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List down the series codes in which the topic is about Environment: Emissions and the license type is restricted. Please include their alpha code."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In 1970, how many Middle Eastern & North African countries whose value for CO2 emissions from gaseous fuel consumption (kt) indicator is more than 600? Year = 1970; Middle East & North Africa is the name of the region where Region = 'Middle East & North Africa'; CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List down the top 3 Latin American & Caribbean countries with the highest average value in ""CO2 emissions (kt)"" indicator since 1965. Give their highest value and in what year. Latin American & Caribbean countries is the name of the region where Region in ('Latin America' , 'Caribbean'); CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'; average value in CO2 emissions (kt) = DIVIDE(SUM(Value), SUM(IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)')); Year > 1965"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the series note description of the series ""SP.DYN.TO65.MA.ZS"" which covers the topic ""Health: Mortality"" in 1967? in 1967 refers to Year = 'YR1967'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please write down the footnote descriptions of Albania in 1981. Albania is the name of country where Country = 'Albania'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Enumerate the footnote narratives of The Bahamas under the series code SH.DTH.IMRT in the year 1984. narratives is Description; The Bahamas is the name of the country where Country = 'The Bahamas'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the short name of the country in which the ""Net bilateral aid flows from DAC donors, Sweden (current US$)"" indicator hit the 570,000 value in 1970? Net bilateral aid flows from DAC donors, Sweden (current US$) is the name of indicator where IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'; Year = 1970; Value > 570,000"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List down the World Bank code of the countries whose country note has described ""Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.""? Please include their lending category. World Bank code refers to Wb2code; Data source refers to Description"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the topic of the series when the Total reserves minus gold (current US$) indicator of Haiti hit the value of 3,000,000 in 1961? Please include its series code and license type. Total reserves minus gold (current US$) is the IndicatorName; Haiti is the CountryName; Year = 1961"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting? Adjusted net national income per capita (constant 2005 US$) is the IndicatorName; have not finished their external debt reporting means ExternalDebtReportingStatus = 'Preliminary'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which countries have a fertility rate between 4 and 5 in 1979? List their names. Year = 1979; fertility rate refers to IndicatorName = 'Fertility rate, total (births per woman)'; Value is between 4 and 5;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Find the countries in south Asia which are in the low-income group. What is the source of their recent income and expenditure data? List it alongside the table name of the countries. South Asia is the name of the region; IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the sources for the data of children who finished primary school education in Latin America & Caribbean countries? Latin America & Caribbean is the name of the region; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'; sources refer to Description;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List the sources for the Net Migration in South American countries in 2002. South American is the name of the region; Year contains '2002'; sources refer to Description; IndicatorName = 'Net migration';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the sources for the data of children who finished primary school education in North American countries? North American is the name of the region; sources refer to Description; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In the countries for which the latest trade data are from 2013, what was the GDP growth in 2014? List them in the ascending order of GDP. IndicatorName = 'GDP growth (annual %)'; Year = 2014;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which European countries had the highest private expenditure on health in 2005? List the top ten countries in descending order and find the source of the data. Year = 2005; private expenditure on health refers to IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'; the highest refers to MAX(Value); source refers to Description;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many low income countries are there in South Asia? South Asia is the name of the region; IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the short name of countries which have the latest trade data after 2010. the latest trade data after 2010 implies LatestTradeData > 2010;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system. Sub-Saharan African is the name of the region; SystemOfTrade = 'Special trade system'; countries refer to CountryCode; DIVIDE(COUNT (CountryCode where SystemOfTrade = 'Special trade system' and Region = 'Sub-Saharan Africa'), COUNT(CountryCode where Region = 'Sub-Saharan Africa')) as percentage;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please calculate the average of Arms imports (SIPRI trend indicator values) of the European & Central Asian countries. European & Central Asian is the name of the region; IndicatorName = 'Arms imports (SIPRI trend indicator values)'; countries refer to CountryCode; DIVIDE(Sum(Value), Count(CountryCode));"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which upper middle income country has the lowest value of CO2 emissions (kt)? IncomeGroup = 'Upper middle income'; IndicatorName = 'CO2 emissions (kt); the lowest value refers to MIN(Value);"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the minimum of International migrant stock, total of heavily indebted poor countries? IndicatorName = 'International migrant stock, total'; heavily indebted poor countries referred to by its abbreviated 'HIPC' = OtherGroups; MIN(Value);"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the indicator names belonging to Education: Inputs topic in 2000. Year = 'YR2000';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many annual indicators use the Sum aggregation method from 2001 to 2003? Annual refers to Periodicity; from 2001 to 2003 implies Year = 'YR2001', Year = 'YR2002' , Year = 'YR2003';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In 2005, which series codes use the International Monetary Fund, Balance of Payments Statistics Yearbook and data files source? Year contains '2005'; series codes contain 'International Monetary Fund'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What percentage of countries in South Asia have the Life expectancy at birth, female (years) greater than 50? South Asia is the name of the region; IndicatorName = 'Life expectancy at birth, female (years)'; greater than 50 refers to Value>50; DIVIDE(COUNT(CountryCode where IndicatorName = 'Life expectancy at birth, female (years)'; Value>50; Region = 'South Asia'), COUNT(CountryCode where Region = 'South Asia')) as percentage;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)? IndicatorName = 'Death rate, crude (per 1,000 people)'; the highest refers to MAX(Value); from 1960 to 1965 refers to Year between '1960' and '1965'; country refers to CountryName;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the indicator names of Arab World whose values are higher than 50 in 1960. Arab World refers to CountryName; Year = '1960'; values are higher than 50 refers to Value>50;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country has the highest value of Merchandise imports by the reporting economy (current US$)? country refers to CountryName; the highest value implies MAX(Value); IndicatorName = 'Merchandise imports by the reporting economy (current US$)';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list annual indicator names which have values of more than 100 in 1965. Annual refers to Periodicity; values of more than 100 implies Value>100; Year = '1965';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: From 1968 to 1970, what are indicator names whose license type is open and values are less than 100? From 1968 to 1970 refers to Year between '1968' and '1970'; values are less than 100 imply Value<100;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country had the highest value of indicator belongs to Private Sector & Trade: Exports topic? Please list the country name and indicator name. country refers to CountryName;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which indicator name uses the Weighted average method and has the lowest value? AggregationMethod = 'Weighted average'; the lowest value implies MIN(Value);"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list out all annual indicator names of Sudan in 1961? Sudan is the name of the country; Periodicity = 'Annual'; Year = '1961'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: From 1960 to 1965, which country has the lowest value of indicator belongs to Health: Population: Structure? From 1960 to 1965 refers to Year between '1960' and '1965'; the lowest value implies MIN(Value); country refers to CountryName;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What percentage of upper middle income countries which have the CO2 emissions from liquid fuel consumption (% of total)

less than 80%? IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; less than 80% implies Value<80%; IncomeGroup = 'Upper middle income'; DIVIDE(COUNT(CountryCode where IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; Value<80%; IncomeGroup = 'Upper middle income'), COUNT(CountryCode where IncomeGroup = 'Upper middle income'));"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is indicator code of Rural population? IndicatorName = 'Rural population';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many country uses the 2008 System of National Accounts methodology? List our their table name."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the series code of countries using Euro as their currency unit."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the long name of countries using series code as DT.DOD.DSTC.CD"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Mention the series code of countries using Hong Kong dollar as their currency unit."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the table name of countries using series code as SP.DYN.TO65.MA.ZS"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the country name of lower earning countries lower earning countries refer to IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the series code and country code of the poor countries that located in Latin American & Carribbean. Latin American & Carribbean is the name of the region; poor countries refers to IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Mention the series code of countries using Australian dollar as their currency unit. Which country belongs to middle income group among them. middle income group refers to IncomeGroup = 'Low middle income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the country name of upper middle income group. Which country has the earliest national account base year? List out the region where this country locates. IncomeGroup = 'Upper middle income'; the earliest national account base year refers to MIN(NationalAccountsBaseYear);"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the country code and country name of the rich countries using Euro as their currency unit Non-OECD and OECD countries can be regarded as rich countries for those that are part of the High Income Group;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the table name and currency unit of countries using series code as FP.CPI.TOTL"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List out the name and indicator code of high income: nonOECD countries high income: non-OECD' refer to IncomeGroup;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Mention the series code of countries using pound sterling as their currency unit. Which country belongs to high income group among them."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List down 10 country codes and it's short names."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many of the countries name start with alphabet A? List down the Alpha2Code of them. countries name starts with alphabet A refers to shortname like 'A%';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which countries use Euro as their currency? List down the table name. CurrencyUnit = 'Euro';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many of the countries do not have special notes? List the long name. do not have special notes implies SpecialNotes are NULL;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which high income group countries are from Asia? Asia is the name of the region;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Name the countries' long name with national accounts base year prior to 1980. national accounts base year prior to 1980 means before 1980 and refers to NationalAccountsBaseYear<1980;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which low income country has a series code of DT.DOD.DECT.CD? Name the country code of it. IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: State the table name of country with description of ""Covers mainland Tanzania only""."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Write down the description and series code of Benin in year 2005. Benin is the short name of the country; year 2005 refers to Year = 'YR2005';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the footnote description of Finland in year 2000? Finland is the short name of the country; year 2000 refers to Year = 'YR2000';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the years when countries have indicator name of ""Air transport, passengers carried""? List the table name of these countries."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List the long name of countries with indicator name in 1980. with any indicator name implies IndicatorName is not NULL; Year = '1980';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: State the currency of Malaysia and what are the indicator code used by this country in 1970? Malaysia is the name of the country; currency refers to CurrencyUnit; Year = '1970';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Name 5 country codes of country with highest value and state the region of these countries. with highest value refers to MAX(Value);"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries have country note description as ""Sources: UN Energy Statistics (2014)""? List the currency of these countries. countries refer to CountryCode; currency refers to CurrencyUnit;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many footnotes have been made in year 1980 and what are the table names of these countries that made the footnotes? year 1980 refers to Year = 'YR1980';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List the series code of country with country notes description as ""Data sources : Eurostat"" and state the Wb2Code of these countries."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Among the low income countries, which country has the lowest fertility rate? fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'; lowest refers to MIN(Value); IncomeGroup = 'Low income';"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How much is the total urban population of middle income countries in 1960? IncomeGroup = 'Middle income'; Year = 1960; urban population refers to IndicatorName;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Name the country with fastest growth in adjusted net national income in 1980 and state the currency used by this country. fastest growth refers to MAX(Value); IndicatorName = 'Adjusted net national income (annual % growth)'; Year = '1980'; currency refers to CurrencyUnit;"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries using the 1993 System of National Accounts methodology? use the 1993 System of National Accounts methodology refers to SystemOfNationalAccounts = '1993 System of National Accounts methodology.'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country have completed vital registration? List all the countries. have completed vital registration refers to VitalRegistrationComplete = Yes; country name refers to ShortName"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country have conducted population census from 2010 until 2012 and have completed vital registration? from 2010 until 2012 refers to LatestPopulationCensus between '2010' and '2012'; have completed vital registration refers to VitalRegistrationComplete = 'Yes'; CountryName = ShortName + LongName"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country have the highest CO2 emissions in 1960? which country refers to countryname; the highest CO2 emissions refers to max(value where indicatorname = 'CO2 emissions (metric tons per capita)'); in 1960 refers to year = '1970'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the ratio between country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971? List the country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971. ratio = divide(max(value where indicatorname = 'Number of infant deaths' and year = '1971'), min(value where indicatorname = 'Number of infant deaths' and year = '1971')); the highest number of infant deaths in 1971 refers to max(value where indicatorname = 'Number of infant deaths' and year = '1971'); the lowest number of infant deaths in 1971 refers to min(value where indicatorname = 'Number of infant deaths' and year = '1971')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What country have the series code of SP.DYN.CBRT.IN? what country refers to ShortName"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country have data classified as official aid? which country refers to ShortName; have data classified as official aid refers to description = 'Data are classified as official aid.'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What country have its data estimated based on regression? what country refers to LongName; have its data estimated based on regression refers to description = 'Estimates are based on regression.'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: List all the country in East Asia & Pacific region that have more than 2000000 urban population in 1970. country refers to LongName; have more than 2000000 urban population refers to value where indicatorname = 'Urban population'>2000000; in 1970 refers to year = '1970'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In 1960, what is largest population for country with upper middle income? in 1960 refers to year = '1960'; the largest population refers to max(value where IndicatorName = 'Population, total'); country with upper middle income refers to incomegroup = 'Upper middle income'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries uses the 1968 System of National Accounts methodology? uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What upper middle income country under East Asia & Pacific region which covers the topic about Social Protection & Labor: Migration
? Indicate the short name of the said country. upper middle income country refers to incomegroup = 'Upper middle income'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Name the country in which the topic is about Poverty: Shared Prosperity. Indicate the long name of the country."
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What country has the latest trade data with a series code of ""SP.DYN.CDRT.IN
""? List the table name of the country. the latest trade data refers to LatestTradeData = '2013'; with a series code of ""SP.DYN.CDRT.IN
"" refers to indicatorcode = 'SP.DYN.CDRT.IN'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What country in the region of Sub-Saharan Africa has a series code of ""SP.DYN.AMRT.FE""? Indicate the long name of the country"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries are using the same type of currency? Please list the short names of any 3 countries. any 3 countries refers to count(shortname)>3"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What South Asian nations have low incomes? Please include the entire names of the nations in your answer. South Asian nations refers to region = 'South Asia'; have low incomes refers to incomegroup = 'Low income'; the entire names refers to longname"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please provide full name of any two countries using special trade system. full name refers to longname; using special trade system refers to systemoftrade = 'Special trade system'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country has had the highest proportion of CO2 emissions from transport? the highest proportion of CO2 emissions from transport refers to max(value where indicatorname = 'CO2 emissions from transport (% of total fuel combustion)')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country has the lowest percentage of arable land? which country refers to countryname; the lowest percentage of arable land refers to min(value where indicatorname = 'Arable land (% of land area)')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the subjects of series that have a restricted type of license? subjects refers to topic; a restricted type of license refers to  licenseType = 'Restricted'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which countries in the upper middle income category still have unfinished external debt reporting? Please provide the country codes in your answer. in the upper middle income category refers to incomegroup = 'Upper middle income'; still have unfinished external debt reporting refers to ExternalDebtReportingStatus = 'Preliminary'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt? percentage = divide(count(countrycode where  ExternalDebtReportingStatus = 'Actual' ), count(countrycode))*100%; in the Middle East and North Africa refers to region = 'Middle East & North Africa'; have finished reporting on their real external debt refers to ExternalDebtReportingStatus = 'Actual'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which form of government has more countries that have completed the actual external debt reporting between the two types of government accounting concepts, budgetary central government vs. consolidated central government? have completed the actual external debt reporting refers to ExternalDebtReportingStatus = 'Actual'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many nations in East Asia and the Pacific have completed their external debt reporting on time? in East Asia and the Pacific refers to region = 'East Asia & Pacific'; have completed their external debt reporting on time refers to ExternalDebtReportingStatus = 'Estimate'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What proportion of Sub-Saharan Africa's countries have lower middle incomes? proportion = divide(count(countrycode where incomegroup = 'Low income'), count(countrycode))*100%; Sub-Saharan Africa's countries refers to region = 'Sub-Saharan Africa'; have lower middle incomes refers to incomegroup = 'Low income'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: From 1961 to 1980, what was the highest percentage of land used for agriculture in the Republic of Benin? from 1961 to 1980 refers to year between '1961' and '1980'; the highest percentage of land used for agriculture refers to max(value where IndicatorName = 'Agricultural land (% of land area)'); in the Republic of Benin refers to longname = 'Republic of Benin'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the full names of any three countries that have their series code with a description of UN Energy Statistics (2014). full name refers to longname"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What was the deposit interest rate in the Commonwealth of Australia in 1979 in percentage? deposit interest rate refers to value where IndicatorName = 'Deposit interest rate (%)'; in the Commonwealth of Australia refers to  LongName = 'Commonwealth of Australia'; in 1979 refers to Year = '1979'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the series code for Germany and what is its description? Germany refers to shortname = 'Germany'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please provide the subject of series of Austria. subject refers to topic; Austria refers to shortname = 'Austria'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the subject of the series SP.DYN.AMRT.MA and what does it pertain to? subject refers to topic; pertain to refers to Description"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries are having their country's footnotes described as ""unspecified""? Please provide the full names of any three of those countries. described as ""unspecified"" refers to Description = 'Not specified'; full names refers to LongName"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which nation completed its external debt reporting in 1980 and had a Land under cereal production value of 3018500? completed its external debt reporting refers to ExternalDebtReportingStatus = 'Actual'; in 1980 refers to year = 1980; Land under cereal production value of 3018500 refers to value = 3018500"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What portion of the nations in Latin America and the Caribbean had more than 50% of their land used for agriculture in 1961? portion = divide(count(CountryName where Year = '1961' and Value>50), count(CountryName))*100%; nations in Latin America and the Caribbean refers to region = 'Latin America & Caribbean';  more than 50% of their land used for agriculture refers to value where indicatorname = 'Agricultural land (% of land area)'>50; in 1961 refers to Year = '1961'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the full names of the countries in South Asia that belongs to the low income group? full name refers to longname; the countries in South Asia refer to region = 'South Asia'; belongs to the low income group refers to incomegroup = 'Low income'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the indicator code for Mobile Cellular Subscriptions of Brazil? Mobile Cellular Subscriptions refers to indicatorname = 'Mobile cellular subscriptions'; Brazil refers to CountryName = 'Brazil'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries in Europe & Central Asia uses Danish krone as its currency? List the full names of those coutnries. countries in Europe & Central Asia refer to region = 'Europe & Central Asia'; uses Danish krone refers to currencyunit = 'Danish krone'; full name refers to longname"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the name of the country with the highest percentage of rural population in the overall total population? Indicate the rural population percentage of total population. the highest percentage of rural population in the overall total population refers to max(value where indicatorname = 'Rural population (% of total population)')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries have a latest population census in 2011? Indicate their full names. have a latest population census in 2011 refers to LatestPopulationCensus = '2011'; full name refers to LongName"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the agricultural land area in sq. km of Italy in 1968? agricultural land area in sq. km refers value where indicatorname = 'Agricultural land (sq. km)'; Italy refers to countryname = 'Italy'; in 1968 refers to year = '1968'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In Sub-Saharan Africa, how many female out-of-school children of primary school age are there in the country with the higest number of female out-of-school children of primary school age? Indicate the year of when it was recorded. in Sub-Saharan Africa refers to Region = 'Sub-Saharan Africa'; the higest number of female out-of-school children of primary school age refers to max(value where IndicatorName = 'Out-of-school children of primary school age, female (number)')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan? number of infant deaths refers to IndicatorName = 'Number of infant deaths'; in year 1965 refers to Year = '1965'; full name is Islamic State of Afghanistan refers to LongName = 'Islamic State of Afghanistan'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Among the countries who uses the 1968 System of National Accounts methodology, how many are in the Middle East & North Africa? Name the country with the highest CO2 emissions from solid fuel consumption in kiloton. uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'; in the Middle East & North Africa refers to Region = 'Middle East & North Africa'; the highest CO2 emissions from solid fuel consumption in kiloton refers to max(value where IndicatorName = 'CO2 emissions from solid fuel consumption (kt)')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What are the indicator codes for the Republic of Albania in the year 1960? the Republic of Albania refers to LongName = 'Republic of Albania'; in the year 1960 refers to Year = '1960'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966? cereal production of 6140000 metric tons refers value where IndicatorName = 'Cereal production (metric tons)'> 6140000; the year 1966 refers to Year = '1966'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country has the highest population in largest city for 19 consecutive years starting from 1960? Indicate the region to which the country is located. the highest population in largest city refers to max(value where IndicatorName = 'Population in largest city'); for 19 consecutive years starting from 1960 refers to Year BETWEEN'1960' and '1979'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: From 1975 to 1980, how much is the total amount CO2 emmission in kiloton of the the world? Indicate which year the world recorded its highest CO2 emmissions. from 1975 to 1980 refers to Year between 1975 and 1980; the total amount CO2 emmission in kiloton of the the world refers to sum(value where IndicatorName like 'CO2%'); the world recorded its highest CO2 emmissions refers to max(value where IndicatorName like 'CO2%')"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country has the smallest land area in square kilometers for 19 consecutive years starting from year 1961? Indicate how much is its land area in square kilometers in those years and the income group of the country. the smallest land area in square kilometers refers to min(value where IndicatorName like 'Land area (sq. km)'); for 19 consecutive years starting from year 1961 refers to Year between 1961 and 1979"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade. average number refers to avg(value); passengers carried via air transport per year refers to value where IndicatorName = 'Air transport, passengers carried'; by Bulgaria refers to CountryName = 'Bulgaria'; between 1970 to 1980 refers to Year between 1970 and 1980"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What's the lastest household survey in Angola and when did it take place? in Angola refers to ShortName = 'Angola'; when refers to PppSurveyYear"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries in the North America Region has completed the vital registration? has completed the vital registration refers to VitalRegistrationComplete = 'Yes'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: In which years does the country whose Alpha2Code is 1A have a result of the indicator Adolescent fertility rate? indicator Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What's the long name of the country that got 3000000 on the indicator Arms exports in 1960? long name refers to CountryName; got 3000000 on the indicator Arms exports refers to value where IndicatorName = 'Arms exports (SIPRI trend indicator values)' = 3000000; in 1960 refers to Year = 1960"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the Alpha2Codes of all the countries that have an indicator on Rural population in 1960. in 1960 refers to year = '1960'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which country's indicator for Adolescent fertility rate is the highest in 1960, please give its special notes. indicator for Adolescent fertility rate is the highest refers to max(value where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'); in 1960 refers to year = '1960'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: By how much did the indicator on Adolescent fertility rate increase from 1960 to 1961 in the country whose Alpha2Code is 1A? by how much = subtract(sum(value where Year = 1961), sum(value where Year = 1960)); indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the note for Australia on the indicator SP.ADO.TFRT? note refers to Description; for Australia refers to ShortName = 'Australia'; indicator SP.ADO.TFRT refers to Seriescode = 'SP.ADO.TFRT'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Please list the notes for Aruba on the indicators under the topic of Environment: Energy production & use. note refers to Description; for Aruba refers to ShortName = 'Aruba'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: Which countries have notes on the indicator BX.KLT.DINV.CD.WD? indicator BX.KLT.DINV.CD.WD refers to Seriescode = 'BX.KLT.DINV.CD.WD'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: For the country that has notes on the indicator Inflation, consumer prices, in which region is it in? indicator Inflation, consumer prices refers to IndicatorName = 'Inflation, consumer prices (annual %)'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: How many countries have notes on the indicator Stocks traded, turnover ratio of domestic shares? indicator Stocks traded, turnover ratio of domestic shares refers to IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What's the agregation method for the indicator whose value is 133 in 1960 for the Arab World? in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What's the value of the indicator whose long definition is ""Adolescent fertility rate is the number of births per 1,000 women ages 15-19."" for the Arab World in 1960? in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A? the percentage of increase from 1960 to 1961 = divide(subtract(sum(value where Year = 1961), sum(Value where Year = 1960)), sum(Value where Year = 1960)) *100%; indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'"
world_development_indicators,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Country (
CountryCode text,
ShortName text,
TableName text,
LongName text,
Alpha2Code text,
CurrencyUnit text,
SpecialNotes text,
Region text,
IncomeGroup text,
Wb2Code text,
NationalAccountsBaseYear text,
NationalAccountsReferenceYear text,
SnaPriceValuation text,
LendingCategory text,
OtherGroups text,
SystemOfNationalAccounts text,
AlternativeConversionFactor text,
PppSurveyYear text,
BalanceOfPaymentsManualInUse text,
ExternalDebtReportingStatus text,
SystemOfTrade text,
GovernmentAccountingConcept text,
ImfDataDisseminationStandard text,
LatestPopulationCensus text,
LatestHouseholdSurvey text,
SourceOfMostRecentIncomeAndExpenditureData text,
VitalRegistrationComplete text,
LatestAgriculturalCensus text,
LatestIndustrialData integer,
LatestTradeData integer,
LatestWaterWithdrawalData integer,
PRIMARY KEY (CountryCode),
);
CREATE TABLE Series (
SeriesCode text,
Topic text,
IndicatorName text,
ShortDefinition text,
LongDefinition text,
UnitOfMeasure text,
Periodicity text,
BasePeriod text,
OtherNotes integer,
AggregationMethod text,
LimitationsAndExceptions text,
NotesFromOriginalSource text,
GeneralComments text,
Source text,
StatisticalConceptAndMethodology text,
DevelopmentRelevance text,
RelatedSourceLinks text,
OtherWebLinks integer,
RelatedIndicators integer,
LicenseType text,
PRIMARY KEY (SeriesCode),
);
CREATE TABLE CountryNotes (
Countrycode text,
Seriescode text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Footnotes (
Countrycode text,
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Countrycode) REFERENCES Country(CountryCode),
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
CREATE TABLE Indicators (
CountryName text,
CountryCode text,
IndicatorName text,
IndicatorCode text,
Year integer,
Value integer,
FOREIGN KEY (CountryCode) REFERENCES Country(CountryCode),
);
CREATE TABLE SeriesNotes (
Seriescode text,
Year text,
Description text,
FOREIGN KEY (Seriescode) REFERENCES Series(SeriesCode),
);
---------------------
QUESTION: What is the average value of Adolescent fertility rate in the country whose Alpha2Code is 1A? average value = AVG(Value) where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the different director IDs of the movies whose user rating is more than 4."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the users who gave a rating of 5, how many of them are male? Male users mean that u_gender = 'M'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the genres of the movies which actor id 851 is the star."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many movies from the USA which user rating is less than 3?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the movies from France, how many of them are drama? France a one country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the average occupation of users whose ratings are not more than 2 ?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the top 10 USA movies, by descending order, from the highest to the lowest, the user rating. USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the average number of casts of movies that are from the USA? USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the top 5 movies from other countries which to language is not in English. not in English can be represented by isEnglish = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the best actors, how many of them got a rating of 5 to the movies they starred?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the average rating of the newest movies from France? France is a country; year = 4 represents the newest date."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the most rated UK movies, how many of them has running time of less than 2? UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the id of male users who gave ratings of less than 3 to French movies with running time of 2. Male users mean that u_gender = 'M'; France is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred? Worst actresses means a_quality is the least; The least a_quality is 0"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the ID of audiences that gave the most rating of 5? The audience and users are the same meaning"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What are the ID of actors that had worked together with director 22397? What was the genre of that movie?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list down the ID of actors and directors in action movies."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many female actors acted in the movies of year 4? Female actors mean that a_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What are the ID of actors with quality rating of 3 acted in English USA movies? English movies refers to isEnglish = 'T'; USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List down the ID of movies with running time of 3 and average revenue of 1?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: UK produced what genre of movies? UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the favourite movie genre for audiences of age 18? The audience and users are the same meaning"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the ID of actors that acted in the movies most viewed by audience with occupation 5? The audience and users are the same meaning"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Movies with rating 3 are viewed by audiences in which distinct age group? The audience and users are the same meaning"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Action movies are mostly directed by directors of which country?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list down ID of movies acted by top 5 actors based on actor rating."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List down 5 non English adventure movies from UK? not English refers to isEnglish = 'F'; UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the percentage of female audiences who viewed movies with rating 2? The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the difference of female and male audiences in number who viewed horror movies? The audience and users are the same meaning; Difference of female and male audiences = count(female users) - count(male users); Female users refers to u_gender = 'F'; Male users refers to u_gender = 'M'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list the genre of the movies that are the newest and is in English. Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; In English means isEnglish = T"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the action movies from the USA, how many of them are not in English? USA is a country; not in English can be represented by isEnglish = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: For the male users no older than 18, how many times have they given the highest rating? Male users refers to u_gender = 'M'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list the ID of the movie that has been mostly rated by female users. Female users refers to u_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among divergent movies that got the highest rating, how many of them are from the UK? UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list different IDs of movies that are the newest and have gotten the lowest rating. Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: For the movies in English that are the oldest, how many of them have the lowest rating? Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1；isEnglish = 'T' means English movie"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many different female users have rated movies from France? France is a country; Female users mean that u_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: For different directors who direct well, how many of them have directed an action film? direct well means the quality of directing is good, which means d_quality = 4."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list the genre of the movies that are directed by the directors with the highest level of average revenue."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many distinct movies in English stars a male actor who acts the best? Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list the country of the movie that stars an actress who acts the worse. a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the highest average rating for action movies made in the USA? USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the films directed by directors who direct the best, how many of them have an average rating of over 3.5? d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which adventure movie has the highest average rating?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many of the users who rate the movie with the id '2462959' are female? Female users mean that u_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the most distinct rated movie with a running time of 0?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the ids and ratings of each actors played in the movie with the id 1722327?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which directors with the best quality directed the most films? d_quality = 5 refers to direct the best"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many drama movie with the rating of 3?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many of the movies rated 5 are rated by a user between the ages of 25 and 35?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list all horror films that have a rating of 1."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the IDs of all the directors who worked on French films. France is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List all of the user ids and ages who rated movies with the id 1695219?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which genre contains the greatest number of non-English films? isEnglish = 'F' means non-English"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the cast and the director of the movie with the id 1949144."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3? UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the proportion of action movies directors who are called 'box office success paradox'? 'box office success paradox' means average revenue exceeds their quality; The proportion can be computed by [(avg_revenue > d_quality) / ()] * 100%"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list the actor IDs whose movies have the newest published date. Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Who are cast members in an English movie which has a running time equal to 2? Please list their IDs. isEnglish = 'T' means English movie"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which actor has acted in at least 2 French films? Please list their IDs. France is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many American movies have cast number more than 1? USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list movie IDs which has the oldest publication date and the cast numbers are zero. Year contains relative value, higher year value refers to newer date; Year = 1 refer to oldest date"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many actors have acted in both US or UK films? US and UK are 2 countries"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many directors with average revenue of 4 have made either action or adventure films?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please list director IDs who have the quality of at least 3 and have made at least 2 different genres of movies."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many American comedies are there? USA is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many latest released dramas and action movies?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What horror movies have a running time of at least 2? Please list movie IDs. Higher value of running time means running time is longer"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please calculate negative critical reception of American movies 'negative critical reception' refers to percentage of movies with a rating of 1, which = [count(rating = 1) / count(all movies)] * 100%"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the disparate number of the comedy films that got the 1 rating?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What's different average revenue status for director who directed the movie that got the most 1 ratings?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many French movies got the highest ranking? France is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the movie that has been rated most by 25 years old users."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many separate 35 year-old uesers have rated the movie from UK? UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: List the user ids and ages who gave the rate 2 to the movie No. 2409051."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Please give the ids of the oldest films that got the most ratings. Films and movies share the same meaning; oldest film refers to the movie with year = 1"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which different movies from France got the least ratings? France is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many female actors have been played a role in any of French or USA movies? French and USA are two countries; Female actors mean that a_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many different actors have played a role in the highest rating movie? highest rating of a movie is 5"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which Crime film got the lowest average rating?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What's the ratio of gender in actors to actress in all the UK movies? UK is a country; Male actors mean that a_gender = 'M'; Female actors mean that a_gender = 'F'; ratio; ratio of gender in actors = count(a_gender = 'M') / a_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many 35-year-old female users gave the movie 1711133 a rating of 3? Female users mean that u_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many users have rated 1 each for the UK's second newest movies with a running time of 2? second newest movies refers to year = 2 since year in this database is a relative value, less is the newer"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many unique directors with an average earnings of 2 and a quality of 3 have not made comedy films? List them."
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Calculate the percentage of female actors and quality 2 who have appeared twice at the casting of the film 1672580. Female actors mean that a_gender = 'F'; percentage can be computed by [cast_num = 2 AND a_quality = 2 in female) / (all female actors)] * 100%"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form. The worst actors means a_quality = 0; Men and male share the same meaning; men actors refers to a_gender = 'M'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which actor has appeared in the most films?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the most popular genre of film directed by directors? Most popular genre indicates that the genre has the most number of movies"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What are the most common film genres made by the worst directors? d_quality = 5 refers to the best directors, d_quality = 0 refers to the worst directors"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What non-English American film/s has received the lowest user ratings? Mention the movie's I.D. USA is a country; non-English means isEnglish = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the total average movie directed by the directors who's quality and revenue is 4?"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Which movies have received the greatest ratings from female users whose occupations fall within the category of 3? Female users mean that u_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time? female actresses mean that a_gender = 'F'"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: How many horror movies were made by the worst directors? d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one. isEnglish = 'T' means films in English; Film and movie share the same meaning"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names. UK is a country"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the percentage difference of English and non-English-language crime movies in other countries in year 3? non-English-language refers to isEnglish = 'F'; The percentage difference can be computed by [count(isEnglish = 'T' in movies) - count(isEnglish = 'F' in movies) / (all movies)] * 100%"
movielens,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE users (
userid integer,
age text,
u_gender text,
occupation text,
PRIMARY KEY (userid),
);
CREATE TABLE directors (
directorid integer,
d_quality integer,
avg_revenue integer,
PRIMARY KEY (directorid),
);
CREATE TABLE actors (
actorid integer,
a_gender text,
a_quality integer,
PRIMARY KEY (actorid),
);
CREATE TABLE movies (
movieid integer,
year integer,
isEnglish text,
country text,
runningtime integer,
PRIMARY KEY (movieid),
);
CREATE TABLE movies2actors (
movieid integer,
actorid integer,
cast_num integer,
);
CREATE TABLE movies2directors (
movieid integer,
directorid integer,
genre text,
);
CREATE TABLE u2base (
userid integer,
movieid integer,
rating text,
);
---------------------
QUESTION: What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre. Female actors mean that a_gender = 'F'; Male actors mean that a_gender = 'M'; a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center. names of all the products refers to ""Product Name""; order CA-2011-112326 refers to ""Order ID"" = 'CA-2011-112326'; in the center refers to Region = 'Central';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among all the orders made by Aimee Bixby, what was the longest shipment time? made by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; longest shipment time refers to MAX(SUM(SUTRACT(julianday(""Ship Date""), julianday(""Order Date"")), 1))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed? made by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; the slowest delivery speed refers to ""Ship Mode"" = 'Standard Class';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders has Aimee Bixby made? Aimee Bixby made refers to ""Customer Name"" = 'Aimee Bixby';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered. made by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; with more than 3 kinds of products ordered refers to count(""Product ID"") > 3;"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the orders made by Aimee Bixby, how many of them included at least one kind of product under the category ""Furniture""? made by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please list the names of all the products ordered by Aimee Bixby in 2016. ordered by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; ordered n 2016 refers to strftime('%Y', ""Order Date"") = '2016';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the total quantity of ""Telescoping Adjustable Floor Lamp"" ordered from central superstores? ""Telescoping Adjustable Floor Lamp"" is a ""Product Name""; from central superstores refers to Region = 'Central';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please list the names of all the customers who had ordered the product ""Telescoping Adjustable Floor Lamp"". ""Telescoping Adjustable Floor Lamp"" is a product name; names of all the customers refers to ""Customer Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the customers who have ordered the product ""Telescoping Adjustable Floor Lamp"", how many of them are consumers? ""Telescoping Adjustable Floor Lamp"" is a ""Product Name""; consumers refers to Segment = 'Consumer';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What was the quantity of Xerox 1952 ordered by Aimee Bixby on 2014/9/10? Xerox 1952 is a ""Product Name""; ordered by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; on 2014/9/10 refers to ""Order Date"" = date('2014-09-10');"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: For how many times has Aimee Bixby ordered the product Xerox 1952? Xerox 1952 is a ""Product Name""; Aimee Bixby ordered refers to ""Customer Name"" = 'Aimee Bixby';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What was the original price of Xerox 1952 ordered by Aimee Bixby on 2014/9/10? Xerox 1952 is a ""Product Name""; ordered by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; on 2014/9/10 refers to ""Order Date"" = date('2014-09-10'); original price refers to DIVIDE(Sales, SUTRACT(1, discount))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What was the total cost of Xerox 1952 ordered by Aimee Bixby on 2014/9/10? Xerox 1952 is a ""Product Name""; ordered by Aimee Bixby refers to ""Customer Name"" = 'Aimee Bixby'; on 2014/9/10 refers to ""Order Date"" = date('2014-09-10'); total cost refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many art products were ordered in 2013 in the east superstore? ordered in 2013 refers to strftime('%Y', ""Order Date"") = '2013'; art products refers to ""Sub-Category"" = 'Art'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who is the customer who purchased the largest total cost of products in a single order? largest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the name of the product that has the highest original price? has the highest original price refers to MAX(DIVIDE(Sales, SUTRACT(1, discount))); name of the product refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the name of the product that was ordered recently by Darren Powers? Darren Powers is the ""Customer Name""; name of the product refers to ""Product Name""; recently refers to MAX(""Order Date"")"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many quantities of Advantus plastic paper clips were ordered overall? Advantus plastic paper clips is the ""Product Name"";"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Which order of Logitech G600 MMO Gaming Mouse has the highest total cost? Logitech G600 MMO Gaming Mouse refers to ""Product Name""; highest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the names of the products that were ordered by Alejandro Grove? ordered by Alejandro Grove refers to ""Customer Name"" = 'Alejandro Grove'; names of the products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many customers in Chicago ordered at least 10 Cardinal EasyOpen D-Ring Binders in a single order? at least 10 goods refers to Quantity > = 14; Cardinal EasyOpen D-Ring Binders refers to ""Product Name""; customers in Chicago refers to City = 'Chicago'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the names of the products with a profit of no less than 1,000 in one single order? profit of no less than 1,000 refers to Profit > = 1000; names of the products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Name 10 products that were shipped first class from the East region. shipped first class refers to ""Ship Mode"" = 'First Class'; Region = 'East'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the products ordered by Becky Martin around the Central region. ordered by Becky Martin refers to ""Customer Name"" = 'Becky Martin'; Region = 'Central'; products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List 5 customers in the West region who had their item shipped 'Second Class.' shipped 'Second Class.' refers to ""Ship Mode"" = 'Second Class'; customers refers to ""Customer Name""; Region = 'West'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Add the total profit of Patrick Gardner in the Central region. Patrick Gardner is the ""Customer Name""; Region = 'Central'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Which item was shipped on 3/4/2013 and scheduled for same day delivery in the South region? shipped on 3/4/2013 refers to ""Order Date"" = date('2013-03-04'); same day delivery refers to ""Ship Mode"" = 'Same Day'; item refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the total sales of 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' in the Central region? 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' is the ""Product Name"";"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Name the item ordered by Jonathan Doherty with the highest quantity in the East region. Jonathan Doherty is the ""Customer Name""; highest quantity refers to MAX(Quantity); Region = 'East'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How much is the total quantity of items from the East region shipped on 3/25/2015? Name the products. shipped on 3/25/2015 refers to ""Ship Date"" = Date('2015-03-25');"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Which customer ordered 'Global High-Back Leather Tilter, Burgundy' on 10/13/2013 in the East region? 'Global High-Back Leather Tilter, Burgundy' is the ""Product Name""; on 10/13/2013 refers to ""Order Date"" = Date('2013-10-13'); Region = 'East'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What category does the item ordered by Katherine Murray on 11/4/2018 in the South region belong to? ordered by Katherine Murray refers to ""Customer Name"" = 'Katherine Murray'; on 11/4/2018 refers to ""Order Date"" = Date('2018-11-04');"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What percentage do items under the category of 'Furniture' make up the total number of items ordered that are shipped as standard in the West region? shipped as standard refers to ""Ship Mode"" = 'Standard Class'; Region = 'West'; percentage refers to DIVIDE(SUM(Quantity where Category = 'Furniture'), SUM(Quantity)) * 1.0"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the ship date of the order by the customer named Ann Chong in the central region? Ann Chong' is the ""Customer Name""; Region = 'Central'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Give the customer segment from the West region that orders the order ID CA-2011-108189. Region = 'West'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the total sales of the accumulated orders of Hon Valutask Swivel Chairs in the West region? 'Hon Valutask Swivel Chairs' is the ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Provide the order ID of Frank Olsen of the South region. Frank Olsen' is the ""Customer Name""; Region = 'South'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What product was ordered in the Central region on April 26, 2018, and shipped by April 27, 2018? on April 26, 2018 refers to ""Order Date"" = date('2018-04-26'); shipped by April 27, 2018 refers to ""Ship Date"" = date('2018-04-27');"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: From which city and state does the customer that bought the product with the highest sales? highest sales refers to max(Sales)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who is the customer from the East region that purchased the order with the highest profit? highest profit refers to MAX(profit); Region = 'East'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the customers from Chicago, Illinois, what is the highest quantity of products bought in a single order? from Chicago refers to City = 'Chicago'; Illinois refers to State = 'Illinois'; highest quantity refers to max(Quantity)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the order date and product name of the order ID CA-2011-137274 from the Central region?"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List down the customers that purchased the product named Xerox 23 in the South region. product named Xerox 23 refers to ""Product Name"" = 'Xerox 23'; customers refers to ""Customer Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the products under the office supplies category, what is the product that made the highest sales in the Central region? made the highest sales refers to MAX(Sales)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who is the customer from the West region that received the highest discount? received the highest discount refers to MAX(discount); customer refers to ""Customer Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Provide the names of the products with a profit greater than 98% of the average profit of all products in the East region. names of the products refers to ""Product Name"";  profit greater than 98% of the average profit refers to Profit > MULTIPLY(AVG(Profit), 0.98)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Name the customers from the Eastern region whose orders cost above 80000. cost above 80000 refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit) > 80000"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders were made by Maxwell Schwartz in 2015? Maxwell Schwartz' is the ""Customer Name""; in 2015 refers to strftime('%Y', ""Order Date"") = '2015';"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who ordered the Bush Mission Pointe Library in the Central Region? Bush Mission Pointe Library' is the ""Product Name"";"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Calculate the total profit by Cisco SPA301 for all regions. Cisco SPA301' is the ""Product Name""; all regions refers to central_superstore, south_superstore, west_superstore, east_superstore"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the products that were ordered by Anne McFarland from the Western store. Anne McFarland' is the ""Customer Name""; Western store refers to west_superstore; products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the products ordered by customers in Coachella. in Coachella refers to City = 'Coachella'; products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Compare the numbers of orders between the Eastern and Western stores in 2015. in 2015 refers to strftime('%Y', ""Order Date"") = '2015'; Eastern store refers to east_superstore; Western store refers west_superstore;"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the products ordered by Matt Abelman from the Western store in 2013. ordered by Matt Abelman refers to ""Customer Name"" = 'Matt Abelman'; in 2013 refers to ""Order Date"" like '2013%'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Calculate the total cost of the orders by Brad Thomas in 2016. Brad Thomas is the ""Customer Name""; in 2016 refers to strftime('%Y', ""Order Date"") = '2016'; total cost refers to SUM(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Provide the names, cities, and countries of the customers who ordered the Plantronics single ear headset. Plantronics Single Ear Headset' is the ""Product Name""; name refers to ""Customer Name"";"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Provide the shipping dates and products of the orders by Gene Hale. Gene Hale' refers to ""Customer Name""; shipping date refers to ""Ship Date""; products refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders in the south superstore with the fastest delivery are items of furniture? fastest delivery refers to Ship Mode = 'First Class'; furniture refers to Category = 'Furniture'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many office supply orders were made by Cindy Stewart in the south superstore? office supply refers to Category = 'Office Supplies'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What product category got the highest profit in the south superstore? highest profit refers to MAX(Profit)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the name of all products that Cindy Stewart ordered in the east superstore. name of all products refers to Product Name; Cindy Stewart is the Customer Name;"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the name of all products in the west superstore that customers chose for same-day shipment in the year 2013. name of all products refers to Product Name; same-day shipment refers to ""Ship Mode"" = 'Same Day'; year 2013 refers to ""Ship Date"" BETWEEN '2013-01-01' AND '2013-12-31'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What product category that Sam Craven ordered from the central and east superstore?"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the total quantity that Cindy Stewart order ""Lexmark X 9575 Professional All-in-One Color Printer"" in the south superstore? Lexmark X 9575 Professional All-in-One Color Printer' is the ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the name of all the products with order quantities greater than or equal to 10 in the central superstore that has been shipped by the slowest delivery method. name of all the products refers to Product Name; order quantities greater than or equal to 10 refers to COUNT(""Order ID"") > = 10; slowest delivery refers to ""Ship Mode"" = 'Standard Class'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What product category got the least sales in the west superstore? least sales refers to Sales = MIN(Sales)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the total profit of ""Memorex Froggy Flash Drive 8 GB in south superstore? ""Memorix Froggy Flash Drive 8 GB"" is the ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the total sales of furniture products in the east superstore in the year 2016.
 furniture products refers to Category = 'Furnitures'; in the year 2016 refers to ""Order Date"" BETWEEN '2016-01-01' AND '2016-12-31'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Calculate the average sales of """"Sharp AL-1530CS Digital Copier in the east and the west superstore. Sharp AL-1530CS Digital Copier' is the ""Product Name""; average sales = AVG(Sales)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Calculate the percentage of ordered office supplies products in the central and the south superstore. office supplies products refers to Category = 'Office Supplies'; central refers to Region = 'Central'; south superstore refers to Region = 'South'; percentage = divide(SUM(Product ID where Category = 'Office Supplies'), count(Product ID)) * 100 where Region = 'Central' OR Region = 'South'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the ratio between customers who live in Texas and customers who live in Indiana? live in Texas refers to State = 'Texas'; live in Indiana refers to State = 'Indiana'; Ratio = divide(sum(State = 'Texas'), sum(State = 'Indiana'))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the orders in Central superstore, which art product were ordered the most? art product refers to Sub-Category = 'Art'; the most refers to max(order_number)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the customers in South superstore, which customers ordered more than 3 times in 2015? State the name of the customers. name of the customers refers to Customer_Name; in 2015 refers to ""Order Date"" BETWEEN '2015-01-01' AND '2015-12-31'; more than 3 times refers to count(Order_ID) > 3"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: State the highest profit made by Anna Chung's orders in the Central Superstore. highest profit refers to max(Profit)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders were made by Corey Roper in 2015?"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Calculate the difference between the total sales in the East superstore and the total sales in the West superstore. East superstore refers to Region = 'East'; West superstore refers to Region = 'West'; difference = subtract(sum(Sales) when Region = 'East', sum(Sales) when Region = 'West')"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the names of the ordered products that have profit deficiency in central superstore? names of the ordered products refers to Product Name; deficiency refers to profit value is negative; profit > 0"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: In west superstore, what is the name and the shipping mode of the product that was ordered with the shortest shipment time? name refers to ""Product Name""; shipping mode refers to Ship Mode; shortest shipment time refers to min(subtract(Ship Date, Order Date))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders of O'Sullivan Plantations 2-Door Library in Landvery Oak in central superstore were shipped through the shipping mode with the fastest delivery speed? 'O'Sullivan Cherrywood Estates Traditional Bookcase' is the ""Product Name""; shipping mode with the fastest delivery speed refers to ""Ship Mode"" = 'First Class'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the name of the corporate customer from Rhode Island who had the highest number of orders in 2016 from the east superstore? corporate customer refers to Segment = 'Corporate'; Rhode Island refers to State = 'Rhode Island'; in 2016 refers to ""Order Date"" BETWEEN '2016-01-01' AND '2016-12-31'; east superstore refers to Region = 'East'; highest number of orders refers to max(order_number); name of corporate customer refers to ""Customer Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California? customers in California refers to State = 'California'; orders with sales value of no less than 5,000 refers to Sales > = 5,000"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: In which segment does the customer who purchased the product from the east superstore with the highest original price belong? highest original price refers to max(divide(Sales, subtract(1, Discount)))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the shipment duration for order number CA-2011-134103? shipment duration = subtract(""Ship Date"", ""Order Date""); order number CA-2011-134103 refers to ""Order ID"" = 'CA-2011-134103'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders with a quantity greater than 5 have been shipped by the fastest delivery method? orders with a quantity greater than 5 refers to Quantity > 5; shipped by the fastest delivery method refers to Ship Mode = 'First Class'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please list any three orders that caused a loss to the company. caused a loss to the company refers to Profit < 0"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Which product did Phillina Ober buy? product refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who was the customer in the South Region superstore who bought the most “Hon Multipurpose Stacking Arm Chairs""? customer refers to ""Customer Name""; “Hon Multipurpose Stacking Arm Chairs"" is the ""Product Name"";"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the profit from selling the ""O'Sullivan Living Dimensions 2-Shelf Bookcases""? ""O'Sullivan Living Dimensions 2-Shelf Bookcases"" refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many of the ""Hon Pagoda Stacking Chairs"" have been sold in total in the west superstore? Hon Pagoda Stacking Chairs' is the ""Product Name""; west superstore refers to Region = 'West'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders purchased by Aaron Bergman have been delivered with the slowest shipping speed? slowest shipping speed refers to ""Ship Mode"" = 'Standard Class'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the original price of the ""Black Avery Flip-Chart Easel Binder""? ""Black Avery Flip-Chart Easel Binder"" is the ""Product Name""; original price = divide(Sales, subtract(1, Discount))"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the name of the product that Aimee Bixby bought? name of the product refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Indicate the profit of product Sauder Camden County Barrister Bookcase, Planked Cherry Finish. Sauder Camden County Barrister Bookcase, Planked Cherry Finish' refers to ""Product Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many furniture products had been shipped by standard class in the East superstore? furniture products refers to Category = 'Furniture'; shipped by standard class refers to ""Ship Mode"" = 'Standard Class'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the highest profit order in the East superstore of customers from Houston, Texas? highest profit refers to max(Profit); Houston, Texas refers to City = 'Houston' and State = 'Texas'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many furniture products were ordered at central superstore? furniture products refers to Category = 'Furniture'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What are the names of the products that had been shipped in March 2013 at central superstore? names of the products refers to Product Name; shipped in March 2013 refers to ""Ship Date"" = '2013-03%'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders were made by customers who live in Texas at the Central superstore? customer live in Texas refers to State = 'Texas'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: How many orders were made by Alan Barnes in 2015 at the Central superstore? in 2015 refers to ""Order Date"" = '2015%'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the product name of order CA-2011-115791 in the East superstore? order CA-2011-115791 refers to ""Order ID"" = 'CA-2011-115791'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the percentage of orders with 0.2 discount in the Central superstore were purchased by customers who live in Texas? live in Texas refers to State = 'Texas'; percentage = divide(sum(Order ID) when Discount = 0.2, sum(Order ID)) as percentage"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the percentage of furniture orders that were shipped through first class in 2013 at the Central superstore? furniture refers to Category = 'Furniture'; shipped through first class in 2013 refers to ship mode = 'first class' and ""Ship Date"" = '2013%'; percentage = divide(sum(Order ID) when Category = 'Furniture' and ""Ship Date"" = '2013%', sum(Order ID)) as percentage"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who order from the west region on August 12, 2013, and received a discount of 0.2? Who refers to ""Customer Name""; on August 12, 2013 refers to ""Order Date"" = '2013-08-12'; discount of 0.2 refers to discount = 0.2"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the order ID of the security-Tint Envelopes product ordered on June 3, 2013, in the Central region? Security-Tint Envelopes' refers to ""Product Name""; ordered on June 3, 2013 refers to ""Order Date"" = '2013-06-03'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the product's name bought by the customer named Bill Shonely from the Central region."
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Please give the name of customers from the West region that bought exactly 8 items in their purchase. name of customers refers to ""Customer Name""; bought exactly 8 items refers to Quantity = 8"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the customers from Houston, Texas, what is the total profit of their orders in the Central region? customers from Houston, Texas refers to State = 'Texas' and City = 'Houston'; total profit = sum(Profit)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who is the customer with an order shipped on March 5, 2013, in the eastern region? Who is the customer refers to Customer Name; shipped on March 5, 2013 refers to ""Ship Date"" = '2013-03-05'; eastern region refers to Region = 'East'"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the orders from 2016 in the Central region, what is the product with the lowest profit? orders from 2016 refers to ""Order Date"" = '2016%'; product refers to ""Product Name""; lowest profit refers to min(Profit)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Who ordered the order ID CA-2011-118976 from the East region? Who refers to ""Customer Name"""
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Provide the product's name of the product with the highest sales in the South region. highest sales refers to max(Sales)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List down the sales, profit, and subcategories of the product ordered in the order ID US-2011-126571 in the East region."
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: What is the product's name in the highest quantity in a single purchase? highest quantity refers to max(Quantity)"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: List the customer's name from the South region with a standard class ship mode and sales greater than the 88% of the average sales of all orders. sales greater than the 88% of the average sales of all orders refers to Sales > avg(Sales) * 0.88; South region refers to south_superstore"
superstore,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE people (
Customer ID text,
Customer Name text,
Segment text,
Country text,
City text,
State text,
Postal Code integer,
Region text,
);
CREATE TABLE product (
Product ID text,
Product Name text,
Category text,
Sub-Category text,
Region text,
);
CREATE TABLE central_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE east_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE south_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
CREATE TABLE west_superstore (
Row ID integer,
Order ID text,
Order Date date,
Ship Date date,
Ship Mode text,
Customer ID text,
Region text,
Product ID text,
Sales real,
Quantity integer,
Discount real,
Profit real,
PRIMARY KEY (Row ID),
FOREIGN KEY (Customer ID) REFERENCES people(Customer ID),
FOREIGN KEY (Region) REFERENCES people(Region),
FOREIGN KEY (Product ID) REFERENCES product(Product ID),
);
---------------------
QUESTION: Among the customers from Indiana, what is the percentage of their purchased orders in the Central region with no discount? Indiana refers to State = 'Indiana'; no discount refers to Discount = 0; percentage = divide(sum(Discount) when Discount = 0, count(Discount)) as percentage"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Among all the male officers, what is the percentage of them are White? male refers to gender = 'M'; white refers to race = 'W'; percentage = divide(count(officers where race = 'W'), count(officers)) where gender = 'M' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What is the percentage of the cases involved more than 3 officers from year 2010 to 2015? more than 3 officers refers to officer_count > 3; from year 2010 to 2015 refers to date between '2010-01-01' and '2015-12-31'; percentage = divide(count(case_number where officer_count > 3), count(case_number)) where date between '2010-01-01' and '2015-12-31' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: In which year has the greatest number of cases where Handgun was used as weapon? year refers to year(date); the greatest number of cases refers to max(count(case_number)); OS Spray was used as weapon refers to subject_weapon = 'OS Spray'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Among the cases dismissed by the grand jury disposition, what percentage of cases is where the subject is injured? dismissed by the grand jury disposition refers to grand_jury_disposition = 'No Bill'; the subject is injured refers to subject_statuses = 'injured'; percentage = divide(count(incidents where subject_statuses = 'injured'), count(incidents)) where grand_jury_disposition = 'No Bill' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Did the number of cases with Vehicle as subject weapon increase or decrease from year 2007 to 2008. State the difference. number of cases refers to count(case_number); with Vehicle as subject weapon refers to subject_weapon = 'Vehicle'; year 2007 refers to date between '2007-01-01' and '2007-12-31'; year 2008 refers to date between '2008-01-01' and '2008-12-31'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Among the 'Handgun' weapon used by subject, how many percent were 'Shoot and Miss'? 'Handgun' weapon refers to subject_weapon = 'Handgun'; 'Shoot and Miss' refers to subject_statuses = 'Shoot and Miss'; percent = divide(count(incidents where subject_statuses = 'Shoot and Miss'), count(incidents)) where subject_weapon = 'Handgun' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Who are the officers involved in cases that are voted as 'No Bill'. List their last name and gender. voted as 'No Bill' refers to grand_jury_disposition = 'No Bill'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Which are the cases where the subject are female. List the case number, subject status and weapon. female refers to gender = 'F'; weapon refers to subject_weapon"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: From the cases where the subject are male, list the case number and the location and subject status. male refers to gender = 'M'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: For case(s) where officer 'Evenden, George' is in charged, state the case number and the grand jury disposition? officer 'Evenden, George' refers to full_name = 'Evenden, George'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: For case number '134472-2015', list the last name of the officers involved and state the subject statuses."
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: From the cases where the subject were deceased, list the subject's last name, gender, race and case number. subject were deceased refers to subject_statuses = 'Deceased'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What is the percentage of subject who are female used the Vehicle as weapon? female refers to gender = 'F'; use Vehicle as weapon refers to subject_weapon = 'Vehicle'; percentage = divide(count(case_number where subject_weapon = 'Vehicle'), count(case_number)) where gender = 'F' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: From the 'Injured' statuses of the subject, what is the ratio of weapons used are knife against handgun? the 'Shoot and Miss' status refers to subject_statuses = 'Shoot and Miss'; knife refers to subject_weapon = 'knife'; toy handgun refers to subject_weapon = 'toy handgun'; ratio = divide(count(case_number where subject_weapon = 'knife'), count(case_number where subject_weapon = 'toy handgun')) where subject_statuses = 'Shoot and Miss'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: List all cases from the year 2012 in which the subject was deceased case refers to case_number; year 2012 refers to date between '2012-01-01' and '2012-12-31'; subject was deceased refers to subject_statuses = 'Deceased'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Of all male officers, what percentage are black officers? male refers to gender = 'M'; black refers to race = 'B'; percentage = divide(count(officers where race = 'B'), count(officers)) where gender = 'M' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: How many incidents in which the subject's weapon was a vehicle were investigated by a female officer? subject's weapon was a vehicle refers to subject_weapon = 'Vehicle'; female refers to gender = 'F'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: In how many cases where the subject was a female was the subject's status listed as Deceased?  female refers to gender = 'F'; subject's status listed as Deceased refers to subject_statuses = 'Deceased'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Of the black officers, how many of them investigated cases between the years 2010 and 2015? black refers to race = 'B'; between the years 2010 and 2015 refers to date between '2010-01-01' and '2015-12-31'; case refers to case_number"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: How many instances were found in June 2015? in June 2015 refers to date between '2015-06-01' and '2015-06-30'; record number refers to case_number"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: How many people were injured between 2006 and 2014 as a result of a handgun? injured refers to subject_statuses = 'injured'; between 2006 and 2014 refers to date between '2006-01-01' and '2013-12-31'; handgun refers to subject_weapon = 'handgun'; where the incidents took place refers to location"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What is the most common type of weapon that causes death? the most common type of weapon refers to max(count(subject_weapon)); causes death refers to subject_statuses = 'Deceased'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What is the proportion of white males and females in the police force? white refers to race = 'W'; male refers to gender = 'M'; female refers to gender = 'F'; proportion of white males = divide(count(officers where race = 'W' and gender = 'M'), count(officers)) * 100%; proportion of white females = divide(count(officers where race = 'W' and gender = 'F'), count(officers)) * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: How many more black female victims than white female victims were discovered? black refers to race = 'B'; female refers to gender = 'F'; white refers to race = 'W'; result = subtract(count(victims where race = 'B'), count(victims where race = 'W')) where gender = 'F'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What percentage of deaths were caused by rifles? rifle refers to subject_weapon = 'rifles'; death refers to subject_statuses = 'Deceased'; percentage = divide(count(incidents where subject_weapon = 'rifles'), count(incidents)) where subject_statuses = 'Deceased' * 100%"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Which type of weapon was used to attack the victim in the record number 031347-2015? What is the victim's race and gender? type of weapon refers to subject_weapon; record number 031347-2015 refers to case_number = '031347-2015'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: Which near-death incident did a policeman by the name of Ruben Fredirick look into? What is the victim in this incident's race and gender? near-death refers to subject_statuses = 'Deceased Injured'; incident refers to case_number; Ruben Fredirick refers to full_name = 'Ruben Fredirick'"
shooting,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE incidents (
case_number text,
date date,
location text,
subject_statuses text,
subject_weapon text,
subjects text,
subject_count integer,
officers text,
PRIMARY KEY (case_number),
);
CREATE TABLE officers (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
CREATE TABLE subjects (
case_number text,
race text,
gender text,
last_name text,
first_name text,
full_name text,
FOREIGN KEY (case_number) REFERENCES incidents(case_number),
);
---------------------
QUESTION: What proportion of male police officers looked into events where people were injured? male refers to gender = 'M'; people were injured refers to subject_statuses = 'Injured'; proportion = divide(count(case_number where gender = 'M'), count(case_number)) where subject_statuses = 'Injured' * 100%"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: For the genes that are located in the plasma membrane, please list their number of chromosomes."
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: How many non-essential genes are located in the nucleus?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Among the genes with nucleic acid metabolism defects, how many of them can be found in the vacuole?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Please list the location of the genes that have the most chromosomes."
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: What are the functions of the pair of genes that have the lowest expression correlation score?a"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Among the pairs of genes that are not from the class of motorproteins, how many of them are negatively correlated? If Expression_Corr < 0, it means the negatively correlated"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Please list the motif of the genes that are located in the cytoplasm and have 7 chromosomes."
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: How many pairs of positively correlated genes are both non-essential? If Expression_Corr > 0, it means the expression correlation is positive"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: If a pair of genes is positively correlated, what is the possibility of it being composed of two genes both with over 10 chromosomes? Positively correlated means Expression_Corr > 0; Possibility = count(the pairs of genes with both chromosomes over 20) / count(pairs of genes that are positively correlated)"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: For the pairs of genes both from the class ATPases, what is the average expression correlation score?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Lists all genes by identifier number located in the cytoplasm and whose function is metabolism."
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: How many different genes do we have if we add those located in the plasma and in the nucleus?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated? If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: What percentage of genes located in the cytoskeleton are of unknown class? And of these, how many are not conditional phenotypes? Percentage = count(genes located in the cytoskeleton unknown class) / count(genes located in the cytoskeleton) * 100%"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: List all genes whose interaction is with genes located in the nucleus in which it is positively correlated. If the Expression_Corr value is positive then it's positively correlated"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Taking all the essential genes of the transcription factors class located in the nucleus as a reference, how many of them carry out a genetic-type interaction with another gene? List them."
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Of all the nonessential genes that are not of the motorprotein class and whose phenotype is cell cycle defects, how many do not have a physical type of interaction?"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Of the genes whose phenotype and motif are nucleic acid metabolism defects, PS00107, what percentage perform positive interaction with another gene? Percentage of no interaction = [count(nucleic acid metabolism, PS00107, no interaction) / count(nucleic acid metabolism, PS00107) * 100%"
genes,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Classification (
GeneID text,
Localization text,
PRIMARY KEY (GeneID),
);
CREATE TABLE Genes (
GeneID text,
Essential text,
Class text,
Complex text,
Phenotype text,
Motif text,
Chromosome integer,
Function text,
Localization text,
FOREIGN KEY (GeneID) REFERENCES Classification(GeneID),
);
CREATE TABLE Interactions (
GeneID1 text,
GeneID2 text,
Type text,
Expression_Corr real,
FOREIGN KEY (GeneID1) REFERENCES Classification(GeneID),
FOREIGN KEY (GeneID2) REFERENCES Classification(GeneID),
);
---------------------
QUESTION: Which negatively correlated, genetically interacting genes are non-essential? What percentage do they represent with respect to those that are essential? If the Expression_Corr value is negative then it's negatively correlated; Percentage of Essensity = [count(negatively correlated, genetical interaction, non-essential) / count(negatively correlated, genetical interaction, non-essential+negatively correlated, genetical interaction, essential)] * 100%"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many apps were last updated in January of 2018? Please write one translated review with positive sentiment for each app, if there's any. updated in January of 2018 refers to Last Updated BETWEEN 'January 1, 2018' and 'January 31, 2018';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many users mildly likes the 7 Minute Workout app and when was it last updated? mildly likes the app refers to Sentiment_Polarity> = 0 and Sentiment_Polarity<0.5;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store. user holds neutral attitude refers to Sentiment = 'Neutral';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the name and category of the app with the highest amount of -1 sentiment polarity score? highest amount of -1 sentiment polarity score refers to MAX(Count(Sentiment_Polarity = 1.0))"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at. average sentiment polarity score = AVG(Sentiment_Polarity); age group the app is target at refers to Content Rating;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have? lowest sentiment polarity score refers to MIN(Sentiment_Polarity); user dislike the app pretty much refers to Sentiment_Polarity<-0.5; number of downloads it has refers to installs;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: For the Akinator app, how many reviews have sentiment subjectivity of no more than 0.5 and what is its current version? Sentiment_Subjectivity<0.5; current version refers to Current Ver;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many apps have rating of 5? FALSE;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What are the top 5 installed free apps? free app refers to price = 0; most installed app refers to MAX(Installs);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Name the top 10 most reviewed apps. most reviewed app refers to MAX(Reviews);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many of the users hold neutral attitude on ""10 Best Foods for You"" app and what category is this app? neutral attitude refers to Sentiment = 'Neutral';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What are the apps that users pretty like this app and how many installs amount of these apps? users pretty much likes the app refers to Sentiment_Polarity = 'Positive';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List apps whose rating is 3.9 and state the translated review of each app. lowest rating refers to Rating = 1;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many apps that are only compatible with Android ver 8.0 and above? List down the users' sentiment of these apps. compatible with android refers to Android Ver; Android Ver"" = '8.0 and up';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which apps have multiple genres and what is the total sentiment subjectivity of these apps? multiple genres refers to COUNT(Genres>1; total sentiment subjectivity = Sum(Sentiment_Subjectivity);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which apps have not been updated since year 2015 and what kind of sentiment users hold on it? since year 2015 refers to ""Last Updated""<'January 1, 2015';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the total installs of apps with content rating of adults only 18+ and what are the translated reviews of it? total installs = SUM(Installs);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which of the app is the best selling app and what is the sentiments polarity of it? best selling app = MAX(MULTIPLY(Price, Installs));"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average rating of comic category apps? How many users hold positive attitude towards this app? average rating = AVG(Rating where Category = 'COMICS'); number of users who hold a positive attitude towards the app refers to SUM(Sentiment = 'Positive');"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the rating for ""Draw A Stickman""? Draw A Stickman refers to App = 'Draw A Stickman';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many of the reviews for the app ""Brit + Co"" have a comment? Brit + Co refers to App = 'Brit + Co'; comment refers to Translated Review NOT null;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List the top 5 shopping apps with the most reviews. shopping apps refers to Genre = 'Shopping'; most reviews refers to MAX(Reviews);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many neutral reviews does the app ""Dino War: Rise of Beasts"" have? neutral reviews refers to Sentiment = 'Neutral';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What are the apps with only 5,000+ installs? Installs = '5,000+';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List all the negative comments on the ""Dog Run - Pet Dog Simulator"" app. negative comment refers to Sentiment = 'Negative';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which free app has the most Negative comments? paid app refers to Type = 'Paid'; negative comment refers to Sentiment = 'Negative'; paid app with most negative comments refers to MAX(COUNT(Sentiment = 'Negative')) where Type = 'Paid';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How many negative comments are there in all the apps with 100,000,000+ installs? negative comment refers to Sentiment = 'Negative'; Installs = '100,000,000+';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What are the content ratings for the apps that have ""gr8"" in their comments? app with gr8 in their comments refers to Translated_Review LIKE '%gr8%';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the total Sentiment polarity score of the most expensive app? total sentiment polarity score = sum(Sentiment_Polarity); most expensive app refers to MAX(Price);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the rating for ""Garden Coloring Book""? List all of its reviews. Golfshot Plus: Golf GPS refers to App = 'Golfshot Plus: Golf GPS'; review refers to Translated_Review;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which Photography app has the highest total Sentiment subjectivity score? Photography app refers to Genre = 'Photography'; highest total sentiment subjectivity score = MAX(sum(Sentiment_Subjectivity));"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List all the comments on the lowest rated Mature 17+ app. comments refers to Translated_Review; lowest rated refers to Rating = 1; Mature 17+ refers to Content Rating = 'Mature 17+ ';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the number of installments of the app with the highest total Sentiment polarity score? installments refers to Installs; highest total sentiment polarity score = MAX(SUM(Sentiment_Polarity));"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the number of neutral comments from all the weather apps? neutral comments refers to Sentiment = 'Neutral'; weather app refers to Genre = 'Weather';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which 1,000,000,000+ intalls apps has the most no comment reviews? no comment refers to Translated_Review = 'nan'; most no comment reviews = (MAX(COUNT(Translated_Review = 'nan')));"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the rating and the total Sentiment subjectivity score of ""Onefootball - Soccer Scores""? Onefootball - Soccer Scores refers to App = 'Onefootball - Soccer Scores';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What percentage of no comment reviews are from ""Teen"" content rating apps? no comment refers to Translated_Review = 'nan'; percentage = DIVIDE((SUM(Content Rating = 'Teen')), COUNT(*));"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which apps have 5 rating? List out then application name. application name refers to App;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which apps have been reviewed more than 75 000 000 times and the content is suitable for teenagers? Reviews>75000000; suitable for teenagers refers to Content Rating = 'Teen';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List out genre that have downloads more than 1000000000. downloads and installs are synonyms; Installs = '1,000,000,000+';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average price for a dating application? average price = AVG(Price where Genre = 'Dating'); dating application refers to Genre = 'Dating';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average download for entertainment apps with size no more than 1.0 M? downloads and installs are synonyms; entertainment apps refers to Category = 'ENTERTAINMENT';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average review number for application with 5 rating? average review = AVG(Review); application refers to app; Rating = 5;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List out the top 3 genre for application with a sentiment review greater than 0.5. sentiment review refers to Sentiment_Polarity; Sentiment_Polarity>0.5;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the percentage of application with 4.7 rating having more positives sentiment than negative sentiment? percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative')), SUM(Sentiment = 'Negative')) as percentage; having more positive sentiment than negative sentiment refers to Sentiment = 'Positive'>Sentiment = 'Negative';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List down app that does not have negative sentiment and give their average rating? doest not have negative sentiment refers to Sentiment! = 'Negative'; average = AVG(Sentiment_Polarity);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List down application that have not been updated since 2015. What is the percentage of this application having more negative sentiment than positive sentiment? percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), (SUM(Sentiment = 'Negative')) as percent; Last Updated>'2015';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the percentage for free application with a rating 4.5 and above have not been updated since 2018? paid refers to Type = 'Paid'; application refers to App; Rating>4.5; Last Updated>'2018; percentage = DIVIDE(SUM(Genres = 'Mature 17+' and Rating>4.5 and substr(""Last Updated"",-4,4)>'2018' )), (COUNT(App)) as percent;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What genre does Honkai Impact 3rd belong to? Honkai Impact 3rd is the App;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List down the rating for the App Learn C++. FALSE;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average price of games belonging in the arcade genre which has a content rating of Everyone 10+? average price = AVG(Price);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How much is the size of Browser 4G and how many users have a pretty positive favorability on it? Browser 4G is the App; pretty positive favorability refers to Sentiment_Polarity score = 0.5"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Name the Apps with a sentiment objectivity of 0.3 and include their number of installs. FALSE;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: How much is the average sentiment polarity score of Golf GPS Rangefinder: Golf Pad and what is it's rating in the Google Play Store? average sentiment polarity score = AVG(Sentiment_Polarity); Golf GPS Rangefinder: Golf Pad  is the App;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List the top 5 lowest rated puzzle games and count the number of negative sentiments the games received. lowest rating refers to MIN(Rating); puzzle is the genre;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the percentage ratio between positive sentiments and negative sentiments that are in Fate/Grand Order? Also indicate the current version. Fate/Grand Order is the App; percentage ratio = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative'))), 100);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security. FREEDOME VPN Unlimited anonymous Wifi Security is the App; percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*))), 100)"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to? highest sentiment polarity score refers to MAX(Sentiment_Polarity);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the rating of Dragon Ball Legends and how many users dislike this App? Dragon Ball Legends is the app; users who dislikes the app refers to Sentiment_Polarity<-0.5;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Which education App has the worst rating and state the translated review if available. education App refers to Category = 'EDUCATION'; worst rated app refers to Rating = 1;"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: List all free sports Apps and their translated review. paid sports Apps refers to type = 'Paid' and Category = 'SPORTS';"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: Among the role playing game genre, how many are targeted to teens and what is their average sentiment polarity score? targeted to teen refers to Content Rating = 'Teen'; average = AVG(Sentiment_Polarity);"
app_store,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE playstore (
App text,
Category text,
Rating real,
Reviews integer,
Size text,
Installs text,
Type text,
Price text,
Content Rating text,
Genres text,
);
CREATE TABLE user_reviews (
App text,
Translated_Review text,
Sentiment text,
Sentiment_Polarity text,
Sentiment_Subjectivity text,
FOREIGN KEY (App) REFERENCES playstore(App),
);
---------------------
QUESTION: What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews? average rating = AVG(Rating); percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*)), 100));"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region has the most number of sales team? the most number of sales team refers to MAX(COUNT(Sales Team));"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the customers with name containing the word 'Group'. name containing the word 'Group' refers to Customer Names LIKE '%Group%';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average median income for all City type of stores? AVG(Median Income) where Type = 'City';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the sales team and the region of order number 'SO - 000137'."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses' MAX(Discount Applied) where Product Name = 'Cocktail Glasses'; orders in 2020 refer to the OrderDate between 01-01-2020 and 31-12-2020;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the order numbers for In-Store sales and find the city where the store is located. In-Store sales refer to Sales Channel = 'In-Store'; city refers to City Name;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the most expensive ordered? Who, when was it ordered? the most expensive refers to MAX(Unit Cost); who refers to Customer Names; when refers to OrderDate;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the numbers ordered by 'Rochester Ltd' in 2018. Rochester Ltd is the name of the customer; all the numbers ordered refer to OrderNumber; 2018 refers to SUBSTR(OrderDate, -2) = '18';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order. all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to Product Name;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the name of all customers who had made orders online. orders online refer to Sales Channel = 'Online';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average net profit for bakeware product. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bakeware';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the sales team name who had orders with the greatest net profit in 2020. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the greatest net profit in 2020 refers to MAX(net profit) where OrderDate LIKE '%/20';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Sate the order number and calculate the net profit for each order under Joshua Bennett. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); Joshua Bennett is the name of Sales Team;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the sales order shipped in July 2018, calculate the percentage of orders for home fragrances. shipped in July 2018 refers to ShipDate between 01-07-2018 and 31-07-2018; DIVIDE(COUNT(OrderNumber where Product Name = 'Home Fragrances' and SUBSTR(OrderDate, 1, 1) = '7'), COUNT(OrderNumber where SUBSTR(ShipDate, -2) = '18')) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the customer IDs and names that start with alphabet ""W"". names that start with alphabet ""W"" refer to Customer Names LIKE 'W%';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the product IDs and names that include the word ""Outdoor"". names that include the word ""Outdoor"" refer to Product Name LIKE '%Outdoor%';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the sales with 40% discount via in-store channel, how many products were shipped from warehouse code of WARE-NMK1003? 40% discount refers to Discount Applied = 0.4; in-store channel refers to Sales Channel = 'In-Store'; orders refer to OrderNumber;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Mention the most populated city and median income of the store in Florida state. most populated refers to Max(Population);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the ID, city and region of the stores which are in Allen country. ID refers to StoreID;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the ID, city, state and region for the store type which is fewer between borough and CDP. COUNT(StoreID) < COUNT(StoreID where Type = 'Borough') < COUNT(StoreID where Type = 'CDP');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the region and name of the sale team ID of 18 and compare their orders between in-store and online. sale team ID of 18 refers to _SalesTeamID = 18; COUNT(OrderNumber where Sales Channel = 'In-Store') > COUNT(OrderNumber where Sales Channel = 'Online');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the percentage of order via in-store channel of customer ""Medline"". Medline is the name of the customer; DIVIDE(COUNT(OrderNumber where Sales Channel = 'In-Store' and Customer Names = 'Medline'), COUNT(OrderNumber where Customer Names = 'Medline')) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the customer names and lasting delivery periods for the product of ""Bedroom Furniture"" by wholesale channel in 2019. delivery period in 2019 means time between placing of an order and the receipt of product and refers to SUBTRACT(DeliveryDate, OrderDate) where SUBSTR(OrderDate, -2 ) = '19'; Sales Channel = 'Wholesale'; Product Name = 'Bedroom Furniture';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the customer names and product names which had over 3800 USD in net profit. over 3800 USD in net profit refers to SUBTRACT(Unit Price, Unit Cost) where Net Profit > 3800;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the store located cities with regions in no water area of California state. cities refer to City Name; no water area refers to Water Area = 0;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the order percentage by ""Carlos Miller"" sales team. DIVIDE(COUNT(OrderNumber where Sales Team = 'Carlos Miller'), COUNT(OrderNumber)) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Compare the number of orders between ""Platters"" and ""Serveware"" products. COUNT(OrderNumber where Product Name = 'Platters') > COUNT(OrderNumber where Product Name = 'Serveware');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total net profit of the store located in highest median income city. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); highest median income city refers to City Name where MAX(Median Income);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit. sales team ID of one digit refers to _SalesTeamID BETWEEN 1 AND 9; numbers of orders refer to COUNT(OrderNumber);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders have order date in 5/31/2018? orders refer to OrderNumber;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the name of orders which have delivery date of 6/13/2018."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders placed were with more than 5 product quantities? orders refer to OrderNumber; more than 5 product quantities refer to Order Quantity > 5;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the full name of state code ""GA""."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many states located in the Midwest region?"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the product name of order which has unit cost of 781.22."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the delivery date of cookware. Cookware is the name of the product;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many furniture cushions orders which have date of order in 2018? furniture cushions orders refer to OrderNumber where Product Name = 'Furniture Cushions'; date of order in 2018 refers to SUBSTR(OrderDate, -2) = '18'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the name of products which have been applied 10% discount. applied 10% discount refers to Discount Applied = 0.1;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average net profit of phones which have sales channel of distributor. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Phones' and Sales Channel = 'Distributor';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average net profit of bar tools which has ordered quantity exceed 5. net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the city name of states located in South region."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the region of stores which have type of ""Town"" in the list?"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders that Medsep Group had made? Medsep Group is the name of the customer; orders refer to OrderNumber;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the discount levels applied for all orders from Ole Group. Ole Group is the name of the customer; discount levels applied refer to Discount Applied NOT NULL;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the customer name of orders which has shipped date in 7/8/2018. shipped date in 7/8/2018 refers to ShipDate = '7/8/18'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the orders placed by Ei, how many orders have quantity greater than 4? Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the orders placed by Pacific Ltd, how many orders have been applied 5% discount ? orders by Pacific Ltd refer to OrderNumber where Customer Names = 'Pacific Ltd'; applied 5% discount refers to Discount Applied = 0.05;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the customer names of orders which have unit cost greater than 4000USD? unit cost greater than 4000USD refers to Unit Cost > 4000;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the id and detailed position of all stores in Birmingham city. Latitude and Longitude coordinates can be used to identify the detailed position of stores; id refers to StoreID;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which city has the largest population? city has the largest population refers to City Name where MAX(Population);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many CDP stores are there in California? California is a state; CDP stores refer to StoreID where Type = 'CDP';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please give the order number and product name of the order which has the lowest unit price. the lowest unit price refers to MIN(Unit Price);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product has the highest net profit in 2019? net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the highest net profit in 2019 refers to MAX(Net Profit) where OrderDate LIKE '%/19'; product refers to Product Name;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average unit price of a Cookware product? AVG(Unit Price where Product Name = 'Cookware');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list all sale team names which had orders on 5/31/2018. had orders on 5/31/2018 refer to OrderDate = '5/31/18'; sale team names refer to Sales Team;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which sales team name has the least orders in 2019? sale team names refer to Sales Team; the least orders in 2019 refer to MIN(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '19'));"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: From 2018 to 2020, which year did the George Lewis group have the highest number of orders? George Lewis refers to Sales Team; the highest number of orders refers to MAX(COUNT(OrderNumber)); which year from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the percentage of total orders from stores in Orange County in 2018? DIVIDE(COUNT(OrderNumber where County = 'Orange County' and SUBSTR(OrderDate, -2) = '18'), COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18')) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which order number has the highest unit price? the highest unit price refers to MAX(Unit Price);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which sales team id has the highest number of orders in 2018? the highest number of orders in 2018 refers to MAX(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18'));"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the unit cost of order SO - 000103? OrderNumber = 'SO - 000103';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In 2020, what were the total orders of all stores in Maricopa County? total orders refer to COUNT(OrderNumber); 2020 refers to SUBSTR(OrderDate, -2) = '20';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the detailed position of the store which has order SO - 000115? Latitude and Longitude coordinates can be used to identify the detailed position of stores; store refers to StoreID WHERE OrderNumber = 'SO - 000115';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please calculate the total number of orders by each city in 2019. total number of orders refers to COUNT(OrderNumber); 2019 refers to OrderDate between 01-01-2019 and 31-12-2019; city refers to City Name;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the names of customers who have total orders of over 3 in 2018. total orders of over 3 in 2018 refer to COUNT(OrderNumber) > 3 where SUBSTR(OrderDate, -2) = '18';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What were the total orders of Medsep Group from 2018 to 2020? Medsep Group is the name of the customer; total orders refer to COUNT(OrderNumber); from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the customer names whose order quantity was more than 5 on 6/1/2018. order quantity was more than 5 on 6/1/2018 refers to Order Quantity > 5 where OrderDate = 6/1/2018;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the percentage of total orders of Stephen Payne that had a net profit of over 1000? Sales Team = 'Stephen Payne'; net profit can be computed as SUBTRACT(Unit Price, Unit Cost); DIVIDE(COUNT(OrderNumber where Sales Team = 'Stephen Payne' and Net Profit > 1000)), (COUNT(OrderNumber where Sales Team = 'Stephen Payne')) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales team were from Northeast? Northeast is the name of the region;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the name of all city in Maricopa County along with its latitude and longitude."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which order have the highest unit cost? order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the name of products with the ID of 30 to 40. products with the ID of 30 to 40 refer to Product Name WHERE ProductID BETWEEN 30 AND 40;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate ratio between the highest unit cost and the lowest unit cost? ratio can be calculated as DIVIDE(MAX(Unit_Cost)), MIN(Unit Cost);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product was ordered the most in 2018? product refers to Product Name; ordered the most in 2018 refers to MAX(COUNT(OrderNumber)) where SUBSTR(OrderDate, -2) = '18';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products sold by Adam Hernandez? products sold by Adam Hernandez refer to SUM(Order Quantity where Sales Team = 'Adam Hernandez');"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all orders where its products were shipped from Daly City. shipped from Daly City refers to Store Locations where City Name = 'Daly City'; orders refer to OrderNumber;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders made by Rochester Ltd? Rochester Ltd is the name of the customer; orders refer to OrderNumber;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the order number where Qualitest ordered the highest product quantity. Qualitest ordered the highest product quantity refers to Customer Names where MAX(Order Quantity);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the order for all in-store sales along with the products sold. orders for all in-store sales refer to OrderNumber where Sales Channel = 'In-Store'; products refer to Product Name;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many online sales were made in May 2018 where products were shipped from Norman? online sales refer to OrderNumber where Sales Channel = 'Online'; May 2018 refers to OrderDate LIKE '5/%/18'; Norman is the name of the city;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products sold in Maricopa County, which was the least sold? the least sold product refers to Product Name where MIN(Order Quantity);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State all the order numbers for sales team of Samuel Fowler."
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the number of baseball ordered in December 2017. Product Name = 'Baseball'; December 2017 refers to OrderDate LIKE '12/%/17';"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the average number of ornaments sold each month in 2018. DIVIDE(SUM(Order Quantity where Product Name = 'Ornaments' and OrderDate LIKE '%/18'), 12);"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the percentage of products that were shipped from Burbank in 2018? DIVIDE(SUM(Order Quantity where City Name = 'Burbank' and SUBSTR(OrderDate, -2) = '18')), (SUM(Order Quantity where SUBSTR(OrderDate, -2) = '18')) as percentage;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the difference in order number from ""WARE-MKL1006"" and ""WARE-NBV1002""? ""WARE-NBV1002"" and ""WARE-MKL1006"" are both WarehouseCode; difference in order number = Subtract(Count(OrderNumber where WarehouseCode = 'WARE-MKL1006'), Count(OrderNumber where WarehouseCode = 'WARE-NBV1002'))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the product names delivered in 2021 for the customer ""Sundial"". delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the store IDs and region of the state ""Michigan"". ""Michigan"" is the State"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Compare the total number of orders between customer ""Apollo Ltd"" and ""Pacific Ltd"". ""Apollo Ltd"" and ""Pacific Ltd"" are both Customer Names; total number of orders refers to COUNT(OrderNumber)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the store ID with more orders between ""Aurora"" and ""Babylon"" city. ""Aurora"" refers to City Name = 'Aurora (Township)'; ""Babylon"" refers to City Name = 'Babylong (Town)'; more order refers to Max(Count(OrderNumber))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the customer names and product names of the order made by ""Anthony Torres"" via distributor channel. ""Anthony Torres"" is the name of Sales Team; distributor channel refers to Sales Channel = 'Distributor'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel. IDs refers to CustomerID; total net profit of above 5000 USD refers to SUM(Subtract(Unit Price, Unit Cost)) > 5000"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the net profit of the floral products which were delivered in 2021. floral product refers to Product Name = 'Floral'; total net profit = SUM(Subtract(Unit Price, Unit Cost)); delivered in 2021 refers to DeliveryDate LIKE '%/21'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Count the number of orders made from the store in city with population of 3000000 to 4000000. number of order refers to OrderNumber; population of 3000000 to 4000000 refers to Population BETWEEN 3000000 AND 4000000"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the products via wholesale channel of the store under Pacific/Honolulu time zone. products refers to Product Name; via wholesale channel refers to Sales Channel = 'Wholesale'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the order numbers and product names which were ordered on 6th June, 2018. ordered on 6th June 2018 refers to OrderDate = '6/5/18'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020. ""Weimei Corp"" is the Customer Names; in 2018, 2019 and 2020 refers to SUBSTR (OrderDate, -2) IN ('18', '19', '20') : Average order = Divide (Count (OrderNumber), 3)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average monthly order and percentage of warehouse ""WARE-NMK1003"" in 2019. Among them, mention number of orders for floor lamps. ""WARE-NMK1003"" is the WarehouseCode; in 2019 refers to SUBSTR(OrderDate, -2) = '19'; average = Divide (Count (OrderNumber where SUBSTR(OrderDate, -2) = '19'), 12); Percentage = Divide (Count(OrderNumber where WarehouseCode = 'WARE-NMK1003'), Count(OrderNumber)) * 100; 'Floor Lamps' is the Product Name; number of orders refers to Count(OrderNumber)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the procured dates for the customer whose ID is 11. ID is 11 refers to _CustomerID = 11;"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders through distributor were for the minimum quantity? ""Distributor"" is the Sales Channel; minimum quantity refers to Min(Order Quantity)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List by ID all sales teams that have sold products at a 10% discount in store. ID refers to _SalesTeamID; 10% discount refers to Discount Applied = 0.1; 'In-Store' is the Sales Channel"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million? ""Brooklyn"" is the CityName; population of less than 3 million refers to Population < 3000000"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many states are in the Midwest region?"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the top 10 products with the highest net profit? products refers to Product Name; highest net profit = Max(Subtract(Unit Price, Unit Cost))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the name of the customers who have placed an order of 3 units in February 2018. name of customer refers to Customer Names; order of 3 unit refers to Order Quantity = 3; in February 2018 refers to OrderDate LIKE '2/%/18'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of the sales teams that have served to customer Apotheca, Ltd? name of sales team refers to Sales Team; 'Apotheca, Ltd' is the Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse? ""WARE-UHY1004"" is the WarehouseCode"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the cities where Shawn Torres sells Audio products. ""Shawn Torres"" is the name of Sales Team; Audio product refers to Product Name = 'Audio'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19. ordered on 10/21/18 refers to OrderDate = '10/21/18'; delivered on 11/21/19 refers to DeliveryDate = '11/21/19'; name of product refers to Product Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many stores procured products on October 27, 2018, in the city of Oregon? October 27, 2018 refers to ProcuredDate = '10/27/18'; 'Oregon' is the State"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What sales channels are used the most in the 3 places with the highest median income? highest median income refers to Max(Median Income)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the 5 sales teams that have made sales with the highest net profits. highest net profit = Max(Subtract (Unit Price, Unit Cost))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036. highest discount applied refers to Max(Discount Applied)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many different time zones are there in the Northeast region?"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What type of store is most popular in the South? in the South refers to Region = 'South'; type of store that is most popular refers to Max(Count(Type))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong? ""WARE-MKL1006"" is the WarehouseCode; most shipment to region refers to Max(Count(Region))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In which city is the store with the highest sales order unit price located? highest sales order unit price refers to Max(Unit Price)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many online purchases did Ole Group make in May 2019? ""Ole Group"" is the Customer Names; online purchase refers to Sales Channel = 'Online'; made in May 2019 refers to OrderDate LIKE '5/%/19'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County? less need for products refers to Order Quantity = 1; purchased through a distributor refers to Sales Channel = 'Distributor'; 'Harri County' is the County"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the least purchased product by stores in the city of Santa Clarita? least purchased product refers to Min(Count(Product Name)); 'Santa Clarita' is the City"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times? WARE-PUJ1005 is the WarehouseCode; fewest times refers to Min (Count(WarehouseCode))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What percentage of sell orders on 04/04/2020 were for the state of New York? sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is  the City Name; percentage = Divide (Sum(OrderNumber where City Name = 'New York'), Count (OrderNumber)) * 100"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average land area of ​​the cities in which stores that purchased products for a unit price of 998.30 are located? average land area = Divide (Sum(Land Area), Count(Land Area))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average household income in cities in the state of New Hampshire where there are stores of the type city? ""New Hampshire"" is the State; average household income = AVG(Household Income)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales teams are there in the Midwest? ""Midwest"" is the Region"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate order numbers with an order date after 1/1/2018. order date after 1/1/2018 refers to OrderDate > '1/1/2018'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales channels does the sales team have in the Midwest? ""Midwest"" is the Region"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which sales team has the other with the highest unit price? highest unit price refers to Max(Unit Price)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which regions have online sales channels that have the most discounts? most discount refers to Max(Discount Applied)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date? ""Apollo Ltd"" is the Customer Names; most expensive unit price refers to max(Unit Price)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide order number, warehouse code of customers Elorac, Corp. ""Elorac, Corp"" is the Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name of customers who have ordered Cocktail Glasses by online sales channel. ""Cocktail Glasses"" is the Product Name; customer refers to Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which store in Arizona has the most net profit? ""Arizona"" is the name of State; most net profit = Max(Subtract( Unit Price, Unit Cost))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much more is the Florida store's computer product unit price than the Texas store? ""Florida"" and ""Texas"" are both the name of State; Computer product refers to Product Name = 'Computers; difference in unit price = Subtract (Unit Price where State = 'Florida', Unit Price where State = 'Texas')"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among sales teams in Midwest region, which sales team has an order quantity greater than 5? order quantity greater than 5 refers to Order Quantity > 5"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please indicate store id in the state of California that have been applied 20% discount in store. ""California"" is the name of State; in store refers to Sales Channel = 'In-Store'; 20% discount refers to Discount Applied = '0.2'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the name of the customer with the most number of order quantity from 2018 to 2020. name of customer refers to Customer Names; from 2018 to 2020 refers to OrderDate between '1/1/2018' and '31/12/2020'; most number of order quantity refers to Order Quantity = 8"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please indicate total order quantity of product Candles and calculate the percentage of such product among all the orders. total order quantity refers to Sum (Order Quantity); 'Candles' is the Products Name; percentage = Divide (Sum(Order Quantity where Product Name = 'Candles'), Sum(Order Quantity)) * 100"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region is Joshua Bennet located in? ""Joshua Bennett"" is the name of Sales Team"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the store id of the store located in the most populous county? most populous country refers to Max(Population)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales teams are there in the Midwest? ""Midwest"" is the Region"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the type of store located in the city with the highest amount of water area? type of store in City refers to Type = 'City'; highest amount of water area refers to Max(Water Area)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many online orders were shipped during the month of June 2018? online orders refers to Sales Channel = 'Online'; shipped during the month of June 2018 refers to SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-2) = '18'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much is the discount applied to the order with the highest unit price? highest unit price refers to Max(Unit Price)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the product with the highest net profit? highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of product refers to Product Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In the Northeast region, what is the average household income for each city located in the state with the highest number of stores? average household income = Divide (Sum(Household Income), Count(City Name)); highest number of store refers to Max(Count(StoreID))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In which region can you find the stores located in the state whose median income is no more than 30,000? median income no more than 30,000 refers to Median Income < 30,000"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In the West, how many stores are there in the city whose land area is below 20,000,000? ""West"" is the Region; land area is below 20,000,000 refers to Land Area < 20,000,000"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the customer who purchased the product with the highest net profiit? highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of customer refers to Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team. shipped refers to ShipDate; in 2019 refers to shipped in 2019 refers to SUBSTR(ShipDate, -2) = '19'; order in the said year refers to SUBSTR(OrderDate, -2) = '19'; highest number of order refers to Max(Count(OrderNumber))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products with an order quantity of no less than 5 that was shipped in the month of May 2019, what is the name of the product with the lowest net profit? order quantity of no less than 5 refers to Order Quantity > 5; shipped in the month of May 2019 refers to ShipDate LIKE '5/%/19'; lowest net profit = Min(Subtract(Unit Price, Unit Cost)); name of product refers to Products Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from? detailed coordinates refers to Latitude, Longitude; highest net profit = Max(Subtract(Unit Price, Unit Cost))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team. shipped refers to ShipDate; in 2020 refers to SUBSTR(ShipDate, -2) = '20'; highest amount of shipped orders refers to Max(Count(OrderNumber))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen? shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of Sales Team; average shipped orders per year = Divide (Count(OrderNumber), 3)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the amount of discount applied to the product with the highest net profit and what is the name of the said product? highest net profit refers to Max(Subtract(Unit Price, Unit Cost)); name of product refers to Product Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of the top 3 customers who paid the highest amount of price per order after discount? highest price per order after discount refers to Max(Subtract(Multiply (Unit Price, Order Quantity), Discount Applied)); name of customer refers to Customer Names"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which sales channel was most preferred in commercializing products in January 2020 based on the number of orders placed? order refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'; January refers to Substr(OrderDate, 1, 1) = '1';  most preferred sales channel refers to Sales Channel where Max(Count(OrderNumber))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the product that was registered in the sales order 'SO - 0005951'. sales order 'SO - 0005951' refers to OrderNumber = 'SO - 0005951'; product refers to Product Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the store location and sales team who processed the sales order 'SO - 0001004'. sales order 'SO - 0001004' refers to OrderNumber = 'SO - 0001004'; store location refers to City Name"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019. ""Gilbert"" is the City Name; 'Arizona' is the name of State; customer relationship in 2019 refers to ProcuredDate LIKE '%/19'; top net profit refers to Max(Subtract(Unit Price, Unit Cost))"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales orders were processed by the store located in Chandler in 2020? ""Chandler"" is the City Name; orders refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average household income of Glendale? ""Glendale"" is the City Name; Average household income refers to avg(Household Income)"
regional_sales,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Customers (
CustomerID integer,
Customer Names text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Products (
ProductID integer,
Product Name text,
PRIMARY KEY (ProductID),
);
CREATE TABLE Regions (
StateCode text,
State text,
Region text,
PRIMARY KEY (StateCode),
);
CREATE TABLE Sales Team (
SalesTeamID integer,
Sales Team text,
Region text,
PRIMARY KEY (SalesTeamID),
);
CREATE TABLE Store Locations (
StoreID integer,
City Name text,
County text,
StateCode text,
State text,
Type text,
Latitude real,
Longitude real,
AreaCode integer,
Population integer,
Household Income integer,
Median Income integer,
Land Area integer,
Water Area integer,
Time Zone text,
PRIMARY KEY (StoreID),
FOREIGN KEY (StateCode) REFERENCES Regions(StateCode),
);
CREATE TABLE Sales Orders (
OrderNumber text,
Sales Channel text,
WarehouseCode text,
ProcuredDate text,
OrderDate text,
ShipDate text,
DeliveryDate text,
CurrencyCode text,
_SalesTeamID integer,
_CustomerID integer,
_StoreID integer,
_ProductID integer,
Order Quantity integer,
Discount Applied real,
Unit Price text,
Unit Cost text,
PRIMARY KEY (OrderNumber),
FOREIGN KEY (_SalesTeamID) REFERENCES Sales Team(SalesTeamID),
FOREIGN KEY (_CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (_StoreID) REFERENCES Store Locations(StoreID),
FOREIGN KEY (_ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What was the best discount applied to sales orders in 2020? sales orders in 2020 refers to Substr(OrderDate, -2) = '20'; best discount applied refers to Max(Discount Applied)"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the most consecutive games tied by Ebbsfleet as an away team in the 2008 season? consecutive games mean happen one after the other without interruption and refer to Date; tied refers to FTR = 'D';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Of all the divisions in the world, what percentage of them belong to England? DIVIDE(COUNT(division where country = 'England'), COUNT(division)) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What percentage of games won, games lost and games drawn does Cittadella have as a home team in total? Percentage of games won = DIVIDE(COUNT(FTR = 'H' where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage; Percentage of games lost = DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Cittadella')), COUNT(Div where HomeTeam = 'Cittadella') as percentage; percentage of games drawn = DIVIDE(SUM(FTR = 'D'where HomeTeam = 'Cittadella'), COUNT(Div where HomeTeam = 'Cittadella')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Of all the teams that played as a team away against Caen in the 2010 season, which one has the highest winning percentage? Caen refers to HomeTeam; which one refers to AwayTeam; the highest winning percentage = MAX(DIVIDE(COUNT(FTR = 'A' where HomeTeam = 'Caen', season = '2010')), COUNT(Div where HomeTeam = 'Caen', season = '2010')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What percentage of matches played on 2005/07/30 belong to the F1 division? Division refers to Div; DIVIDE(COUNT(Div = 'F1', Date = '2005/07/30'), COUNT(Div, Date = '2005/07/30')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What percentage of all tied games did the Sassuolo team play in? tied games refer FTR = 'D'; DIVIDE(COUNT(Div where FTR = 'D', HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo'), COUNT(Div where HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the percentage whereby the away team scored 2 goals during the 2017 seasons? scored 2 goals refers to FTAG = 2, which is short name for Final-time Away-team Goals; DIVIDE(COUNT(Div where season = 2017, FTAG = '2'), COUNT(Div where season = 2017)) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the name of all the teams that played in the EFL League One division? all the teams include both HomeTeam and AwayTeam; name = 'EFL League One'; DIV = 'E2';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many teams playing in divisions in Greece have ever scored 4 or more goals? teams include both HomeTeam and AwayTeam; country = 'Greece'; scored 4 or more goals refer to FTAG≥4, which is short name for Final-time Away-team Goals;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2? matches refer to Div; Scottish Championship is a name of the league; equal result of 2-2 refers to FTAG = 2 AND FTHG = 2;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons? local team refers to HomeTeam; Scottish means belong to the country = 'Scotland'; scored 10 goals refer to FTHG = 10, which is short name for Final-time Away-team Goals;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: From the Spanish LaLiga division in the 2017 season, which team won the most times as a local team and by what percentage? local team refers to HomeTeam; Spanish means belong to the country = 'Spain'; LaLiga is a name of division; won as a local team refers to FTR = 'H', where H stands for home victory; DIVIDE(COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017, FRT = 'H'), COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017)) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions? matches = Div"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the highest final-time score across all divisions in the 2021 season? Which team was the team that made up that score? MAX(SUM where FTHG, FTAG, season = 2021);"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the name of the home team in division P1 with the highest final time goal in all seasons? the highest final time goal refers to MAX(FTHG); P1 = Div;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What was the difference in home team and away team win percentages across all divisions in 2010? 2010 refers to season = 2010; SUBTRACT(DIVIDE(COUNT(Div where FTR = 'H', season = 2010), COUNT(Div where season = 2010)), COUNT(Div where FTR = 'A', season = 2010), COUNT(Div where season = 2010)) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which division had the most draft matches in the 2008 season? the most draft matches refer to MAX(COUNT(Div)) where FTR = 'D';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team won the match in the EC division on January 20, 2008 at home? won at home refers to FTR = 'H'; January 20, 2008 refers to Date = '2008-01-20'; EC division refers to Div = 'EC';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the name of the division in which Club Brugge and Genk competed on September 13, 2009? September 13, 2009 refers to Date = '2009-09-13'; Club Brugge refers to HomeTeam; Genk refers to AwayTeam;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many matches were played in the Scottish Premiership division from 2006 to 2008? Scottish Premiership is a name of division; from 2006 to 2008 means seasons between 2006 and 2008;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong? FALSE;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which away team in the division of Bundesliga has the highest final time goals? Bundesliga is a name of division; the highest final time goals refers to MAX(FTAG);"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Please provide the names of any three away teams that competed in the Italian divisions. Italian means belong to country = 'Italy"";"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What is the name of the division that has had the lowest number of draft matches in the 2019 season? the lowest number of draft matches refers to MIN(COUNT(FTR = 'D'));"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many times did Valencia's home team win in the LaLiga division? LaLiga is a name of the division; Valencia's home team refers to HomeTeam = 'Valencia'; win refers to FTR = 'H';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: In how many matches in the Seria A division did both teams have equal goals? Seria A is a name of division; equal goals refers to FTR = 'D', where D stands for draft;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many football divisions does England have? England is the name of country;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What's the name of the football division in the Netherlands? Netherlands is the name of country;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Who is the winner of the game happened on 2009/10/10, between ""East Fife"" and ""Dumbarton""? 2009/10/10 is a date; the winner refers to FTR = 'A'; East Fife and Dumbarton are name of teams where HomeTeam = 'East Fife'; AwayTeam = 'Dumbarton';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What was the final score for the game Bursaspor vs Denizlispor on 2009/4/26? Bursaspor vs Denizlispor are names of teams where HomeTeam = 'Bursaspor' and AwayTeam = 'Denizlispor'; Date = '2009-04-26'; final score refers to FTHG, FTAG;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: When did the first match that score more than 10 goals happen? score more than 10 goals refers to SUM(FTHG, FTAG)>10, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; the first means the earliest and refers to MIN(Date);"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: For the Ligue 2 game that made the most goals, who is the winner of that game? Ligue 2 is the name of division; the most goals refer to MAX(SUM(FTHG, FTAG)) which are short names for Final-time Home-team Goals and Final-time Away-team Goals; winner refers to FTR = 'A';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many Away Victories happened on 2016/3/27 in the LaLiga 2 division? Away victories refer to FTR = 'A'; LaLiga 2 is the name of division; Date = '2016-03-27';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many draw games happened on 2018/8/7 for National League? National League is the name of division; Date = '2018-08-07'; draw refers to FTR = 'D'; games refer to Div;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which country had the game that Away team made the most goals? the most goals refer to MAX(FTAG), which is a short name for Final-time Away-team Goals;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: For a game had a score of 1-8 in the year of 2011, what division was that game in? Give the full name of the division. 2011 refers to season; a score of 1-8 refers to FTHG = '1' and FTAG = '8';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which division had the most games with more than 5 total field goals on 2020/2/22? Give the full name of the division? more than 5 total field goals refers to SUM(FTHG, FTAG)>5, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; 2020/2/22 is a date;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Give the full name of the divison that had the most 0-0 games. the most 0-0 games means a no-score draw and refers to MAX(COUNT(Div where FTHG = '0' and FTAG = '0'));"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many Scottish League One games took place on the day that ""Pro Vercelli"" and ""Pescara""had a 5-2 game? Pro Vercelli and Pescara are names of teams; HomeTeam = 'Pro Vercelli'; AwayTeam = 'Pescara'; 5-2 is a score where FTHG = '5' and FTAG = '2'; Scottish League One is a name of division; games refer to Div;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: List the number of games that ended up with 5-0 in Greece. 5-0 is a score where FTHG = '5' and FTAG = '0'; Greece is a name of country; games refer to Div;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which country did Bradford Team belongs to? Bradford team refers to HomeTeam = 'Bradford' or AwayTeam = 'Bradford';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many Eredivisie teams have played in 2008? Eredivisie is the name of division; 2008 refers to season; teams refer to HomeTeam;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What's the home win ratio of the Bundesliga division in 2021? home win refers to FTR = 'H', where H stands for home victory; season = '2021'; Bundesliga is a name of division; DIVIDE(COUNT(Div where FTR = 'H, season = '2021' and name = 'Bundesliga'), COUNT(Div where season = '2021' and name = 'Bundesliga')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: For all the games ended up with 1-1, what percentage of them are from Liga NOS division? 1-1 is a score where FTHG = '1' and FTAG = '1'; Liga NOS is the name of division; DIVIDE(COUNT(Div where FTHG = '1', FTAG = '1', name = 'Liga NOS'), COUNT(Div where FTHG = '1' and FTAG = '1')) as percentage;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many matches were held during the 2021 season's Premier League? Premier League is the name of division;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team was the home team in the match of the Bundesliga division on 2020/10/2? Bundesliga is the name of division; Date = '2020/10/2';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team won the match of the Bundesliga division on 2020/10/2? Bundesliga is the name of division; Date = '2020/10/2'; won the match refers to FTR = 'H';"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team has the most victories as the home team in matches of the Bundesliga division? Bundesliga is the name of division; the most victories as the home team refers to MAX(COUNT(FTR = 'H'));"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many times did the team Werder Bremen win as the away team in matches of the Bundesliga division? Bundesliga is the name of division; win as the away team refers to FTR = 'A', where 'A' stands for away victory;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many matches of the Bundesliga division ended with an away victory in the 2021 season? Bundesliga is the name of division; away victory refers to FTR = 'A', where 'A' stands for away victory;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Of the matches in all seasons of the Bundesliga division, how many of them ended with a tie? Bundesliga is the name of division; tie refers to FTR = 'D', where D stands for draft;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many home victories does the Bundesliga division have in more or less than the Premier League division in the 2021 season? Bundesliga and the Premier League are names of division; home victories refer to FTR = 'H', where H stands for home victory; SUBTRACT(COUNT(FTR = 'H' where season = 2021, name = 'Bundesliga'), COUNT(FTR = 'H' where season = 2021, name = 'Premier League'));"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Please list the home teams in the matches of the Bundesliga division that ended with a home victory in the 2021 season. Bundesliga is the name of division; home victory refers to refer to FTR = 'H', where H stands for home victory;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team had more home victories in the 2021 season's matches of the Bundesliga division, Augsburg or Mainz? Bundesliga is the name of division; more home victories refer to MAX(FTR = 'H)'; Augsburg and Mainz are names of teams and refer to HomeTeam;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: Which team had the most final-time home-team goals in the 2021 season's matches of the Bundesliga division? Bundesliga is the name of division; the most final-time home-team goals refers to MAX(FTHG);"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: How many final-time home-team goals were there in total in all the matches of the Bundesliga division in the 2021 season? Bundesliga is the name of division; final-time home-team goals refers to FTHG;"
european_football_1,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE divisions (
division text,
name text,
country text,
PRIMARY KEY (division),
);
CREATE TABLE matchs (
Div text,
Date date,
HomeTeam text,
AwayTeam text,
FTHG integer,
FTAG integer,
FTR text,
season integer,
FOREIGN KEY (Div) REFERENCES divisions(division),
);
---------------------
QUESTION: What's the winning rate of Club Brugge in the 2021 Premier League? Premier League is name of division; season = 2021; Club Brugge is name of team; Club Brugge wins implies HomeTeam = 'Club Brugge' and FTR = 'H' and AwayTeam = 'Club Brugge' and FTR = 'A'; DIVIDE(SUM(COUNT(FTR = 'H' where HomeTeam = 'Club Brugge', name = 'Premier League', season = 2021), COUNT(FTR = 'A'where AwayTeam = 'Club Brugge', name = 'Premier League', season = 2021)), COUNT(Div where name = 'Premier League', season = 2021));"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the winning game from the team, what is the percentage of the winning was home game. percentage of winning at the home = Divide(homeWon, won) * 100"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team(s) has greater than 75% lost among all the games played. greater than 75% lost refers to Divide(lost, games) > 0.75; team refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the team name and the total wins of the team in year 2005 which has greater winning from the previous year. 2005 refers to year = 2005 ; previous year refers to year = 2004; team with greater winning than previous year refers to Won where year = 2005 > Won where year = 2004; team name refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For team who has more home won than home lost more than 80%, list the team name and the offense points. home won than home lost more than 80% refers to Divide(Subtract(homeWon, homeLost), games) > 0.8; offense point refers to o_fgm"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the percentage of the teams who had post season (playoff) were ranked number 1? had post season (play off) refers to playoff is not null; percentage = Divide (Count(Team where rank = 1, Count(Team))) * 100"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Who is the coach for 'BOS' team in year 1950. List the coach ID together with the number of game won and lost. 'BOS' is the tmID; 1950 refers to year = 1950; number of game won refers to won; number of game lost refers to lost"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Who is the longest serving coach from year 1970 to 1980. List the coach ID and the team(s) he served. 1970 to 1980 refers to year between 1970 and 1980; longest serving coach Max(Count(coachID)); team(s) he served refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game. more than 50 games won refers to won > 50"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year. from year 2000 to 2010 refers to year between 2000 and 2010; more game lost then won refers to lost > won"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point. year 1990-1995 refers to year between 1990 and 1995; 'adelmri01' is the coachID; offense point refers to o_fgm"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team(s) had 90% games won. List the coach ID for the team and year played. team with 90% games won refers to Divide (won, games) > 0.9"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the percentage of player who won ""All-Defensive First Team"" from 1980 - 2000 is from 'NY'. ""All-Defensive First Team"" is the award; ' NY' is the birthState; 1980 to 2000 refers to year between 1980 and 2000; percentage = Divide (Count(playerID where birthState = 'NY'), Count(playerID)) * 100"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976? ""NBA Coach of the Year"" is the award; in 1977 refers to year = 1977; in 1976 refers to year = 1976; division refers to divisionID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s? ""Chicago Bull"" is the name of team; during the year 1981 refers to year = 1981; 'NBA Coach of the Year' is the award; in the 1970s refers to year between 1970 to 1979"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks? completed in the Western conference refers to conference = 'West'; in season 2006 refers to season_id = 2006; total of two blocks refers to blocks = 2; nickname refers to nameNick"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In what year did the only team to beat the Houston in the final round of postseason series games earn its lowest ranking? beat the Huston refers to tmIDLoser = 'HSM';  in final round of post season refers to round = 'DSF'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the birth date of the player with the most assists during the 1985 All-Star season? most assist refers to Max(assists); in 1985 All Star season refers to season_id = 1985"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which player, born in Winter Haven, played 12 minutes per season during the 1980s in the All-Stars? born in Winter Haven refers to birthCity = 'Winter Haven'; during the 1980s in All-Stars refers to season_id = 1980; played in 12 minutes  per season refers to minutes = 12"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Of all the All-star players who played in the Eastern Conference for no more than 5 minutes, how many went to Illinois College? Eastern conference refers to conference = 'East'; no more than 5 minutes refers to minutes < 5"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Between the years 1990 and 2007, of the total rebounds achieved by each player, how many managed to exceed 75% of defensive rebounds? the year 1990 and 2007 refers to year BETWEEN 1990 AND 2007; exceed 75% of defensive rebounds refers to Divide (dRebounds, rebounds) * 100 > 75"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: in which year costela01 obtained the best balance of games won as a coach? ""costela01"" is the coachID; best balance of game won refers to Max(Divide(won, Sum(won, lost)))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many total minutes has the Brooklyn-born player, known by the name of Superman, played during all of his NBA All-Star seasons? ""Brooklyn"" is the birthCity of player; known by the name of Superman refers to nameNick like '%Superman%'; total minutes refers to Sum(minutes)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Of all the teams coached by the winner of the 1994 NBA Coach of the Year award, which team has lost the most times playing at home? of 1994 refers to year = 1994; 'NBA Coach of the Year' is the award; lost the most time at home refers to Max(homeLost)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which winning team in the final round of the postseason series games against the LAL won more than 60 games in the NBA league during the year 1996? final round of post season refers to round = 'CSF'; won against LAL refers to tmIDLoser = 'LAL'; in the NBA league refers to lgID = 'NBA'; won more than 60 games refers to won > 60"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In which league did the player who weighs 40% less than the heaviest player and whose height is 80 inches play? weigh 40% less than the heaviest player refers to weight = Multiply(Max (weight), 0.6); league refers to lgID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the name of the coach who has served more than 2 NBA teams. ""NBA"" is the lgID; server more than 2 teams refers to Count(tmID) = 2"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the name of the coach during whose period of coaching, a team has the most numbers of games won in the post-season games? the most number of game won in post season refers to Max(post_wins); coach refers to coachID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the coaches who have served more than 2 NBA teams, during which coach's period of coaching, a team has the least numbers of games lost in the post-season games? served more than 2 NBA teams refers to count (tmID) > = 2; least number of game lost in post season refers to Min(post_losses)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players from the ABA league, how many of them have the center position? ""ABA"" is the lgID; center position refers to pos =   'C' or pos = 'F-C'; players refers to playerID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the first name of the players from the NBA league with the forward position. ""NBA"" is the lgID; with the forward position refers to pos = 'F' of pos = 'F-C'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players who went to high school in Chicago, how many of them belongs to the west conference? high school in Chicago refers to hsCity = 'Chicago'; belong to the west conference refers to divID = 'WE'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the players who belongs to the east conference, please list the name of the college they went to. belong to the east conference refers to divID = 'EA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players from the NBL league, how many of them were born in Spencer? ""NBL"" is the lgID; 'Spencer' is the birthCity"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the birth date of the player who has won the most MVPs. won the most MVP refers to Max(Count(award = 'Most Valuable Player'))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players born in Whitestone, how many of them have won the MVP? ""Whitestone"" is the birthCity of the player; won the MVP refers to award = 'Most Valuable Player'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players who have won the award of Rookie of the year, what is the height of the tallest player? ""Rookie of the Year"" is the award; tallest player refers to Max(height)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the average weight of the players who have won the award of Rookie of the year? ""Rookie of the Year"" is the award; average weight = Divide (Sum(weight), Count(playerID))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players that went to high school in New York and have won the MVP, what is their average height? high school in New York refers to highSchool like '%New York%'; won the MVP refers to award = 'Most Valuable Player'; average height = Divide (Sum(height), Count(playerID))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the top ten teams with the highest scores in 2000. in 2000 refers to year = 2000; team with highest score refers to Max(o_fgm)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which teams have winning rate less than 50%? team with winning rate less than 50% refers to Divide (won, Sum(won, lost)) < 0.5"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Who are the coaches for team with winning rate of 80% and above? winning rate of 80% and above refers to Divide (won, Sum(won, lost)) > 0.8; coaches refers to coachID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which coach has serviced in NBA for more than 10 years. ""NBA"" is the lgID; coach who serviced for more than 10 years refers to coachID where Subtract (Max(year), Min(year)) > 10"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many teams have played more than 3800 points and have player with ""Most Valuable Player"" award? played more than 3800 points refers to Sum(points) > = 3800"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which player from ""AFS"" team has the tallest height? ""AFS"" is the tmID; tallest height refers to Max(height)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list down the last name of players from ""BLB"" team. ""BLB"" is the tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1962 to 1975, how many coaches received the award? from 1960 to 1975 refers to year between 1960 and 1975"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the coach IDs who received the award twice from 1970 to 1990. from 1970 to 1990 refers to year between 1970 and 1990;  received award twice refers to coachID where Count(coachID) = 2"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1962 to 2011, how many coaches received both NBA and ABA awards? from 1962 to 2011 refers to year between 1960 and 2011; received both NBA and ABA award refers to coachID where award LIKE 'NBA%' and 'ABA%'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In 1975, what was the average point of all-star players coming from the USA? in 1975 refers to season_id = 1975; coming from USA refers to birthCountry = 'USA'; average point refers to Divide (Sum(points), Count(playerID))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the last names and first names of all-star players who are higher than 75 inch. higher than 75 inch refers to height > 75"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the minimum weight of all-star players coming from UCLA college? minimum weight refers to Min(weight)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the maximum weight of USA all-star players? ""USA"" is the birthCountry of player;  maximum weight refers to Max(weight)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1960 to 1970, what is the total point of all-star players who are still alive? from 1960 to 1970 refers to season_id between 1960 and 1970; still alive refers to deathDate = '0000-00-00'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among players who were born after 1950, who had offence rebounds rates more than 30%? Please list their last names and first names. born after 1950 refers to birthDate > = '1950-01-01'; offence rebound rate more than 30% refers to Divide (oRebounds, rebounds) > 0.3"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players received Rookie of the Year award from 1969 to 2010? from 1969 to 2010 refers to year BETWEEN 1969 and 2010; 'Rookie of the Year' is the award"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the team names which have at least 3 all-star players. team with at least 3 all star player refers to tmID where Count(player_allstar.playerID) > = 3"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1950 to 1970, what is the maximum point of players whose teams were ranked 1? from 1950 to 1970 refers to year between 1950 and 1970; team with rank 1 refers to rank = 1; maximum point refers to Max(points)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the last names and first names of all-star players whose team were ranked 1 for consecutive 3 years from 1937 to 1940. from 1937 to 1940 refers to year between 1937 and 1940; rank 1 for 3 years refers to tmID where Count (rank = 1) > = 3"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the teams that were ranked 3 from 1937 to 1940, what is the team name whose players had the highest point? from 1937 to 1940 refers to year between 1937 and 1940; player with highest point refers to Max(points)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In 1937, how many teams whose players got at least 500 points? in 1937 refers to year = 1937; player got at least 500 points refers to Sum(points) > = 500"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In 1990, how many players whose teams had the winning rate of more than 75%? in 1990 refers to year = 1990; winning rate of more than 75% refers to Divide(won, games) > 0.75"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the top three shortest black players. shortest player refers to Min(height); black players refers to race = 'B'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players with the first name Joe were drafted in 1970? drafted in 1970 refers to draftYear = 1970"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many field goals did George Mikan make overall between 1951 and 1953? between 1951 and 1953 refers to season_id; field goal refers to fg_made"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What are the basketball players' BMI ranges? BMI = Multiply(Divide(weight, Multiply(height, height)), 703)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the name of the team with the highest home lost rate? highest home lost rate = Max(Divide(homelost, Sum(homeWon, homeLost)))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How old was Alexis Ajinca when he was first drafted? age when drafted refers to Subtract(draftYear, year(birthDate)); first drafted refers to draftYear"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Who is the tallest player in Denver Nuggets since 1980? ""Denver Nuggets"" is the name of team; since 1980 refers to year > 1980; tallest player = Max(height)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the players who have passed away, who had the most award? pass away refers to deathDate ! = 'null'; most award refers to playerID where Max(Count(award))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the full name of the team that has the most players from UCLA? ""UCLA"" is the college; team with most players refers to tmID where Max(Count(playerID))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the average BMI of an All-star player? average BMI refers to AVG (Multiply(Divide(weight, Multiply(height, height)), 703))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the full name of the team with the fastest growth in winning rate in the 'ABA' league from 1972 to 1973? ""ABA"" is the lgID; from 1972 to 1973 refers to year = 1972 and year = 1973; team with the fastest growth in winning rate = Max(Subtract(Divide(won where year = 1973, Sum(won, lost)),Divide(won where year = 1972, Sum(won, lost))))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the first names of the players with the most personal fouls in the 'NBL' league. ""NBL"" is the lgID; most  personal foul refers to Max(Count(PF))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the average height of an East conference All-star player? average height refers to avg(height)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the coaches who won the 'ABA Coach of the Year' award, which is the coach with the highest number of won games? ""ABA Coach of the Year"" is the award; highest number of won games refers to Max(Count(won))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the full name of the team that the 'NBA Coach of the Year' 1992 winner coached? ""NBA Coach of the Year"" is the award; in 1992 refers to year = 1992;"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the first and last name of the player with the highest field goal made rate in 1973? in 1973 refers to year = 1973; player with highest field goal made refers to Max(Divide(fgMade, fgAttempted))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the full name of the team that selected Mike Lynn? full name refers to teams.name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the Most improved Players awarded from 1985-1990, how many player whose country is USA? the Most improved Player refers to award = 'Most Improved Player'; from 1985-1990 refers to year between 1985 and 1990; country is USA refers to birthCountry = 'USA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list out the first name and last name of player who attended California college and have been selected as all stars? California college refers to college = 'California'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1950 to 1970, how many coaches who received more than 1 award? from 1950 to 1970 refers to year between 1950 and 1970; more than 3 awards refers to count(award) > 3"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players received Most Valuable Player award from 1969 to 1975? Most Valuable Player award refers to award = 'Most Valuable Player'; from 1969 to 1975 refers to year between 1969 and 1975"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the team names which have at least 5 players were born in the same state. team name refers to teams.name; state that a player is born refers to birthState"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many teams in the NBA which has at least 3 all-star players? NBA refers to lgID = 'NBA'; have at least 3 all-star players refers to count(player_allstar.playerID) > 3"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which state has the most players selected as all stars? state refers to birthState; the most players refers to max(count(playerID))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players whose teams were ranked 6 in 1937? ranked 6 refers to rank = 6; in 1937 refers to year = 1937"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In 1950, how many players whose teams have the losing rate less than 20%? in 1950 refers to year = 1950; losing rate less than 20% refers to divide(lost, add(won, lost)) < 0.2"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the full name of players who are born outside USA. full name refers to firstName, middleName, lastName; born outside USA refers to birthCountry ! = 'USA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List out all the coach ID who have served more than 2 different teams. more than 2 different teams refers to count(tmID) > 2"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which coach has the most 'won' than 'lost' in year '1988'? in year '1988' refers to year = 1988; the most 'won' than 'lost' refers to max(subtract(won, lost))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Name the team in which the coach won the title 'NBA Coach of the Year' in 2010. team name refers to teams.name; won the title 'NBA Coach of the Year' refers to award = 'NBA Coach of the Year'; in 2010 refers to year = 2010"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the first name, last name, height and weight of the players who has all free throw attempted successfully made. all free throw attempted successfully made refers to ftAttempted > 0 and ftAttempted = ftMade"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the first name, last name and team name of players who are drafted from 'Seattle' between year 1965 to 1970. team name refers to teams.name; drafted from 'Seattle' refers to draftFrom = 'Seattle'; between year 1965 to 1970 refers to draftYear between 1965 and 1970"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the full name and age of the player when he won the ""Finals MVP"" in 2003. full name refers to firstName, middleName, lastName; age = subtract(2003, year(birthDate)); won the ""Finals MVP"" refers to award = 'Finals MVP'; in 2003 refers to year = 2003"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the champion (team name) and year from year 1950 to 1960. champion refers to round = 'F'; team name refers to teams.name; from year 1950 to 1960 refers to year between 1950 and 1960"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Name the teams along with the coaches that went to 'Quarter Final' round in 1946. team name refers to teams.name; coach refers to coachID; 'Quarter Final' round refers to round = 'QF'; in 1946 refers to year = 1946"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List out all the players fullname who won the championship in 1970. full name refers to firstName, middleName, lastName; won the championship refers to round = 'F'; in 1970 refers to year = 1970"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From which college was the player who won the most award in 1970. college refers to highSchool; won the most award refers to max(count(award)); in 1970 refers to year = 1970"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Name the youngest player who ever won ""Rookie of the Year"". player name refers to playerID; the youngest refers to max(birthDate); won ""Rookie of the Year"" refers to award = 'Rookie of the Year'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the full name of players who are drafted from round 1 in 1973 but not born in USA. full name refers to firstName, middleName, lastName; in 1973 refers to year = 1973; not born in USA refers to birthCountry <> 'USA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the percentage of offense rebounds from the total rebounds of the players in year 2000. in year 2000 refers to year = 2000; percentage = divide(sum(o_rebounds), sum(rebounds)) * 100%"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List the year, team and coach that with winning rate of above 75%. team refers to teams.name; coach refers to coachID; winning rate of above 75% refers to divide(won, add(won, lost)) > 0.75"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: List all the coatches of the Oklahoma City Thunder coach refers to coachID; Oklahoma City Thunder refers to name = 'Oklahoma City Thunder'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players, in games played in 1990, achieved 50% or less of oRebounds than dRebounds. in 1990 refers to season_id = 1990; 50% or less of oRebounds than dRebounds refers to o_rebounds < = multiply(d_rebounds, 0.5)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many players did not get more than 10 steals between the years 2000 and 2005? did not get more than 10 steals refers to count(steals) < = 10; between the years 2000 and 2005 refers to season_id between 2000 and 2005"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971? 2nd draftRound refers to draftRound = 2; won Rookie of the Year refers to award = 'Rookie of the Year'; in 1971 refers to draftYear = 1971"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many All Star players who played in the 1973 season were black? 1973 season refers to season_id = 1973; black refers to race = 'B'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which winning team in the 1947 playoff quarterfinals managed to score 3,513 defensive points that same year? team refers to tmID; quarterfinal refers to round = 'QF'; score 3,513 defensive points refers to d_pts > = 3513"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Percentage of games lost out of total games played by the Houston Mavericks Houston Mavericks refers to name = 'Houston Mavericks'; percentage = divide(sum(lost), sum(games)) * 100%"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the players who received the ""Most Valuable Player"" award in the NBA league after the year of 1990, along with their IDs. player refers to playerID; ""Most Valuable Player"" award refers to award = 'Most Valuable Player'; after the year of 1990 refers to year > 1990; ID refers to playerID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many times between 1975 and 1980 did the player abdulka01 play for LAL? between 1975 and 1980 refers to year between 1975 and 1980; player abdulka01 refers to playerID = 'abdulka01'; play for LAL refers to tmID = 'LAL'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the percentage of coaches in 1969 who were awarded ""NBA Coach of the Year""? in 1969 refers to year = 1969; awarded ""NBA Coach of the Year"" refers to award = 'NBA Coach of the Year'; percentage = divide(count(coachID where year = 1969 and award = 'NBA Coach of the Year'), count(coachID)) * 100%"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What were the difference of the CHS team's winning rate between 1946 and 1947 in the post-season series games? Please provide your answer in percentages. CHS team refers to tmIDWinner = 'CHS'; difference = subtract(divide(count(series_post where year = 1947 and tmIDWinner = 'CHS'), count(series_post where year = 1947)), divide(count(series_post where year = 1946 and tmIDWinner = 'CHS'), count(series_post where year = 1946)))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many awards were given out in 2010 to players who attended high school in Chicago? in 2010 refers to year = 2010; attended high school in Chicago refers to college = 'Chicago'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the percentage of players who attended Auburn University and won an ""All-Defensive Second Team"" award? Auburn University refers to college = 'Auburn'; won an ""All-Defensive Second Team"" award refers to award = 'All-Defensive Second Team'; percentage = divide(count(playerID where award = 'All-Defensive Second Team'), count(playerID)) where college = 'Auburn' * 100%"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Please list the top five players with the most steals in the year 1997. Please give their full name. full name refers to firstName, middleName, lastName; in the year 1997 refers to year = 1997; the most steals refers to max(steals)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the name of the university that was drafted from the player who won the NBA Finals MVP in 1990? name of the university refers to highSchool; NBA refers to lgID = 'NBA'; Finals MVP refers to award = 'Finals MVP'; in 1990 refers to year = 1990"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the NBA All-star players in 1996 season , which have more than 70% free throw rate? Please give their player id. NBA refers to lgID = 'NBA'; in 1996 season refers to season_id = 1996; more than 70% free throw rate refers to ft_made > = 0 AND ft_attempted > 0 AND divide(ft_made, ft_attempted) > 0.7"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: From 1980 to 1983, how many of the NBA All-Star players have more than 60% three point rate? from 1980 to 1983 refers to year BETWEEN 1980 and 1983; NBA refers to lgID = 'NBA'; more than 60% three point rate refers to divide(threeMade, threeAttempted) > 0.6"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the NBA winning coaches, which are from STL team? Please list their coach id. NBA refers to lgID = 'NBA'; STL team refers to tmID = 'STL'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many times have coaches who were from CHI been awarded as NBA Coach of the Year? CHI refers to tmID = 'CHI'; awarded Coach of the Year refers to award = 'Coach of the Year'; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Of the players drafted in NBA between 1990 and 2000, who has the most points in all-star? List the player's first name and last name. NBA refers to lgID = 'NBA'; between 1990 and 2000 refers to year between 1990 and 2000; the most points refers to max(points)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any. Wake Forest college refers to highSchool = 'Wake Forest college'; did the most offensive rebounds than defensive rebounds refers to max(subtract(sum(oRebounds), sum(dRebounds))); full name refers to first_name, middle_name, last_name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Find the full name of the player born in Atlanta and have the highest number of blocks. Also, in which team did this player perform the most number of blocks? full name refers to first_name, middle_name, last_name; born in Atlanta refers to birthCity = 'Atlanta'; the highest number of blocks refers to max(blocks); team refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000? name of team refers to teams.name; between 1980 and 2000 refers to year between 1980 and 2000; ranked first five or more times refers to count(rank = 1) > = 5; lost a league two or more times refers to lost > 2"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Player from which team has the highest point per minute in NBA from 1991 to 2000? team refers to tmID; the highest point per minute refers to max(divide(points, minutes)); NBA refers to lgID = 'NBA'; from 1991 to 2000 refers to year BETWEEN 1991 AND 2000"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970? ABA refers to lgID = 'ABA'; NBA refers to lgID = 'NBA'; between the years 1970 and 1970 refers to draftYear between 1970 and 1970; difference = subtract(avg(subtract(1970, year(birthDate)) where lgID = 'ABA'), avg(subtract(1970, year(birthDate)) where lgID = 'NBA'))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which player had the most game presentatons in 2011 NBA season. player refers to playerID; the most game presentations refers to max(GP); in 2020 refers to year = 2020; NBA season refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many first round draft player in 1996 NBA draft became an All-Star? first round refers to round = 1; in 1996 refers to year = 1996; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team did the MVP of 1997 NBA season play in? team refers to tmID; MVP refers to award like '%MVP'; 1997 refers to year = 1997; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many games did team of the scoring champion win in 2001 NBA season? the scoring champion refers to max(won); 2001 refers to year = 2001; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many turnovers per game did the assist champion had in the 2003 NBA season? turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What is the number of NBA titles that Ray Allen has won throughout his NBA career? NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season? No.1 draft pick refers to draftRound = 1; in the 2003 season refers to draftyear = 2003; increase = subtract(divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2004, divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2003)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Among the coaches who won the 'NBA coach of the year' award from 1971 - 1975, how many of them were in 'POR' team? the 'NBA coach of the year' award refers to award = 'NBA coach of the year'; from 1971 - 1975 refers to year between 1971 and 1975; 'POR' team refers to tmID = 'POR'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: How many percent of points were scored by NBA players who belonged to 'LAL' team and had performed steals movement. NBA refers to lgID = 'NBA'; 'LAL' team refers to tmID = 'LAL'; performed steals movement refers to steals > 0; percent = divide(count(playerID where steals > 0), count(playerID)) where lgID = 'NBA' and tmID = 'LAL' * 100%"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What's the name of the player in 1996 who had the most steals that didn't play in the playoffs? name of the player refers to first_name, middle_name, last_name; in 1996 refers to year = 1996; the most steals refers to max(steals); didn't play in the playoffs refers to playoff = null"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Give the player id of the man who had the most turnovers whose team missed the playoffs in year 1988. the most turnovers refers to max(turnovers); missed the playoffs refers to PostGP = 0; in year 1988 refers to year = 1988"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which NBA team that didn't play in playoffs had the most winning rate in the 2000 NBA regular season? NBA refers to lgID = 'NBA'; didn't play in the playoffs refers to PostGP = 0; 2000 refers to year = 2000; the most winning rate refers to max(divide(won, add(won, lost)))"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which non-playoffs team had the most points in the regular season in the year 1998? non-playoff refers to PostGP = 0; in the year 1998 refers to year = 1998; the most points refers to max(o_pts)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: What's the full name of the team that won the most games in 2001 but didn't make the playoffs? full name of the team refers to teams.name; in 2001 refers to year = 2001; didn't make the playoffs refers to PostGP = 0; won the most games refers to max(won)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team that didn't play in playoffs had the most total rebounds in the year 1997? didn't play in playoffs refers to PostGP = 0; in the year 1997 refers to year = 1997; the most total rebounds refers to max(o_tmRebound)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the player who was drafted in the 1st round, 6th position in 1976, which team did he play in that year? drafted in the 1st round refers to draftRound = 1; 6th position refers to draftSelection = 6; in 1976 refers to year = 1976; team refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In the year 1998, how many home wins did the team which had the 1st round, 12th pick have that year? in 1998 refers to year = 1998; 1st round refers to draftRound = 1; 12th pick refers to draftSelection = 12; home win refers to homeWon"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the player who had the most rebounds throughout his allstar appearances, what was his weight and height? the most rebounds refers to max(rebounds)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Where was the high school of the player who had the most rebounds in the NBA allstar history? the most rebounds refers to max(rebounds)"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids. in 1997 refers to year = 1997; the most rebounds refers to max(rebounds); team id refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the latest passing player who could play all the positions in the court, how many points did he have in his career? the latest passing refers to max(season_id); play all the positions refers to pos like '%C%' or pos like '%F%' or pos like '%G%'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team did the youngest player who could be in F-G position play in the NBA? team refers to tmID; the youngest refers to max(year); F-G position refers to pos like '%F'; NBA refers to lgID = 'NBA'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the players who played the most PBLA games, who was graduated from Central Missouri State college? the most PBLA games refers to max(games_played); Central Missouri State college refers to college = 'Central Missouri State'"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: In 2000, which team did the player who played the least minutes without missing a single game play in? Give the full name of the team. in 2000 refers to year = 2000; played the least minutes refers to min(minutes); without missing a single game refers to GP = 82; full name of the team refers to teams.name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For all the full attendence players in 1995, which player had most turnovers? Give the full name of the player. full attendance refers to GP = 82; in 1995 refers to year = 1995; the most turnovers refers to max(turnovers); full name refers to first_name, last_name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the player in 2011 who started every game he played, which team had the player who had the most steals? in 2011 refers to year = 2011; started every game refers to GP = GS; the most steals refers to max(steals); team refers to tmID"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team had the most same starting players througout the season? Give the full name of the team. the same starting player refers to GP = GS; full name of the team refers to teams.name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: For the 2001 rebounds leader in the league, when was his birthday? 2001 refers to year = 2001; rebounds leader refers to max(rebounds); birthday refers to birthDate"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team did the all league rebound champion play in 1997? Give the full name of the team. rebound champion refers to max(rebounds); 1997 refers to 1997; full name refers to teams.name"
professional_basketball,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE awards_players (
playerID text,
award text,
year integer,
lgID text,
note text,
pos text,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE coaches (
coachID text,
year integer,
tmID text,
lgID text,
stint integer,
won integer,
lost integer,
post_wins integer,
post_losses integer,
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE draft (
id integer,
draftYear integer,
draftRound integer,
draftSelection integer,
draftOverall integer,
tmID text,
firstName text,
lastName text,
suffixName text,
playerID text,
draftFrom text,
lgID text,
PRIMARY KEY (id),
FOREIGN KEY (draftYear) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE player_allstar (
playerID text,
last_name text,
first_name text,
season_id integer,
conference text,
league_id text,
games_played integer,
minutes integer,
points integer,
o_rebounds integer,
d_rebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
personal_fouls integer,
fg_attempted integer,
fg_made integer,
ft_attempted integer,
ft_made integer,
three_attempted integer,
three_made integer,
FOREIGN KEY (playerID) REFERENCES players(playerID),
);
CREATE TABLE players (
playerID text,
useFirst text,
firstName text,
middleName text,
lastName text,
nameGiven text,
fullGivenName text,
nameSuffix text,
nameNick text,
pos text,
firstseason integer,
lastseason integer,
height real,
weight integer,
college text,
collegeOther text,
birthDate date,
birthCity text,
birthState text,
birthCountry text,
highSchool text,
hsCity text,
hsState text,
hsCountry text,
deathDate date,
race text,
PRIMARY KEY (playerID),
);
CREATE TABLE teams (
year integer,
lgID text,
tmID text,
franchID text,
confID text,
divID text,
rank integer,
confRank integer,
playoff text,
name text,
o_fgm integer,
o_ftm integer,
o_pts integer,
d_pts integer,
homeWon integer,
homeLost integer,
awayWon integer,
awayLost integer,
won integer,
lost integer,
games integer,
arena text,
);
CREATE TABLE awards_coaches (
id integer,
year integer,
coachID text,
award text,
lgID text,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES coaches(year),
FOREIGN KEY (coachID) REFERENCES coaches(coachID),
);
CREATE TABLE players_teams (
id integer,
playerID text,
year integer,
stint integer,
tmID text,
lgID text,
GP integer,
GS integer,
minutes integer,
points integer,
oRebounds integer,
dRebounds integer,
rebounds integer,
assists integer,
steals integer,
blocks integer,
turnovers integer,
PF integer,
fgAttempted integer,
fgMade integer,
ftAttempted integer,
ftMade integer,
threeAttempted integer,
threeMade integer,
PostGP integer,
PostGS integer,
PostMinutes integer,
PostPoints integer,
PostoRebounds integer,
PostdRebounds integer,
PostRebounds integer,
PostAssists integer,
PostSteals integer,
PostBlocks integer,
PostTurnovers integer,
PostPF integer,
PostfgAttempted integer,
PostfgMade integer,
PostftAttempted integer,
PostftMade integer,
PostthreeAttempted integer,
PostthreeMade integer,
note text,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmID) REFERENCES teams(tmID),
);
CREATE TABLE series_post (
id integer,
year integer,
round text,
series text,
tmIDWinner text,
lgIDWinner text,
tmIDLoser text,
lgIDLoser text,
W integer,
L integer,
PRIMARY KEY (id),
FOREIGN KEY (year) REFERENCES teams(year),
FOREIGN KEY (tmIDWinner) REFERENCES teams(tmID),
FOREIGN KEY (tmIDLoser) REFERENCES teams(tmID),
);
---------------------
QUESTION: Which team had more than one player who grabbed more than 600 rebounds in 2011? Give the full name of the team. more than one player refers to count(playerID) > 1; grabbed more than 600 rebounds refers to rebounds > 600; in 2011 refers to 2011; full name refers to teams.name"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many of Shakespeare's works were finished before the year 1602? finished before the year 1602 refers to Date < 1602"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there in Act 1 in Twelfth Night? Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description of Act 1, Scene 2 in Twelfth Night? Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many more scenes are there in Act 1 than in Act 5 in Twelfth Night? in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which work is the character Lord Abergavenny from? Please give its short or abbreviated title. Lord Abergavenny refers to CharName = 'Lord Abergavenny'; short or abbreviated title refers to Title"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the character names of all the characters from the work Twelfth Night. character names refers to CharName; Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in Act 1, Scene 1 in Twelfth Night? Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night. Twelfth Night refers to Title = 'Twelfth Night'; list the paragraphs refers to PlainText"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs contain the character Lord Abergavenny? Lord Abergavenny refers to CharName = 'Lord Abergavenny'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list the IDs of the paragraphs in which the character ""son to Tamora"" appears. character ""son to Tamora""  refers to characters.Description = 'son to Tamora'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: For how many times has the scene ""OLIVIA’S house."" appeared in Twelfth Night? ""OLIVIA’S house.""  refers to chapters.Description = 'OLIVIA’S house.'; Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many characters are there in Twelfth Night? Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please give the title of the work of Shakespeare that has the most characters. most characters refers to max(count(character_id))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the average number of characters in all the works of Shakespeare? average number = divide(sum(character_id), count(work_id))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there on average in one act in Twelfth Night? Twelfth Night refers to Title = 'Twelfth Night'; average scene = divide(sum(Scene), count(Act))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many comedies did Shakespeare create? comedies refers to GenreType = 'Comedy'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: When did Shakespeare write the first poem? first poem refers to GenreType = 'Poem' and Date = 'min'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Give the abbreviation name for the character ""Earl of Westmoreland"". abbreviation name refers to Abbrev; character ""Earl of Westmoreland"" refers to CharName = 'Earl of Westmoreland'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which chapter has the most paragraphs? Give the description of the chapter. most paragraphs refers to max(count(chapter_id))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which character was mentioned in the paragraph ""Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.""? Give the character name. paragraph ""Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.""  refers to PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many characters are there in Titus Andronicus? Titus Andronicus refers to Title = 'Titus Andronicus'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the number of acts in Two Gentlemen of Verona. Two Gentlemen of Verona refers to LongTitle = 'Two Gentlemen of Verona'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description for the character mentioned in paragraph No.640171? paragraph No.640171 refers to paragraphs.id = '640171'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Give the title of the work that contains the character ""Shylock"". character ""Shylock"" refers to CharName = 'Shylock'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there in King John? King John refers to Title = 'King John'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many chapters does the character Demetrius show in the story? character Demetrius refers to CharName = 'Demetrius'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream. Act No.2 refers to Act = '2'; Scene No.2  refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which Shakespeare tragedy has the most scenes? Give the long title. tragedy refers to GenreType = 'Tragedy'; most scenes refers to max(count(Scene))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in the scene whose description is ""A Sea-port in Cyprus. An open place near the quay.""?"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What percentage of all scenes are tragic scenes in Shakespeare's work in 1594? tragic scenes refers to GenreType = 'Tragedy'; work in 1594 refers to Date = '1594'; percentage = divide((sum(Scene) when GenreType = 'Tragedy'), count(Scene))as percentage"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Gives the average number of chapters in Shakespeare's 1599 work. 1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many ""servant to Timon"" characters are there? servant to Timon refers to characters.Description = 'servant to Timon'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the title of the first ever work of William Shakespeare? first ever work refers to min(Date)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many poems did Shakespeare write? poems refers to GenreType = 'Poem'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there in work id 7, act 1?"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In the year 1500s, how many tragedies did Shakespeare write? year 1500s refers to Date between 1500 and 1599; tragedies refers to GenreType = 'Tragedy'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Who is the daughter of Capulet? daughter of Capulet refers to characters.Description = 'Daughter to Capulet'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in ""Ay, surely, mere the truth: I know his lady.""? ""Ay, surely, mere the truth: I know his lady."" refers to PlainText = 'Ay, surely, mere the truth: I know his lady.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the long title of the work with the highest number of scenes in act 1? highest number of scenes refers to max(count(Scene))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description of the chapter with the longest number of paragraphs? chapter with the longest number of paragraphs refers to max(ParagraphNum)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In ""Twelfth Night, Or What You Will"", what is the description of the chapter in 2nd scene, Act 2? ""Twelfth Night, Or What You Will""  refers to LongTitle = 'Twelfth Night, Or What You Will'; 2nd scene refers to Scene = 2"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the descriptions of the short chapters? short chapters refers to ParagraphNum < 150"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Which of Shakespeare's work has chapter description of ""A field near Windsor""?"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in the chapter with the highest amount of scenes in act 1? How many paragraphs refers to ParagraphNum; highest amount of scenes refers to max(count(Scene))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Other than ""stage directions"", what is the name of the character that appeared 5 times in ""the sea-coast""? Other than ""stage directions"" refers to CharName ! = '(stage directions)'; name of the character refers to CharName; appeared 5 times in ""the sea-coast"" refers to chapters.Description = 'The sea-coast.' and count(character_id) = 5"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the chapters in ""As You Like It"", how many chapters have a paragraph number of no more than 50? ""As You Like It"" refers to Title = 'As You Like It' ;paragraph number of no more than 50 refers to ParagraphNum < 50"
