db_id,train_example
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In ""Florence. Without the walls. A tucket afar off"", what is the id of the character that was mentioned in ""His name, I pray you.""? ""Florence. Without the walls. A tucket afar off"" refers to chapters.Description = 'Florence. Without the walls. A tucket afar off.'; ""His name, I pray you."" refers to PlainText = 'His name, I pray you.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many characters are there in Hamlet? Hamlet refers to Title = 'Hamlet'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there in the 5th act of ""History of Henry VIII""? 5th act refers to Act = 5; ""History of Henry VIII"" refers to LongTitle = 'History of Henry VIII'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes? history refers to GenreType = 'History' ; 1st acts  refers to Act = 1; no more than 2 scenes refers to count(Scene) < 2"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many acts are there in Sonnets? Sonnets refers to Title = 'Sonnets'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description of the chapter where the character whose abrreviated name is 1Play appeared first? abbreviated name is 1Play; appeared first refers to Abbrev = '1Play' and min(chapter_id)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the titles and genres of the one-act works of Shakespeare? one-act works refers to count(Act) = 1; genre refers to GenreType"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared? longest chapter refers to max(ParagraphNum); Sir Richard Ratcliff  refers to CharName = 'Sir Richard Ratcliff'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In ""A Lover's Complaint"", what is the description of Act 1, Scene 1? ""A Lover's Complaint"" refers to Title = 'A Lover''s Complaint'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: When did Shakespeare create his work that has 154 scenes? When refers to Date; has 154 scenes refers to count(Scene) = 154"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: On average, how many scenes are there in each of the comedy works written by Shakespeare? comedy refers to GenreType = 'Comedy'; average = divide(sum(count(Scene)), count(work.id))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work. Rome and Juliet refers to CharName = 'Romeo' and CharName = 'Juliet'; The Tragedy of Romeo and Juliet refers to LongTitle = 'The Tragedy of Romeo and Juliet'; percentage = divide(sum(charater.id) when CharName = 'Romeo', sum(charater.id)) as percentage and percentage = divide(sum(charater.id) when CharName = 'Juliet', count(charater.id)) as percentage"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the paragraph number with plain text ""This is Illyria, lady""? paragraph number refers to ParagraphNum"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many number of paragraphs are there in chapter ID 18881? number of paragraphs refers to ParagraphNum"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List down any 5 titles in the history genre. in the history genre refers to GenreType = 'History'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes are there in Act 5 of work ID 9?"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the character names and descriptions of chapter ID 18710. character names refers to CharName"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many chapters are there in ""Midsummer Night's Dream""? in ""Midsummer Night's Dream"" refers to Title = 'Midsummer Night's Dream'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many paragraphs are there in Act 5 Scene 1 of ""Comedy of Errors""? ""Comedy of Errors"" refers to Title = 'Comedy of Errors'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the character names and descriptions of characters in ""Venus and Adonis""? character names refers to CharName; ""Venus and Adonis"" refers to Title = 'Venus and Adonis'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the title which has character named ""Froth""? character named ""Froth"" refers to CharName = 'Froth'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many chapters include the character name ""First Witch""? character name ""First Witch"" refers to CharName = 'First Witch'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the scenes and descriptions in Act 1 of "" Pericles, Prince of Tyre"". "" Pericles, Prince of Tyre"" refers to LongTitle = 'Pericles, Prince of Tyre'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Describe the full title which had the character named Servant to Montague. full title refers to LongTitle; character named Servant to Montague refers to characters.Description = 'Servant to Montague'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Describe the scene number, act, and title of work which had the description of ""The house of ANTIPHOLUS of Ephesus"" in chapter."
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Provide the character name, paragraph number, and plain text of ""cousin to the king"" description. character name refers to CharName; paragraph number refers to ParagraphNum"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Calculate average scene per act in Antony and Cleopatra. Antony and Cleopatra refers to Title = 'Antony and Cleopatra'; average scene per act = divide(sum(Scene), count(act))"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Calculate the percentage of paragraphs in all chapters of ""All's Well That Ends Well"". ""All's Well That Ends Well"" refers to Title = 'All's Well That Ends Well'; percentage = divide(sum(paragraphs.id) when Title = 'All's Well That Ends Well', count(paragraphs.id)) as percentage"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many ""all"" character names have the ""all"" abbreviation? character names refers to CharName；""all"" abbreviation refers to Abbrev = 'all'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please name any three comedic works. comedic works refers to GenreType = 'comedy'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: From 1593 onwards, what is the difference between the number of comedy works and history works? From 1593 onwards refers to Date > 1593; comedy works and history works refers to GenreType = 'comedy' and GenreType = 'History'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please name the latest historical work. name refers to LongTitle; latest historical work refers to GenreType = 'History' and max(Date)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the work numbers that are related to King Henry? work numbers refers to works.id; related to King Henry refers to Title = '%Henry%'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the character names for a senator of Venice? character names refers to CharName; a senator of Venice refers to characters.Description = 'a senator of Venice'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the name of the character that can be found in paragraph 8 of chapter 18820? name of the character refers to CharName; paragraph 8 refers to ParagraphNum = 8; chapter 18820 refers to chapter_id = 18820"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description of chapter 18704, where there is a character called Orsino? chapter 18704 refers to chapters.id = 18704; character called Orsino refers to CharName = 'Orsino'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many scenes can be found in ""Twelfth Night, Or What You Will""? ""Twelfth Night, Or What You Will"" refers to LongTitle"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list all of the character descriptions in paragraph 20. paragraph 20 refers to ParagraphNum = 20"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many chapters have the name Gratiano as a character for ""friend to Antonio and Bassiano""? name Gratiano as a character refers to CharName = 'Gratiano'; ""friend to Antonio and Bassiano"" refers to characters.Description = 'friend to Antonio and Bassiano'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the description of chapter 18706 in ""All's Well That Ends Well""? chapter 18706 refers to chapters.id; ""All's Well That Ends Well"" refers to Title = 'All's Well That Ends Well'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What are the character names in paragraph 3? character names refers to CharName; paragraph 3 refers to ParagraphNum = 3"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list all of the paragraphs that have the character name Aedile. paragraphs  refers to ParagraphNum; character name Aedile refers to CharName = 'Aedile'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Please list any two character names in chapter 18708. character names refers to CharName; chapter 18708 refers to chapter_id = 18708"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many acts can be found in the comedy ""Two Gentlemen of Verona""? comedy refers to GenreType = 'comedy'; ""Two Gentlemen of Verona"" refers to Title = 'Two Gentlemen of Verona'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the percentage of historical works that have not fewer than five scenes in the 1500s? historical works refers to GenreType = 'history'; have not fewer than five scenes in the 1500s refers to count(Scene) > = 5 and DATE > = 1500 AND DATE < = 1599; percentage = divide(count(works.id) where GenreType = 'history' and count(Scene) > = 5, count(works.id) ) as percentage"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the percentage of act number 5 in Titus Andronicus? act number 5 refers to Act = 5; Titus Andronicus refers to Title = 'Titus Andronicus'; percentage = divide(sum(Act = 5), count(Act)) as percentage"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: How many of the works of Shakespeare are Tragedy? Tragedy refers to GenreType = 'Tragedy'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the works of Shakespeare, how many of them have the word ""Henry"" on its title? works refers to Title; have the word ""Henry"" on its title refers to Title = '%Henry%'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Give the character's ID of the character that said the paragraph ""O my poor brother! and so perchance may he be."" ""O my poor brother! and so perchance may he be."" refers to  PlainText = 'O my poor brother! and so perchance may he be.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the paragraph number and paragraphs said by the character named ""Sir Andrew Aguecheek"". paragraph number refers to ParagraphNum; character named ""Sir Andrew Aguecheek"" refers to CharName = 'Sir Andrew Aguecheek'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Give the title and the characters name of the most recent work of Shakespeare. characters name refers to CharName; most recent work refers to max(Date)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among paragraphs with paragraph number between 1900 to 1950, list the texts said by a character described as a sea captain, friend to Sebatian. paragraph number between 1900 to 1950 refers to ParagraphNum > = 1500 AND ParagraphNum < = 1950; texts refers to PlainText; a character described as a sea captain, friend to Sebatian refers to characters.Description = 'a sea captain, friend to Sebastian'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the long title of the Shakespeare's work with Act 4 Scene 5 described as ""Mytilene. A street before the brothel.""? described as ""Mytilene. A street before the brothel."" refers to chapters.Description = 'Mytilene. A street before the brothel.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Who is the character that said ""This is Illyria, lady.""? character refers to CharName; ""This is Illyria, lady."" refers to PlainText = 'This is Illyria, lady.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In Shakespeare's works between 1600 to 1610, how many of these have a character as a ""Third Servingman""? between 1600 to 1610 refers to DATE > = 1600 AND DATE < = 1610; ""Third Servingman"" refers to CharName = 'Third Servingman'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In the Venus and Adonis, what is the description of the last scene listed? Venus and Adonis refers to Title = 'Venus and Adonis'; last scene refers to max(Scene)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola? Twelfth Night refers to Title = 'Twelfth Night'; total number of lines said by Viola refers to count(character_id) where CharName = 'Viola'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the character and work ID of the text ""Fear not thou, man, thou shalt lose nothing here.""? character refers to chapter_id; text ""Fear not thou, man, thou shalt lose nothing here.""  refers to PlainText = 'Fear not thou, man, thou shalt lose nothing here.'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: What is the chapter description where the paragraph ""What, wilt thou hear some music, my sweet love?"" belongs? paragraph ""What, wilt thou hear some music, my sweet love?"" refers to  PlainText = 'What, wilt thou hear some music, my sweet love?'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the scene numbers involving the character named Sir Toby Belch in the Twelfth Night. scene numbers refers to Scene; character named Sir Toby Belch refers to CharName = 'Sir Toby Belch'; in the Twelfth Night refers to Title = 'Twelfth Night'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named ""Tybalt"". works before 1600 refers to DATE < 1600; tragic story refers to GenreType = 'Tragedy'; character named ""Tybalt"" refers to CharName = 'Tybalt'"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare. a year greater than the 89% of average year refers to DATE > multiply(divide(SUM(DATE) , COUNT(DATE)), 0.89)"
shakespeare,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE chapters (
id integer,
Act integer,
Scene integer,
Description text,
work_id integer,
PRIMARY KEY (id),
);
CREATE TABLE characters (
id integer,
CharName text,
Abbrev text,
Description text,
PRIMARY KEY (id),
);
CREATE TABLE paragraphs (
id integer,
ParagraphNum integer,
PlainText text,
character_id integer,
chapter_id integer,
PRIMARY KEY (id),
);
CREATE TABLE works (
id integer,
Title text,
LongTitle text,
Date integer,
GenreType text,
PRIMARY KEY (id),
);
---------------------
QUESTION: Among the comedy works of Shakespeare, what is the percentage of his works with a character named ""antonio""? comedy works refers to GenreType = 'Comedy'; a character named ""antonio"" refers to CharName = 'antonio'; percentage = divide(sum(CharName = 'Antonio'), count(CharName)) as percentage"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars with 8 cylinders, what is the name of the one that's the most expensive? with 8 cylinders refers to cylinders = 8; name of the car refers to car_name; the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars over 3000lbs, how many of them cost less than $30000? over 3000lbs refers to weight > 3000; cost less than $30000 refers to price < 30000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the acceleration of the most expensive car? the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How much US dollars does a Ford Torino cost? cost refers to price; Ford Torino refers to car_name = 'ford torino'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What was the origin country of the car model ford torino produced in 1970? origin country refers to country; Ford Torino refers to car_name = 'ford torino'; produced in 1970 refers to model_year = 1970"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the car models introduced in the market in 1970, how many of them have the USA as their origin country? introduced in the market in 1970 refers to model_year = 1970; have the USA as origin country refers to country = 'USA'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Please list the names of all the car models whose origin country is the USA. name of car model refers to car_name; origin country is the USA refers to country = 'USA'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Please list the names of the top 3 most expensive cars. name of the car refers to car_name; the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Please list all the years in which the car model Chevrolet Impala was introduced in the market. year refers to model_year; Chevrolet Impala refers to car_name = 'chevrolet impala'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000? an acceleration of over 10 miles per squared hour refers to acceleration > 10; cost more than $20000 and less than $30000 refers to price < 30000 AND price > 20000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Please list the weights of all the cars with the price over $40000. price over $40000 refers to price > 40000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the maximum acceleration of a car with price over $40000? the maximum acceleration refers to max(acceleration); price over $40000 refers to price > 40000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the average price of cars with 8 cylinders? with 8 cylinders refers to cylinders = 8; average price = avg(price) where cylinders = 8"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the maximum sweep volume of a car that costs less than $30000? cost less than $30000 refers to price < 30000; the maximum sweep volume = max(divide(displacement, cylinders)) where price < 30000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many cars in the database are originated from Europe? originated from Europe refers to country = 'Europe'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Show the origin country of Chevrolet Malibu. origin country refers to country; Chevrolet Malibu refers to car_name = 'chevrolet malibu'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What are the miles per gallon of the most expensive car? miles per gallon refers to mpg; the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Tell the origin country of car no.382. origin country refers to country; car no.382 refers to ID = 382"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which is the origin country of the $44274.40748 car? origin country refers to country; the $44274.40748 car refers to price = 44274.40748"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How much is the Volkswagen Dasher with 14.1 mph acceleration? cost refers to price; Volkswagen Dasher refers to car_name = 'volkswagen dasher'; 14.1 mph acceleration refers to acceleration = 14.1"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the engine displacement status of the $37443.85589 car. engine displacement status refers to displacement; the $37443.85589 car refers to price = 37443.85589"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: When was the $32650.65157 car introduced to the market? State the year. the $32650.65157 car refers to price = 32650.65157; year refers to model"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the price of the only Toyota Corona hardtop in the database. Toyota Corona hardtop refers to car_name = 'toyota corona hardtop'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many cylinders does the cheapest car have? the cheapest car refers to min(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which car in the database provides the best crash protection based on its weight? How much is it? the best crash protection refers to max(weight); cost refers to price"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: State the origin country of the fastest car in the database. origin country refers to country; the fastest refers to max(horsepower)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the percentage of Japanese cars in the database? Japanese car refers to country = 'Japan'; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100%"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the swept volume of the $34538.97449 car. sweep volume = divide(displacement, cylinders); the $34538.97449 car refers to price = 34538.97449"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the name of the most expensive car? name of the car refers to car_name; the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many cars were released in the USA in 1981? in the USA refers to country = 'USA'; in 1981 refers to model_year = 1981"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How much is the car with the highest sweep volume? cost refers to price; the highest sweep volume refers to max(divide(displacement, cylinders))"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the fastest car made by Japan? the fastest refers to max(horsepower); made by Japan refers to country = 'Japan'; name of the car refers to car_name"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many times was Ford Maverick introduced to the market? Ford Maverick refers to car_name = 'ford maverick';"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country produced the most fuel-efficient car? the most fuel-efficient refers to max(mpg)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which Dodge car is the cheapest? Dodge car refers to car_name LIKE 'dodge%'; the cheapest refers to min(price); name of the car refers to car_name"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the name of the most expensive car that was produced by the USA? name of the car refers to car_name; the most expensive refers to max(price); produced by the USA refers to country = 'USA'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars with an engine displacement of no less than 400 cubic millimeter, how many cars cost at least 30,000? engine displacement of no less than 400 cubic millimeter refers to displacement > 400; cost at least 30,000 refers to price > 30000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which year did Europe produce the most cars? year refers to model_year; Europe refers to country = 'Europe'; the most cars refers to max(model_year)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How much is the Peugeot 505s Turbo Diesel? cost refers to price; Peugeot 505s Turbo Diesel refers to car_name = 'peugeot 505s turbo diesel'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the miles per square hour of the cheapest car produced by the USA? miles per square hour refers to acceleration; the cheapest refers to min(price); produced by the USA refers to country = 'USA'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country produced the highest number of cars? Calculate the annual average number of cars that the said country produced from the very start to the present. the highest number of cars refers to max(country); annual average number = divide(count(ID), count(model_year))"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the percentage of cars that was produced by Japan among those that have a sweep volume of no less than 30? produced by Japan refers to country = 'Japan'; a sweep volume of no less than 30 refers to divide(displacement, cylinders) > 30; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100% where divide(displacement, cylinders) > 30"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: List the name of the cars with model year 1975. name of the car refers to car_name; model year 1975 refers to model_year = 1975"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the average price of cars from Europe. from Europe refers to country = 'Europe'; average price = avg(price) where country = 'Europe'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the price of the car ID 15?"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many of the cars from Japan weighed less than 3000? from Japan refers to country = 'Japan'; weighed less than 3000 refers to weight < 3000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars produced in year 1973, how many of the cars have horsepower less than 100? produced in year 1973 refers to model_year = 1973; have horsepower less than 100 refers to horsepower < 100"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the ID of cars from Japan worth greater than 35000 and have an acceleration of 14. from Japan refers to country = 'Japan'; worth greater than 35000 refers to price > 35000; have an acceleration of 14 refers to acceleration = 14"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Give the model year of the heaviest car. the heaviest refers to max(weight)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the horsepower and model year of the car named Subaru Dl? the car named Subaru Dl refers to car_name = 'subaru dl'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars originated from Japan, what is the name of the car with the highest price? from Japan refers to country = 'Japan'; name of the car refers to car_name; the highest price refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What are the names of the cars worth 20000? name of the car refers to car_name; worth 20000 refers to price = 20000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many cars worth greater than 40000 were from the USA? worth greater than 40000 refers to price > 40000; from the USA refers to country = 'USA'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the price and country origin of the car named Ford Maverick. country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: List the car's name with a price worth greater than 85% of the average price of all cars. car's name refers to car_name; a price worth greater than 85% of the average price of all cars refers to price > multiply(avg(price), 0.85)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the difference between the number of cars that has a horsepower of 130 with the model year 1970 and model year 1976 a horsepower of 130 refers to horsepower = 130; difference = subtract(count(ID where model_year = 1970), count(ID where model_year = 1976)) where horsepower = 130"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars from Asia, list the IDs of cars that were introduced in 1979. from Asia refers to country = 'Japan'; introduced in 1979 refers to model_year = 1979"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country produced the car with the lowest mileage per gallon? the lowest mileage per gallon refers to min(mpg)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the name, model, sweep volume, and introduced year of the car with the best crash protection. car's name refers to car_name; sweep volume = divide(displacement, cylinders); introduced year refers to model_year; the best crash protection refers to max(weight)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe. introduced in 1977 refers to model_year = 1977; car's name refers to car_name; from Europe refers to country = 'Europe'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Provide the name and model of the car with the highest price. car's name refers to car_name; the highest price refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the price of a Chevrolet Bel Air? Chevrolet Bel Air refers to car_name = 'chevrolet bel air'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the average price per car produced in Japan? produced in Japan refers to country = 'Japan'; average price per car = avg(price) where country = 'Japan'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country produced the car with the lowest price? the lowest price refers to min(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Among the cars produced in 1975, provide IDs, names, and producing countries of the cars with the maximum number of cylinders. produced in 1975 refers to model_year = 1975; names refers to car_name; producing countries refers to country; the maximum number of cylinders refers to max(cylinders)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year. the cheapest refers to min(price); number of cylinders refers to cylinders; producing year refers to model_year"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: List the names and prices of the cars with model 82 and mileage per gallon of greater than 30. car's name refers to car_name; model 82 refers to model = 82; mileage per gallon of greater than 30 refers to mpg > 30"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many models of Ford Maverick were produced? Ford Maverick refers to car_name = 'ford maverick'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the percentage of cars that belong to the USA. belong to the USA refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the average production rate per year from 1971 to 1980. Among them, name the cars with a weight of fewer than 1800 lbs. from 1971 to 1980 refers to model_year between 1971 and 1980; average production rate per year = divide(count(ID where model_year between 1971 and 1980), 9); car's name refers to car_name; a weight of fewer than 1800 lbs refers to weight < 1800"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the average price of model 70 cars? model 70 refers to model = 70; average price = avg(price) where model = 70"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the price of Chevrolet Vega 2300? Chevrolet Vega 2300 refers to car_name = 'chevrolet vega 2300'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country does Chevy C20 come from? Chevy C20 refers to car_name = 'chevy c20'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: List the price of Ford cars from model 1970 to 1980. Ford cars refers to car_name LIKE 'ford%'; from model 1970 to 1980 refers to model_year BETWEEN 1970 AND 1980"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which is the most fuel efficient car in 1975? car's name refers to car_name; the most fuel efficient refers to max(mpg); in 1975 refers to model_year = 1975"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which car consumes fuel the most and has the highest price? consumes fuel the most refers to min(mpg); has the highest price refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many American cars have an acceleration time of less than 12 seconds? American car refers to country = 'USA'; an acceleration time of less than 12 seconds refers to acceleration < 12"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many Japanese cars weigh more than 2000 lbs? Japanese car refers to country = 'Japan'; weigh more than 2000 lbs refers to weight > 2000"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: List the name of the most expensive car. car's name refers to car_name; the most expensive refers to max(price)"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What years did the Buick Skylark 320 get in production? year refers to model_year; Buick Skylark 320 refers to car_name = 'buick skylark 320'"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Which country produced the most expensive car in 1970? the most expensive refers to max(price); in 1970 refers to model_year = 1970"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: How many cars with horsepower greater than 200 were produced in 1975? horsepower greater than 200 refers to horsepower > 200; in 1975 refers to model_year = 1975"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: Calculate the percentage of American cars among all cars. American car refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"
cars,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE country (
origin integer,
country text,
PRIMARY KEY (origin),
);
CREATE TABLE price (
ID integer,
price real,
PRIMARY KEY (ID),
);
CREATE TABLE data (
ID integer,
mpg real,
cylinders integer,
displacement real,
horsepower integer,
weight integer,
acceleration real,
model integer,
car_name text,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES price(ID),
);
CREATE TABLE production (
ID integer,
model_year integer,
country integer,
FOREIGN KEY (ID) REFERENCES data(ID),
FOREIGN KEY (country) REFERENCES country(origin),
);
---------------------
QUESTION: What is the average weight of Japanese cars with 4 cylinders that were produced from 1975 to 1980? Japanese car refers to country = 'Japan'; with 4 cylinders refers to cylinders = 4; produced from 1975 to 1980 refers to model_year BETWEEN 1975 AND 1980; average weight = avg(weight)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total amount of donations in 2012. total amount of donations refers to sum(donation_total); 2012 refers to donation_timestamp LIKE'2012%'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: When was the highest amount of donated? How much was the amount? when refers donation_timestamp; the highest amount refers to max(donation_total)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Calculate the total amount of donations made in 2011 for an honoree with payment via campaign page. total amount refers to sum(donation_total); 2011 refers to donation_timestamp LIKE'2011%'; honoree refers to for_honoree = 't'; via campaign page refers to via_giving_page = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support. not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name all the project titles whereby project materials are intended mainly for literary. intended mainly for literary refers to primary_focus_subject = 'Literacy'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name the project titles meant for school whereby 65% of the students are on reduced lunch. 65% of the students are on reduced lunch refers to poverty_level = 'highest poverty'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For project titled 'Toot Your Flute!', what is the main subject of the project materials intended for? Name the other projects with the similar focus. main subject refers to primary_focus_subject"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name the project titles created by teacher who acquired a doctor degree. teacher who acquired a doctor degree refers to teacher_prefix = 'Dr.'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost. 320 students will be impacted refers to students_reached = 320; name the project refers to title; project cost refers tp total_price_excluding_optional_support"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For all donors from Texas City, list their donation message and name of the project they donated to. from Texas City refers to donor_city = 'Texas City'; name of the project refers title"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name the vendors who provide resources for project 'Lights, Camera, Action!'. List all the item names and unit price for each. project 'Lights, Camera, Action!' refers to title = 'Lights, Camera, Action!'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How much donations have been collected for project 'Whistle While We Work!'? donations collected refers to sum(donation_to_project); project 'Whistle While We Work!' refers to title = 'Whistle While We Work!'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name and describe all projects created by New York teachers. project name refers to title; describe refers to short_description; New York teachers refers to teacher_ny_teaching_fellow = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: If funded, which are the projects that could impact at least 600 students for a school with moderate level of poverty? Name the projects and state the project cost. impact at least 600 students refers to students_reached > = 600; moderate level of poverty refers to poverty_level = 'moderate poverty'; project name refers to title; project cost refers to total_price_excluding_optional_support"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: From the total amount of donation to projects, what is the percentage of the amount is for school projects located in the rural area? located in the rural area refers to school_metro = 'rural'; percentage = divide(sum(donation_to_project), sum(donation_to_project where school_metro = 'rural'))*100%"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name the project that costs the most. How much has been collected from donation and what is the percentage amount still lacking? project name refers to title; costs the most refers to max(total_price_excluding_optional_support); amount collected from donation refers to sum(donation_to_project); percentage amount refers to divide(subtract(total_price_excluding_optional_support, sum(donation_to_project)), sum(donation_to_project))*100%"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools in the West New York School District have the highest poverty level? the highest poverty level refers to poverty_level = 'highest poverty'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donations from teachers were done in the state of Colorado? from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which project have the highest total price including optional support? Indicate the project id. highest total price including optional support refers to max(total_price_including_optional_support)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which state have the highest number of PayPal donations for an honoree whose portion of a donation included corporate sponsored giftcard? which state refers to donor_state; highest number refers to max(count(donor_state)); PayPal donations refers to payment_method = 'paypal'; for an honoree refers to for_honoree = 't'; included corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Who is the largest donor by amount? Give the donation id and the total amount of the donation. largest donor by amount refers to max(donation_total); total amount of the donation refers to donation_total"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the id of the project that has the highest optional tip? Indicate the names of the resources that were requested. highest optional tip refers to subtract(total_price_including_optional_support, total_price_excluding_optional_support); names of the resources refers to item_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What were the resources that were requested by the teacher for project ""d6ef27c07c30c81f0c16c32b6acfa2ff""? Indicate the quantities as well and whether or not the teacher acquired P.h.D or doctor degree. resources that were requested refers to item_name; project ""d6ef27c07c30c81f0c16c32b6acfa2ff"" refers to projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'; quantities refers to item_quantity; teacher_prefix = 'Dr. ' refers to teacher acquired P.h.D or doctor degree"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total price including optional support received by the teacher who posted the essay titled ""Recording Rockin' Readers""?"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the latitude and longitude of the school where the teacher who wrote ""Smile for the Camera!!!"" teaches? wrote ""Smile for the Camera!!!"" refers to title = 'Smile for the Camera!!!'; latitude refers to school_latitude; longitude refers to school_longitude"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total amount of all the donations made by the donor who made the highest donation in a single amount? Indicate the essay title to where he/she made his/her biggest donation. total amount of all the donations refers to sum(donation_total); highest donation refers to max(donation_total)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What are the favorite project types of each of the top 10 donors? favorite project type refers to project_resource_type; top donors refers to max(donation_total)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: When was the first ever project went live on the site and what were the names of the resources being requested? If there are multiple projects that have the same date, indicate each of them and their items. first ever project refers to min(date_posted); names of the resources refers to item_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the name of the vendor that supplies resources to the project ""iMath""? project ""iMath"" refers to title = 'iMath'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: When was the project with the highest quantity went live on the site? Indicate the grade level for which the project materials are intended. project with the highest quantity refers to max(item_quantity)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the average amount of donations by people who donated in the project ""Recording Rockin' Readers"" average amount of donations = divide(sum(donation_to_project), count(donor_acctid)); project ""Recording Rockin' Readers"" refers to title = 'Recording Rockin' Readers'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the essay title of the project that have the highest total price excluding optional support and who is the biggest donor? Identify the donor and calculate how many percent did he/she donated in the project. highest total price excluding optional support refers to max(total_price_excluding_optional_support); who refers to donor_acctid; percent = divide(donation_to_project, total_price_excluding_optional_support)*100%"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: From which state do the 5 biggest donor, who gave the highest cost of optional support, come from? List their donor_acctid and calculate for their average cost of optional support for every donations they make and identtify the project's type of resource to which they gave the hightest optional support. which state refers to school_state; highest cost of optional support refers to max(donation_optional_support); average cost of optional support = avg(donation_optional_support)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which project in Brooklyn that have the highest request of resources? State the the project ID including all of the name of item requested. in Brooklyn refers to school_city = 'Brooklyn'; highest request of resources refers to max(count(T1.item_name))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools in urban area requested for books resources? urban area refers to school_metro = 'urban'; books resources refers to project_resource_type = 'Books'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which school requested the highest amount of resources from Amazon? State the school's ID. highest amount of resources refers to max(count(schoolid)); Amazon refers to vendor_name = 'Amazon'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donors in Los Angeles donated to school in another city? in Los Angeles refers to donor_city = 'Los Angeles'; school in another city refers to school_city ! = 'Los Angeles'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the prefix for the teacher who handled the 'Reading About Other Cultures' project? Reading About Other Cultures' project refers to title = 'Reading About Other Cultures'; prefix for the teacher refers to teacher_prefix"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many students will be impacted for the Fit Firsties! Project? how many students refers to students_reached; Fit Firsties! project refers to title = 'Fit Firsties!'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List the title of all projects located in Chicago along with the ID of the donor. in Chicago refers to school_city = 'Chicago'; ID of the donor refers to donor_acctid"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which projects created by teachers with Doctor Degree where the project have more than 300 students involved. List down the title of the project. eachers with Doctor Degree refers to teacher_prefix = 'Dr.'; more than 300 students involved refers to students_reached > 300"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: State the name of vendor that supplies book resources to all school with literacy subject as their primary focus. literacy subject as primary focus refers to primary_focus_subject = 'Literacy'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the title of project that have the most expensive funds? the most expensive funds refers to max(multiply(item_unit_price, item_quantity))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among all the donors from New York, how many of them are teachers? from New York refers to donor_city = 'New York'; donor is a teacher refers to is_teacher_acct = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donors from New Jersey have made a donation for an honoree? from New Jersey refers to donor_state = 'NJ'; for an honoree refers to for_honoree = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please list the types of resources that the vendor Lakeshore Learning Materials has provided for the projects. Lakeshore Learning Materials is vendor_name; type of resources refers to project_resource_type;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the name of the item that is provided in the biggest amount by the vendor Lakeshore Learning Materials? lakeshore Learning Materials is vendor_name; biggest amount refers to Max(item_quantity);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the projects created by a teacher from New York, how many of them have a donor from the same city? New York is the donor city; donor from the same city refers to donor from New York in which teacher_ny_teaching_fellow = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many projects have their resources provided by the vendor Lakeshore Learning Materials and are created by a teacher with a doctor degree? Lakeshore Learning Materials is vendor_name;  teacher with a doctor degree refers to teacher_prefix = 'Dr.';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please list the vendor providing resources for the projects of a school with the highest poverty level. highest poverty level refers to poverty_level = 'highest poverty';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Of the projects whose resources are provided by the vendor Lakeshore Learning Materials, the school of which project has the highest cost of labor fulfillment? Please give its school ID. Lakeshore Learning Materials is vendor_name; highest cost of labor fulfillment refers to Max(fulfillment_labor_materials);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Who is the vendor of the resources needed by the project that had the highest cost of optional tip? Highest cost of the optional tip refers to Max(total_price_including_optional_support - total_price_excluding_optional_support);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total donated amount for projects created by a teacher working in a school in Brooklyn? school in Brooklyn refers to school_city = 'Brooklyn'; total donated amount refers to donation_total;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please list the donation messages of the donations for the projects created by a teacher working in a public magnet school in Brooklyn. school in Brooklyn refers to school_city = 'Brooklyn'; public magnet refers to school_magnet = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the donations with a portion using account credits redemption, how many of them are for projects created by teachers working in a public year-round school? portion using account credits redemption refers to payment_included_acct_credit = 't'; year-round school refers to school_year_round = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total donation amount made for projects whose main subject area are Literacy & Language? main subject area refers to primary_focus_area = 'Literacy & Language'; total donation amount refers to Sum(dollar_amount);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which donor has donated the most for a project whose main subject area is Literacy & Language? Please give his or her ID. main subject area refers to primary_focus_area = 'Literacy & Language'; donated the most refers to Max(donation_total);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the most requested item under the resource type ""Supplies"" for projects whose main subject area is Literacy & Language? main subject area refers to primary_focus_area = 'Literacy & Language'; resource type supplies refers to project_resource_type = 'Supplies'; most requested item refers to Max(item_quantity);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which item provided to a project whose main subject area is Literacy & Language has the highest unit price? main subject area refers to primary_focus_area = 'Literacy & Language'; highest unit price refers to Max(item_unit_price);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the average donation amount to a project created by a teacher working in a school in Brooklyn? school in Brooklyn refers to school_city = 'Brooklyn'; Average = AVG(donation_total);"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: To which city did donor “22cbc920c9b5fa08dfb331422f5926b5” donate? donor “22cbc920c9b5fa08dfb331422f5926b5” refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; city refers to donor_city"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Is donor “22cbc920c9b5fa08dfb331422f5926b5” a teacher? donor “22cbc920c9b5fa08dfb331422f5926b5” refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; is a teacher refers to is_teacher_acct;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Have the teacher ""42d43fa6f37314365d08692e08680973"" acquired P.h.D or doctor degree? teacher ""42d43fa6f37314365d08692e08680973"" refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Is teacher ""42d43fa6f37314365d08692e08680973"" a New York teacher? teacher ""42d43fa6f37314365d08692e08680973""refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please list the titles of projects by which schools in Abington was donated. Abington is school_city;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please list the resource names of project that teacher ""822b7b8768c17456fdce78b65abcc18e"" created. teacher ""822b7b8768c17456fdce78b65abcc18e"" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the schools' projects whose donation didn't use account credits redemption,how many schools are public magnet schools? donation didn't use account credits redemption refers to payment_included_acct_credit = 'f'; magnet school refers to school_magnet = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Please provide the type of resource that donation ""b39547f29dfc25fb13c6e9e8d940dc43"" contain. donation ""b39547f29dfc25fb13c6e9e8d940dc43"" refers to donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'; type of resource refers to project_resource_type;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among public magnet schools,what percentage of schools that receive the donated resources as books? magnet school refers to school_magnet = 't'; donated resources as books refers to project_resource_type = 'Books'; percentage = Divide(Count(projectid) where project_resource_type = 'Books', Count(projectid))*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: In the schools donated by the project of the resources provided by ABC School Supply, how many schools are public magnet schools? ABC School Supply is vendor_name;  public magnet school refers to school_magnet = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the schools donated by donor ""000eebf28658900e63b538cf8a73afbd"",how many schools whose poverty level are highest? donor ""000eebf28658900e63b538cf8a73afbd"" refers to donor_acctid = '000eebf28658900e63b538cf8a73afbd'; highest poverty level refers to poverty_level = 'highest poverty';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the short description of the project that gives donation to school “301c9bf0a45d159d162b65a93fddd74e”? school “301c9bf0a45d159d162b65a93fddd74e"" refers to schoolid = '301c9bf0a45d159d162b65a93fddd74e';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which city does the school that project ""iMath"" donated to in? iMath is the title; city refers to school_city;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How to pay the donation of the project that teacher ""822b7b8768c17456fdce78b65abcc18e"" created? teacher ""822b7b8768c17456fdce78b65abcc18e"" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; how to pay the donation refers to payment_method;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How much did the project that teacher ""822b7b8768c17456fdce78b65abcc18e"" created donate? teacher ""822b7b8768c17456fdce78b65abcc18e"" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; donated refers to donation_total;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Is the donor who donated to school ""d4af834b1d3fc8061e1ee1b3f1a77b85"" a teacher? school ""d4af834b1d3fc8061e1ee1b3f1a77b85"" refers to schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'; donor is a teacher refers to is_teacher_acct = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the schools whose donators are teachers, what is the percentage of schools that are in Brooklyn? donors are teachers refers to is_teacher_acct = 't'; Brooklyn is school_city; percentage = Divide(Count(school_city-'Brooklyn'),Count(school_city))*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the projects whose donators are teachers, what is the percentage of projects that affected more than 30 students? donors are teachers refers to is_teacher_acct = 't'; affect more than 30 students refers to students_reached>30; Percentage = Divide(Count(students_reached>30), Count(students_reached))*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools which have suburban metro are there in Bethlehem? Bethlehem is school_city; suburban metro refers to school_metro = 'suburban';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the number of the year round school in Los Angeles? Los Angeles is school_city; year-round school refers to school_year_round = 't';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: State the number of public magnet schools in New York Manhattan. public magnet school refers to school_magnet = 't'; in New York Manhattan refers to school_country = 'New York(Manhattan)';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many teachers in Twin Falls have Math & Science as their primary focus area? Twin Falls is school_country; 'Math & Science' is primary_focus_area;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many teachers that have Literature & Writing as their primary focus subject use 'Mr' as their teacher prefix? Literature & Writing' is primary_focus_subject; use 'Mr' as their teacher prefix refers to teacher_prefix = 'Mr';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total number of projects that was created by the teachers that teach 3-5 grades in Boston Public School District? teach 3-5 grades refers to grade_level = 'Grades 3-5'; 'Boston Public School District' is school_district;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For the teacher who wrote the project 'ABC Read', which city was he/she in? ABC Read' is the title; city refers to school_city"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'? Creating Memories and Inspiring Dreams is title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Is the donor of the project 'Calculate, Financial Security For Tomorrow Starts Today! ' a teacher? Calculate, Financial Security For Tomorrow Starts Today! ' is title; donor is a teacher refers to is_teacher_acct = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the title for the project that got the donation message as ""Donation on behalf of Matt Carpenter because I'm a strong believer in education""."
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many number of donations did the project 'A Rug For Reaching Readers' get? A Rug For Reaching Readers'is the title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total donation amount for the project 'Engaging Young Readers with a Leveled Classroom Library'? Engaging Young Readers with a Leveled Classroom Library' is the title; total donation amount = Add(donation_to_project, donation_optional_support)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What was the donation optional support amount for the project 'Armenian Genocide'? Armenian Genocide' is the title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: State the short description for the project which got the donation at 14:44:29 on 2012/9/6. donation at 14:44:29 on 2012/9/6 refers to donation_timestamp = '2012/9/6 14:44:29';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Did the project 'I Can't See It...Can You Help Me???' get the tip for the donation? I Can't See It...Can You Help Me???' is the title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ? donation at 11:38:43 on 2008/7/29 refers to donation_timestamp = '2008/7/29 11:38:43'; teacher's account ID refers to teacher_acctid;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Show the school id for the project 'Virtual Aquarium Needs Help!'. Virtual Aquarium Needs Help!' is the title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What was the title for the project which got the biggest donation? biggest donation refers to donation_total = 'max';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For the donation of the project 'Awesome Audiobooks Make Avid Readers', what was the percentage of the tip in the total amount? Awesome Audiobooks Make Avid Readers' is the title; percentage = Divie(donation_optional_support, donation_total)*100;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For the all donations to the project 'Bringing Drama to Life', what is the percentage of the donation is paid by credit card? Bringing Drama to Life' is the title; Percentage = Divide(Count(payment_method = 'creditcard'), Count(projectid))*100;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the short description for the title Future Einsteins Of America?"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Write down the need statement of Family History Project. Family History Project refer to title, need statement refer to need_statement"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many suburban metros are there in Livingston Parish School District? suburban metros refer to metro = 'suburban'; Livingston Parish School District refer to school_district"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Name the vendors that sell the item Classroom Keepers Management Center. vendor refer to vendor_name; Classroom Keepers Management Center refer to item_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List the resource types available at Sax Arts & Crafts. Sax Arts & Crafts refer to vendor_name; resource type available refer to project_resource_type"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which school county in the state of New York has a high number of low poverty levels? New York refer to school_state = NY; highest number of low poverty level refer to MAX(poverty level = ’low poverty’)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which school district was Future Einsteins Of America project located at? Future Einsteins of America refer to title"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What payment method was used for Needed Resource Materials For My Students? Needed Resource Materials For My Students refer to title"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donations were paid via credit card to Memphis City School District? paid via credit card refer to payment method = creditcard; Memphis City School District refer to school_district"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List the school districts that have bought resources from Barnes and Noble. Barnes and Noble refer to vendor_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Give the coordinates of the buyer of R & A Plant Genetics from Benchmark Education. coordinates refer to (school_latitude, school_longitude); R & A Plant Genetics refer to item_name; Benchmark Education refer to vendor_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations? Georgia refer to school_state = 'GA'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What are the coordinates of the school where project 'Look, Look, We Need a Nook!' Was donated to and what resource type is it? Coordinates of the school refer to school_latitude, school_longitude); Look, Look, We Need a Nook! Refer to title;"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Write the messages of those who donated to the Newark School District in the coordinates of 40.735332, -74.196014. message refer to donation_message; Newark School District refer to school_district; 40.735332, -74.196014 refer to (school latitude, school_longitude)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What date did the project with he 'Lets Share Ideas essay' went live? date refer to date_posted; Lets Share Ideas refer to title"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Write the message of the donor of the project with the title of Lets Share Ideas who paid with a credit card. message of the donor refer to donation_message; Lets Share Ideas refer to title; paid with a credit card refer to payment_method"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which resource type is commonly bought by the Los Angeles Unified School District? resource type refer to project_resource_type; most commonly bought refer to COUNT(project_resource_type where school_district = ’Los Angeles Unif Sch Dist’); Los Angeles Unified School District refer to school_district = ’Los Angeles Unif Sch Dist’"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which cities in the Los Angeles Unified School District has bought supplies from Quill.com? cities refer to school_city; Los Angeles Unified School District refer to school_district = 'Los Angeles Unified School District'; supplies refer to project_resource_type; Quill.com refer to vendor_name"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total price of items brought from ABC School Supply with a listed type of Other? Also include the list of the buyers' coordinates and school districts they belong to. ABC School Supply refer to vendor_name; listed type as Other refer to project_resource_type = 'Other'; coordinates refer to coordinates(school_latitude, school_longitude); total price of items refer to SUM(MULTIPLY(item_unit_price, item_quantity where vendor_name = ’ABC School Supply’))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Calculate the sum of all the total amount donated to the essay project titled 'Lets Share Ideas' which were paid through paypal and indicate the city and poverty level. paypal refer to payment method; Lets Share Ideas refer to title; city refer to school_city; total amount donated refer to SUM(donation_total of paypal where payment_method = ’paypal’)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donors who donated to the city of Pocatello are not teachers? city of Pocatello refers to donor_city = 'Pocatello'; not teachers refers to is_teacher_acct = 'f'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools in Suffolk County have Ph.D. teachers? Suffolk County refers to School_county = 'Suffolk'; Ph.D. teachers refers to Teacher_prefix = 'Dr.'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the sum of the total donated amounts paid through Amazon? paid through Amazon refers to payment_method = 'Amazon'; sum of the total donated amounts refers to SUM(donation_to_project,donation_optional_support)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donations of more than $100 were made for an honoree? an honoree refers to for_honoree = 't'; more than $100 refers to dollar_amount = '100_and_up'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many resources with a unit price less than 15 are not technology type? List them by vendor id unit price less than 15 refers to item_unit_price< = 15; are not technology type refers to project_resource_type = 'technology'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: On how many projects where the teacher has ordered between 5 to 10 items are from are from Quill.com? ordered between 5 to 10 items refers to item_quantity between 5 and 10; are from Quill.com refers to vendor_name = 'Quill.com'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List by school id projects from schools located in the Union Pub School District I-9 that have a New York teaching fellow located in the Union Pub School District I-9 refers to school_district = 'Union Pub School District I-9'; New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: In which cities are Los Angeles County Suburban Metro Schools located? Los Angeles County refers to school_county = 'Los Angeles'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What are the vendors of the book-type projects? List them with the project ID. book-type projects refers to project_resource_type = 'Books'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What percentage of projects that have not received a cash donation have received a portion of a donation included corporate sponsored giftcard? have not received a cash donation refers to payment_method = 'no_cash_received'; received a portion of a donation included corporate sponsored giftcard payment_included_campaign_gift_card = 't'; percentage refers to DIVIDE(payment_included_campaign_gift_card = 't',payment_included_campaign_gift_card)*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What percentage of projects in the City of Santa Barbara are in suburban metro? City of Santa Barbara refers to school_city = 'Santa Barbara'; percentage refers to DIVIDE(school_metro = 'suburban'; school_metro)*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the percentage of payment methods of donations made in March 2013? made in March 2013 refers to substr(donation_timestamp,1,7) = '2013-03'; percentage refers to DIVIDE(SUM(payment_method made in March 2013), SUM(payment_method))*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the average unit price of AKJ Books items? AKJ Books items refers to vendor_name = 'AKJ Books'; average unit price refers to DIVIDE(sum(item_unit_price),count(resourceid))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools in Brooklyn with urban metro and donations for an honoree have requested TT992 - Refill Pack for Safety Name Tags as a resource? in Brooklyn refers to school_city = 'Brooklyn'; urban metro refers to school_metro = 'urban'; donations for an honoree refers to for_honoree = 't'; requested TT992 - Refill Pack for Safety Name Tags refers to item_name = 'TT992 - Refill Pack for Safety Name Tags'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many schools with the highest level of poverty have received a portion of a donation included corporate sponsored gift card? highest level of poverty refers to poverty_level = 'highest'; received a portion of a donation included corporate sponsored gift card refers to payment_included_campaign_gift_card = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: In which city is there a greater number of schools that have received donations of less than 10 dollars? received donations of less than 10 dollars refers to dollar_amount = 'under_10'; city refers to school_city"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the project title of the school located at latitude 42003718 and longitude -87668289? latitude 42003718 refers to school_latitude = 42003718; longitude -87668289 refers to school_longitude = -87668289"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Find out if the project with the title Team More Books! has a New York teaching fellow. title Team More Books! Refers to title = 'Team More Books!'; as a New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the name of the vendors that serve resources to schools whose primary focus area is Literature? primary focus area is Literature refers to primary_focus_area = 'Literature'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the name of the vendors serving material for projects for grades 9-12? for grades 9-12 refers to grade_level = 'Grades 9-12'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many teachers have made some type of donation for projects in Chicago? in Chicago refers to school_city = 'Chicago'; teachers refers to is_teacher_acct = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many Rock Hill City School projects have teacher donors? Rock Hill City School refers to school_city = 'Rock Hill'; teacher donors refers to is_teacher_acct = 't'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total sum of the donations paid with an optional support in projects that reach more than 300 students? with an optional support refers to donation_included_optional_support = 't'; reach more than 300 students refers to students_reached>300"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many total items were requested for the Onslow Co School District urban metro school projects? Onslow Co School District refers to school_district = 'Onslow Co School District';"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the average total donations received by Fresno County colleges? Fresno County colleges refers to school_county = 'Fresno'; average refers to DIVIDE(sum(donation_optional_support,donation_to_project),sum(donation_total))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: In what percentage of counties has the ABC Read project been launched? ABC Read project been launched refers to title = 'ABC Read'; percentage refers to DIVIDE(count(case when title = 'ABC Read' then school_county else null end),count(school_county))*100"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the average amount of resources from projects that have received donations per honoree? donations per honoree refers to for_honoree = 't'; average refers to DIVIDE(sum(item_quantity), count(donationid))"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: When did the project ""Photojournalists Want to Exhibit Their Best Works"" go live? project ""Photojournalists Want to Exhibit Their Best Works"" refers to title = 'Photojournalists Want to Exhibit Their Best Works'; when project go live refers to datePosted"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Which item provided for projects with Mathematics as a primary subject is the most expensive? Mathematics as a primary subject refers to primary_focus_subject = 'Mathematics'; most expensive refers to max(item_unit_price)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Where is the school that needs a ""Viewscreen LCD from Texas Instruments, TI-84 Plus""? Provide the latitude and longitude of that school. needs a ""Viewscreen LCD from Texas Instruments, TI-84 Plus"" refers to item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus'; where is the school refers to school_city; latitude refers to school_latitude; longtitude refers to school_longitude"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: How many donations does the project ""Look, Look, We Need a Nook!"" have? project ""Look, Look, We Need a Nook!"" refers to title = 'Look, Look, We Need a Nook!'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List the poverty level of all the schools that received donations with the zip code ""7079"". zip code ""7079"" refers to donor_zip = '7079'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the name of the vendor that the project ""Bloody Times"" uses for their resources? project ""Bloody Times"" refers to title = 'Bloody Times'"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List all the items from ""Sax Arts & Crafts"" and the zip code of the schools that received them. from ""Sax Arts & Crafts"" refers to vendor_name = 'Sax Arts & Crafts'; zip code of the schools refers school_zip"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What are the coordinates of the school with the project ""Wiping Away Bad Grades""? project ""Wiping Away Bad Grades"" title = 'Wiping Away Bad Grades'; coordinates refers to school_longitude, school_latitude"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: List the primary subject of all the donations with a corporate sponsored giftcard. corporate sponsored giftcard refers to payment_included_campaign_gift_card = 't'; primary subject refers to primary_focus_subject"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the most expensive book item? Please provide a short description of projects related to those. book item refers to project_resource_type = 'Books'; most expensive refers to MAX(item_unit_price)"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: For what grade was the project ""Too Close for Comfort"" for? project ""Too Close for Comfort"" refers to title = 'Too Close for Comfort'; grade refers to grade_level"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What is the total number of students impacted by the projects with a donation from a donor with zip code ""22205""? zip code ""22205"" refers to donor_zip = '22205'; students impacted refers to students_reached"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: What percentage of donations are given via a giving or campaign page? List the primary area of those donations. given via a giving or campaign page refers to via_giving_page = 't'; percentage refers to DIVIDE(count(case when via_giving_page = 't' then donationid else null end),count(donationid))*100; primary area of donation refers to primary_focus_area"
donor,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE essays (
projectid text,
teacher_acctid text,
title text,
short_description text,
need_statement text,
essay text,
);
CREATE TABLE projects (
projectid text,
teacher_acctid text,
schoolid text,
school_ncesid text,
school_latitude real,
school_longitude real,
school_city text,
school_state text,
school_zip integer,
school_metro text,
school_district text,
school_county text,
school_charter text,
school_magnet text,
school_year_round text,
school_nlns text,
school_kipp text,
school_charter_ready_promise text,
teacher_prefix text,
teacher_teach_for_america text,
teacher_ny_teaching_fellow text,
primary_focus_subject text,
primary_focus_area text,
secondary_focus_subject text,
secondary_focus_area text,
resource_type text,
poverty_level text,
grade_level text,
fulfillment_labor_materials real,
total_price_excluding_optional_support real,
total_price_including_optional_support real,
students_reached integer,
eligible_double_your_impact_match text,
eligible_almost_home_match text,
date_posted date,
PRIMARY KEY (projectid),
);
CREATE TABLE donations (
donationid text,
projectid text,
donor_acctid text,
donor_city text,
donor_state text,
donor_zip text,
is_teacher_acct text,
donation_timestamp datetime,
donation_to_project real,
donation_optional_support real,
donation_total real,
dollar_amount text,
donation_included_optional_support text,
payment_method text,
payment_included_acct_credit text,
payment_included_campaign_gift_card text,
payment_included_web_purchased_gift_card text,
payment_was_promo_matched text,
via_giving_page text,
for_honoree text,
donation_message text,
PRIMARY KEY (donationid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
CREATE TABLE resources (
resourceid text,
projectid text,
vendorid integer,
vendor_name text,
project_resource_type text,
item_name text,
item_number text,
item_unit_price real,
item_quantity integer,
PRIMARY KEY (resourceid),
FOREIGN KEY (projectid) REFERENCES projects(projectid),
);
---------------------
QUESTION: Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items. technology items refers to project_resource_type = 'Technology'; from Best Buy for Business refers to vendor_name = 'Best Buy for Business'; percentage refers to DIVIDE(count(case when vendor_name = 'Best Buy for Business'),count(projectid))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1? result = subtract(sum(num_sales where game_platform_id = 50), sum(num_sales where game_platform_id = 51))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Please list all the games that have the same game genre as 3D Lemmings. game refers to game_name; 3D Lemmings refers to game_name = '3D Lemmings'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many action games are there in total? action game refers to genre_name = 'Action'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of 3D Lemmings? genre refers to genre_name; 3D Lemmings refers to game_name = '3D Lemmings'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Who is the publisher of 3D Lemmings? publisher refers to publisher_name; 3D Lemmings refers to game_name = '3D Lemmings'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Please list the names of all the games published by 10TACLE Studios. name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Among the games published by 10TACLE Studios, how many of them are puzzles? published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Please list the names of all the games published by 10TACLE Studios and are puzzles. name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher has published the most games? publisher refers to publisher_name; the most games refers to max(count(game_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: On which platform was Panzer Tactics released in 2007? platform refers to platform_name; Panzer Tactics refers to game_name = 'Panzer Tactics'; released in 2007 refers to release_year = 2007"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In which year was Panzer Tactics released on DS? year refers to release_year; Panzer Tactics refers to game_name = 'Panzer Tactics'; on DS refers to platform_name = 'DS'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Please list the names of the publishers of all the puzzle games. name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the name of the publisher that has published the most puzzle games? name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'; the most puzzle games refers to max(count(game_id where genre_name = 'Puzzle'))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many publishers have published more than 3 puzzle games? puzzle refers to genre_name = 'Puzzle'; more than 3 puzzle games refers to count(game_id where genre_name = 'Puzzle') > 3"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Among the games published by Nintendo, what is the percentage of those in the genre of sports? published by Nintendo refers to publisher_name = 'Nintendo'; in the genre of sports refers to genre_name = 'Sports'; percentage = divide(count(game_id where genre_name = 'Sports'), count(game_id)) * 100% where publisher_name = 'Nintendo'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were sold on the DS platform on average in the 4 different regions? on the DS platform refers to platform_name = 'DS'; number of games sold on average = divide(sum(multiply(num_sales, 100000)), 4) where platform_name = 'DS'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Tell the number of games whose publisher id is 352. number of games refers to count(game_id)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the genre id of the game Pro Evolution Soccer 2012. Pro Evolution Soccer 2012 refers to game_name = 'Pro Evolution Soccer 2012'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: State the region id of Japan. region id refers to region.id; Japan refers to region_name = 'Japan'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Show the id of the game platform with the most sales in region 2. id of the game platform refers to game_platform_id; the most sales refers to max(num_sales); region 2 refers to region_id = '2'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which genre has the most games? Show its id. the most games refers to max(game_id); genre id refers to genre_id"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the id of the game ""Resident Evil Archives: Resident Evil""? id of game refers to game.id; ""Resident Evil Archives: Resident Evil"" refers to game_name = 'Resident Evil Archives: Resident Evil'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Show the number of games which were released on X360 in 2010. on X360 refers to platform_name = 'X360'; in 2010 refers to release_year = '2010'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: State the publisher name of the game ""ModNation Racers"". game ""ModNation Racers"" refers to game_name = 'ModNation Racers'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Show the id of game platform which makes the most sales in Japan. id of game platform refers to game_platform_id; the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many platforms are available for the game Pro Evolution Soccer 2016? game Pro Evolution Soccer 2016 refers to game_name = 'Pro Evolution Soccer 2016'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games in the database belong to the genre of sports? the genre of sports refers to genre_name = 'Sports'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Name of the publisher of the game id 10031. name of publisher refers to publisher_name; the game id 10031 refers to game_id = '10031'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: State the name of the publisher with the most games. name of publisher refers to publisher_name; the most games refers to max(game_id)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many more sports games than simulation games? sports game refers to genre_name = 'Sports'; simulation game refers to genre_name = 'Simulation'; how many more = subtract(sum(game_id where genre_name = 'Sports'), sum(game_id where genre_name = 'Simulation'))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Tell the genre of the game ""Resident Evil: Revelations"". genre refers to genre_name; game ""Resident Evil: Revelations"" refers to game_name = 'Resident Evil: Revelations'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many sales does game platform id 3871 make in Europe? number of sales = multiply(num_sales, 100000); in Europe refers to region_name = 'Europe'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the number of games which were published by Ascaron Entertainment GmbH. published by Ascaron Entertainment GmbH refers to publisher_name = 'Ascaron Entertainment GmbH'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Show the name of the earliest platform in the database. the earliest refers to min(release_year); name of platform refers to platform_name"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: For all the games which were published by Namco Bandai Games, what percentage of them were adventure games? published by Namco Bandai Games refers to publisher_name = 'Namco Bandai Games'; adventure game refers to genre_name = 'Adventure'; percentage = divide(sum(game_id where genre_name = 'Adventure'), count(game_id)) * 100% where publisher_name = 'Namco Bandai Games'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many times more is the number of games which were published by Atari than Athena? published by Atari refers to publisher_name = 'Atari'; published by  Athena refers to publisher_name = 'Athena'; times = divide(sum(publisher_id where publisher_name = 'Atari'), sum(publisher_id where publisher_name = 'Athena'))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games did Electronic Arts publish? Electronic Arts refers to publisher_name = 'Electronic Arts'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the Advent Rising game? genre refers to genre_name; Advent Rising game refers to game_name = 'Advent Rising'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many role-playing games did Microsoft Game Studios publish? role-playing game refers to genre_name = 'Role-Playing'; Microsoft Game Studios refers to publisher_name = 'Microsoft Game Studios'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher published the most games? publisher refers to publisher_name; the most games refers to max(count(publisher_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In 2004, what are the names of the platforms where Codemasters publish its games? name of platform refers to platform_name; Codemasters refers to publisher_name = 'Codemasters'; in 2004 refers to release_year = 2004"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were released on PS4 in 2014? on PS4 refers to platform_name = 'PS4'; in 2014 refers to release_year = 2014"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the names of the publishers who published the oldest games? name of publisher refers to publisher_name; the oldest game refers to min(release_year)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many publishers in Japan released a game on X360 in 2011? in Japan refers to region_name = 'Japan'; on X360 refers to platform_name = 'X360'; in 2011 refers to release_year = 2011"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which game platform is the most popular in Europe? game platform refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which year has the most number of PC games releases? year refers to release_year; the most number of releases refers to max(count(game_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the names of all the publishers who published one game only. name of publisher refers to publisher_name; published one game only refers to count(publisher_id) = 1"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the names of the games that were published by 505 Games? name of game refers to game_name; published by 505 Games refers to publisher_name = '505 Games'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre ID of the game named 25 to Life? the game named 25 to Life refers to game_name = '25 to Life'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the game ID of games with genre ID 2. game ID refers to game.id; genre ID 2 refers to genre_id = 2"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the release year of record ID 1 to 10. record ID 1 to 10 refers to game.id BETWEEN 1 AND 10"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the game publisher ID of records with platform ID 15. platform ID 15 refers to platform_id = 15"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the record ID of records released between 2000 to 2003. record ID refers to game.id; released between 2000 to 2003 refers to release_year BETWEEN 2000 AND 2003"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the number of sales in region ID 2 with game platform ID 9615? number of sales refers to multiply(num_sales, 100000)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the names of platform where the games released in 2016 can be played on. name of platform refers to platform_name; released in 2016 refers to release_year = 2016"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: When was the game titled 3DS Classic Collection released? when refers to release_year; the game titled 3DS Classic Collection refers to game_name = '3DS Classic Collection'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the average number of sales in Japan? in Japan refers to region_name = 'Japan'; average number of sales = multiply(avg(num_sales), 100000) where region_name = 'Japan'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the genre of the games released from 2000 to 2002. genre refers to genre_name; released from 2000 to 2002 refers to release_year BETWEEN 2000 AND 2002"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the name of games published by 3DO. name of game refers to game_name; published by 3DO refers to publisher_name = '3DO'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many role-playing games are there? role-playing game refers to genre_name = 'Role-Playing'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the region name where games reached 300000 sales and above. reached 300000 sales and above refers to num_sales > 3"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which company published the game with the most sales in North America? company refers to publisher_name; the most sales refers to max(num_sales); in North America refers to region_name = 'North America'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the release year of the game that gained 350000 sales in North America? gained 350000 sales refers to num_sales = 3.5; in North America refers to region_name = 'North America'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In which platform does the game titled 15 Days available? platform refers to platform_name; the game titled 15 Days refers to game_name = '15 Days'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the name of the publisher of the game ID 75. name of publisher refers to publisher_name; the game ID 75 refers to game_id = 75"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the title of the game that gained the most sales in Japan? title of the game refers to game_name; gained the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the game publisher's name of the game with sales greater than 90% of the average sales in Japan. game publisher's name refers to publisher_name; sales greater than 90% of the average sales refers to num_sales > multiply(0.9, avg(num_sales)); in Japan refers to region_name = 'Japan'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Among the games released in 2004, what is the percentage of games on PSP? in 2004 refers to release_year = 2004; on PSP refers to platform_name = 'PSP'; percentage = divide(sum(platform_id where platform_name = 'PSP'), count(platform_id)) * 100% where release_year = 2004"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were released in 1981? released in 1981 refers to release_year = 1981"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre ID of the '2Xtreme' game? the '2Xtreme' game refers to game_name = '2Xtreme'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Sum the total game sales in every region for platform ID 9658. total game sales refers to multiply(sum(num_sales), 100000); platform ID 9658 refers to game_platform_id = 9658"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the ID of 1C Company. ID refers to publisher.id; 1C Company refers to publisher_name = '1C Company'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the genre name of the genre ID 3. genre ID 3 refers to genre.id = 3"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the game IDs that were released in 2017. game ID refers to game.id; released in 2017 refers to release_year = 2017"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: When was the ""Adventure Island"" game released? when refers to release_year; the ""Adventure Island"" game refers to game_name = 'Adventure Island'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games are puzzle genre? puzzle genre refers to genre_name = 'Puzzle'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the games that can be played on the SCD platform. game refers to game_name; on the SCD platform refers to platform_name = 'SCD'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were published by Acclaim Entertainment? published by Acclaim Entertainment refers to publisher_name = 'Acclaim Entertainment'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Name the publisher of the Chronicles of the Sword game. publisher refers to publisher_name; the Chronicles of the Sword game refers to game_name = 'Chronicles of the Sword'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the number of games sold in North America on the PS4 platform. number of games sold refers to sum(multiply(num_sales, 100000)); in North America refers to region_name = 'North America'; on the PS4 platform refers to platform_name = 'PS4'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the ID of the most popular platform in Europe. ID refers to game_platform_id; the most popular refers to max(num_sales); in Europe refers to region_name = 'Europe'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Name the game released in 2011. game refers to game_name; released in 2011 refers to release_year = 2011"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games can be played on the Wii platform? on the Wii platform refers to platform_name = 'Wii'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide any five games and release year under the sports genre. game refers to game_name; under the sports genre refers to genre_name = 'Sports'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Mention the genre of the 2Xtreme. genre refers to genre_name; the 2Xtreme game refers to game_name = '2Xtreme'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the platform where the Panzer Tactics can be played. platform refers to platform_name; the Panzer Tactics is a game name."
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate how many percent of sales in North America is higher than the average sale per region for platform ID 9577. in North America refers to region_name = 'North America'; platform ID 9577 refers to game_platform_id = 9577; percent = divide(subtract(num_sales where region_name = 'North America' and game_platform_id = 9577, avg(num_sales)), avg(num_sales)) * 100%"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which game has the longest name? game refers to game_name; the longest name refers to max(length(game_name))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were released in 2001? released in 2001 refers to release_year = 2001"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the total number of sales across all regions? total number of sales = sum(num_sales)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the average number of games published by a publisher? average number = divide(count(game_id), count(publisher_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the first year a game is released? the first year refers to min(release_year)"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the least common game genre? the least common game genre refers to min(count(genre_id)); genre refers to genre_name"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which is the publisher for the game ""Prism: Light the Way""? publisher refers to publisher_name; game ""Prism: Light the Way"" refers to game_name = 'Prism: Light the Way'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the platforms that release the most games each year. platform refers to platform_id; the most games refers to max(count(game_publisher_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games do not have any sales in Europe? do not have any sales refers to num_sales = 0; in Europe refers to region_name = 'Europe'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the games that were released in 2006? game refers to game_name; released in 2006 refers to release_year = 2006"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the game ""Mario vs. Donkey Kong""? genre refers to genre_name; game ""Mario vs. Donkey Kong"" refers to game_name = 'Mario vs. Donkey Kong'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher published the most games? publisher refers to publisher_name; the most games refers to max(count(game_id))"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List all the platform games. platform game refers to genre_name = 'Platform'; game refers to game_name"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the years that ""WiiU"" got a new game? year refers to release_year; ""WiiU"" refers to platform_name = 'WiiU'"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which game has the most sales in Japan? 
which game refers to game_name; most sales refers to MAX(num_sales); Japan refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the games from the publisher ""Activision"". games refers to game_name; ""Activision"" refers to publisher_name = 'Activision';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many different publishers have published a game that starts with ""Marvel""? game that starts with ""Marvel"" refers to game_name LIKE 'Marvel%';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What percentage of games are sports? percentage = MULTIPLY(DIVIDE(SUM(genre_name = 'sport'), COUNT(game_name)), 100.0); sports refers to genre_name = 'sport';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the ratio of game sales between North America and Japan? ratio = DIVIDE(SUM(num_sales WHERE region_name = 'North America'), SUM(num_sales WHERE region_name = 'Japan')); North America refers to region_name = 'North America'; Japan refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which year has the most number of video game releases? year that has the most number of video game releases refers to MAX(COUNT(release_year));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many video game publishers have Interactive in their names? publishers that have Interactive in their names refers to publisher_name LIKE '%Interactive%';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the top 2 platforms with the most sales in North America? platforms refers to platform_name; most sales refers to MAX(num_sales); North America refers to region_name = 'North America';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games did BMG Interactive Entertainment release in 2012? BMG Interactive Entertainment refers to publisher_name = 'BMG Interactive Entertainment'; release in 2012 refers to release_year = 2012;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the name of the publisher that released the most video games in 2007? name of the publisher refers to publisher_name; publisher that released the most video games in 2007 refers to MAX(COUNT(publisher_name)) WHERE release_year = 2007;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many publishers published the Minecraft game? Minecraft refers to game_name = 'Minecraft';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher has published the most number of Action games? which publisher refers to publisher_name; publisher that has published the most number of Action games refers to MAX(COUNT(publisher_name)) WHERE genre_name = 'Action'; Action games refers to game_name WHERE genre_name = 'Action';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many Sports games did Nintendo publish? Sports games refers to game_name WHERE genre_name = 'Sports'; Nintendo refers to publisher_name = 'Nintendo';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the game '2 Games in 1: Sonic Advance & ChuChu Rocket!'? genre refers to genre_name; '2 Games in 1: Sonic Advance & ChuChu Rocket!' is a game name;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many times did other regions make positive sales in DS platform? other regions refers to region_name = 'Other'; positive sales refers to num_sales > 0; DS platform refers to platform_name = 'DS';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the names of the games published by American Softworks? names of the games refers to game_name; American Softworks refers to publisher_name = 'American Softworks';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many strategy games are there? strategy games refers game_name WHERE genre_name = 'Strategy';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher published Overwatch? which publisher refers to publisher_name; Overwatch refers to game_name = 'Overwatch';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the name of the genre with the most number of video games? name of the genre refers to genre_name; genre with the most number of video games refers to MAX(COUNT(genre_name));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the number of games sold in Europe for game platform ID 26? total number of games sold = MULTIPLY(num_sales, 100000); Europe refers to region_name = 'Europe';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were released in the year 2001? released in the year 2001 refers to release_year = 2001;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games include the word 'Box' in their name? games include the word 'Box' in their name refers to game_name = '%Box%';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the three largest numbers of games sold? 3 largest numbers of games sold refers to game_name where MAX(num_sales) LIMIT 3;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What year were the first game released? year the first game was released refers to MIN(release_year);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What publishers have the word 'Entertainment' in their name? publishers that have the word 'Entertainment' in their name refers to publisher_name LIKE '%Entertainment%';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Indicate the name of all adventure games. name of games refers to game_name; adventure games refers to game_name WHERE genre_name = 'Adventure';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the name of all games published by 'Pioneer LDC'. name of games refers to game_name; 'Pioneer LDC' refers to publisher_name = 'Pioneer LDC';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Indicate the name of all the games published for the 'SCD' platform. name of games refers to game_name;  'SCD' platform refers to platform_name = 'SCD';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the name of all games published in Japan. name of games refers to game_name; Japan refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What genres are the games published by 'Agatsuma Entertainment'? genres refers to genre_name; 'Agatsuma Entertainment' refers to publisher_name = 'Agatsuma Entertainment';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games are not of the genres 'Role-Playing', 'Shooter' and 'Simulation'? not of the genres 'Role-Playing', 'Shooter' and 'Simulation' refers to genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation');"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Indicate, by region, which platform has sold the most games. region refers to region_name; platform refers to game_platform; sold the most games refers to MAX(SUM(num_sales));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher has published the most games in the 'Puzzle' genre? which publisher refers to publisher_name; publisher that has published the most games refers to MAX(COUNT(publisher_name)); puzzle genre refers to genre_name = 'Puzzle';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which game has sold the fewest units? which game refers to game_name; sold the fewest units refers to MIN(num_sales);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which publisher has published the game 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'? which publisher refers to publisher_name; 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' refers to game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In which regions has the game 'Pengo' been sold? which regions refers to region_name; 'Pengo' refers to game_name = 'Pengo';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List by name all the games released in the year 2010. name of the games refers to game_name; released in the year 2010 refers to release_year = 2010;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the average game sales for the PS2 platform. average = AVG(MULTIPLY(num_sales), 100000); PS2 refers to platform_name = 'PS2';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the percentage of games published by 'Brash Entertainment'? percentage = MULTIPLY(DIVIDE(SUM(publisher_name = 'Brash Entertainment'), COUNT(game_id)), 100.0); 'Brash Entertainment' refers to publisher_name = 'Brash Entertainment';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the total number of games sold in region ID 1? total number of games sold = MULTIPLY(SUM(num_sales), 100000);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many FIFA games are there across all platforms? FIFA games refers to game_name LIKE '%FIFA%';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which platform is the most popular in Europe? platform that is the most popular refers to platform_name WHERE MAX(num_sales); in Europe refers to region_name = 'Europe' ;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Who is the publisher of the game 2002 FIFA World Cup? who is the publisher refers to publisher_name; 2002 FIFA World Cup refers to game_name = '2002 FIFA World Cup';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What platform is the game 3Xtreme available on? what platform refers to platform_name; 3Xtreme refers to game_name = '3Xtreme';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What genre is the game 2010 FIFA World Cup South Africa? genre refers to genre_name; 2010 FIFA World Cup South Africa refers to game_name = '2010 FIFA World Cup South Africa';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Which region has the highest number of games sold on all platforms? which region refers to region_name; highest number of games sold on all platforms refers to MAX(SUM(num_sales));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were sold on PS3 platform in Japan? how many games = MULTIPLY(SUM(num_sales), 100000); PS3 refers to platform_name = 'PS3'; Japan refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the names of games that were released in 2007? names of games refers to game_name; released in 2007 refers to release_year = 2007;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games were published by Activision? Activision refers to publisher_name = 'Activision';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Indicate the release year of the game with more than 200000 sales in Japan. more than 200000 sales refers to SUM(num_sales) > 2; Japan refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In 2010, how many PS3 games were released? in 2010 refers to release_year = 2010; PS3 refers to platform_name = 'PS3';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Indicate the publisher who has published the most games of all time. publisher refers to publisher_name; publisher who has published the most games of all time refers to MAX(COUNT(publisher_name));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many shooter games are there? shooter games refers to game_name WHERE genre_name = 'shooter';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the percentage of games that were released on PS4 in 2014 among all platforms? percentage - MULTIPLY(DIVIDE(SUM(platform_name = 'PS4'), COUNT(game_id)), 100); in 2014 refers to release_year = 2014;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How much are the sales of the games in region ID 4? how much are the sales = SUM(num_sales);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the game platform IDs of games with a region ID of 1."
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the difference between sales of games from region ID 2 and region ID 3. difference = SUBTRACT(SUM(num_sales WHERE region_id = 2), SUM(num_sales WHERE region_id = 3));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the platform IDs of the games released in 2007. released in 2007 refers to release_year = 2007;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: State the game publisher IDs of the games with a platform ID of 16."
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the number of game publisher IDs for games released in 1984. released in 1984 refers to release_year = 1984;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the platform IDs of the games with a region ID of 3."
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the sales made by the games in Japan region? sales = SUM(num_sales); Japan region refers to region_name = 'Japan';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many game publisher IDs have published games on the X360 platform? X360 refers to platform_name = 'X360';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: State the name of the platforms for games released in 2000. name of the platforms refers to platform_name; released in 2000 refers to release_year = 2000;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Find out the difference between the number of publishers who released the games on the PS3 and X360. difference = SUBTRACT(SUM(platform_name = 'PS3'), SUM(platform_name = 'X360')); PS3 refers to platform_name = 'PS3'; X360 refers to platform_name = 'X360';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the game IDs of the games published by Bethesda Softworks? Bethesda Softworks refers to publisher_name = 'Bethesda Softworks';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the total number of IDs for the game published by Capcom and Sony Computer Entertainment. Capcom refers to publisher_name = 'Capcom';  Sony Computer Entertainment refers to publisher_name = 'Sony Computer Entertainment';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the game ""Grand Theft Auto V""? genre refers to genre_name; ""Grand Theft Auto V"" refers to game_name = 'Grand Theft Auto V';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the names of the games in the racing genre. name of games refers to game_name; racing genre refers to genre_name = 'Racing';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the number of games in the fighting genre. fighting genre refers to genre_name = 'Fighting';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the genres of games published by the publisher with an ID of 464? genres of games refers to genre_name; publisher with an ID of 464 refers to publisher_id = 464;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Find out the platform of the game ""Final Fantasy XIII-2"". platform of the game refers to platform_name; ""Final Fantasy XIII-2"" refers to game_name = 'Final Fantasy XIII-2';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the total sales made by the games released in 2000. total sales = SUM(num_sales); released in 2000 refers to release_year = 2000;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the difference in sales between the games released in 1990 and 2000. difference = SUBTRACT(SUM(num_sales WHERE release_year = 2000), SUM(num_sales WHERE release_year = 1990));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What are the platform IDs of records released in 2006? released in 1990 refers to release_year = 1990; 2000 refers to release_year = 2000;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Compute the average number of sales in region ID 3. average = AVG(MULTIPLY(num_sales, 100000));"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In which year did the record ID 19 with game publisher ID 6657 released? which year refers to release_year; record ID 19 refers to game platform.id; id = 19"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the total sales in all regions with game platform ID 66. total sales in all regions = MULTIPLY(SUM(num_sales), 100000);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the game name of the game ID 44."
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the games available on Wii. games available refers to game_name; Wii refers to platform_name = 'Wii';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the name of games released in 2015. names of games refers to game_name; released in 2015 refers to release_year = 2015;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the total number of adventure games released in 2005? adventure games refers to game_name WHERE genre_name = 'Adventure'; released in 2005 refers to release_year = 2005;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the name of the company that produced the game titled Adventure Time: Explore the Dungeon Because I Don't Know!? name of the company that produced the game refers to publisher_name; Adventure Time: Explore the Dungeon Because I Don't Know! Refers to game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the game platform ID and region name where the games achieved 20000 sales and below. 20000 sales and below refers to num_sales < 0.2;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Provide the name of game produced by 505 Games in 2006. name of game refers to game_name; 505 Games refers to publisher_name = '505 Games'; in 2006 refers to release_year = 2006;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the game ID 119? genre of the game refers to genre_name; game ID 119 refers to game.id = 119;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the game IDs of the games produced by Abylight. Abylight refers to publisher_name = 'Abylight';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In which region where a game had the lowest number of sales? which region refers to region_name; lowest number of sales refers to MIN(num_sales);"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down the name of strategy games. strategy games refers to game_name WHERE genre_name = 'Strategy';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In what platform does the game ID 178 available? platform refers to platform_name;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Give the genre of the following game titled 'Airlock' , 'Airline Tycoon' , and 'Airblade', respectively. genre refers to genre_name; 'Airlock', 'Airline Tycoon' , and 'Airblade' refers to game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Calculate the total number of sales in North America. total number of sales = MULTIPLY(SUM(num_sales), 100000); North America refers to region_name = 'North America';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List down at least five publishers of the games with number of sales less than 10000. publishers refers to publisher_name; number of sales less than 10000 refers to num_sales < 0.1;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: List the platform ID of the game titled Airborne Troops: Countdown to D-Day. Airborne Troops: Countdown to D-Day refers to game_name = 'Airborne Troops: Countdown to D-Day';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: How many games available on PSP were released in 2004? PSP refers to platform_name = 'PSP'; released in 2004 refers to release_year = 2004;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the genre of the game titled '999: Nine Hours, Nine Persons, Nine Doors' ? genre of the game refers to genre_name; '999: Nine Hours, Nine Persons, Nine Doors' refers to game_name = '999: Nine Hours, Nine Persons, Nine Doors';"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: When was the game ID 156 released? when the game was released refers to release_year;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: What is the diffrence between the number of games produced by Culture Brain that can be played on SNES and DS? difference = SUBTRACT(SUM(platform_name = 'SNES'), SUM(platform_name = 'DS')); SNES refers to platform_name = SNES ; DS refers to platform_name = 'DS' ;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: In games that can be played on Wii, what is the percentage of games released in 2007? Wii refers to platform_name = 'Wii'; percentage = MULTIPLY(DIVIDE(SUM(release_year = 2007), COUNT(release_year)), 100.0); released in 2007 refers to release_year = 2007;"
video_games,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE genre (
id integer,
genre_name text,
PRIMARY KEY (id),
);
CREATE TABLE game (
id integer,
genre_id integer,
game_name text,
PRIMARY KEY (id),
FOREIGN KEY (genre_id) REFERENCES genre(id),
);
CREATE TABLE platform (
id integer,
platform_name text,
PRIMARY KEY (id),
);
CREATE TABLE publisher (
id integer,
publisher_name text,
PRIMARY KEY (id),
);
CREATE TABLE game_publisher (
id integer,
game_id integer,
publisher_id integer,
PRIMARY KEY (id),
FOREIGN KEY (game_id) REFERENCES game(id),
FOREIGN KEY (publisher_id) REFERENCES publisher(id),
);
CREATE TABLE game_platform (
id integer,
game_publisher_id integer,
platform_id integer,
release_year integer,
PRIMARY KEY (id),
FOREIGN KEY (game_publisher_id) REFERENCES game_publisher(id),
FOREIGN KEY (platform_id) REFERENCES platform(id),
);
CREATE TABLE region (
id integer,
region_name text,
PRIMARY KEY (id),
);
CREATE TABLE region_sales (
region_id integer,
game_platform_id integer,
num_sales real,
FOREIGN KEY (region_id) REFERENCES region(id),
FOREIGN KEY (game_platform_id) REFERENCES game_platform(id),
);
---------------------
QUESTION: Among games sold in Europe, list the platform ID of games with sales lesser than 30% of the average number of sales. Europe refers to region_name = 'Europe'; sales lesser than 30% of the average number of sales refers to SUM(num_sales) < MULTIPLY(AVG(num_sales), 0.3);"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors are affiliated with University of California Berkeley? affiliated refers to Affiliation; 'University of California Berkeley' is the Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the paper ""Stitching videos streamed by mobile phones in real-time"" about? ""Stitching videos streamed by mobile phones in real-time"" is the Title of paper; what the paper is about refers to Keywords"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list the titles of the papers published in the journal ""Concepts in Magnetic Resonance Part A"" in 2008. journal ""Concepts in Magnetic Resonance Part A"" refers to FullName = 'Concepts in Magnetic Resonance Part A'; in 2018 refers to Year = 2018"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were published in the journal ""Concepts in Magnetic Resonance Part A""? journal ""Concepts in Magnetic Resonance Part A"" refers to FullName = 'Concepts in Magnetic Resonance Part A'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the url of the journal in which the paper ""Area Effects in Cepaea"" was published? url refers to HomePage; 'Area Effects in Cepaea' is the Title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the papers published in the journal ""Molecular Brain"", how many of them were published in the year 2011? ""Molecular Brain"" is the FullName of journal"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were published in 2011 in the journal whose short name is ""Mol Brain""? in 2011 refers to Year = 2011; 'Mol Brain' is the ShortName of journal"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors does the paper ""Equation Solving in Geometrical Theories"" have? ""Equation Solving in Geometrical Theories"" is the title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list the names of the authors of the paper ""Area Effects in Cepaea"". ""Area Effects in Cepaea"" is the title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the authors of the paper ""Stitching videos streamed by mobile phones in real-time"", how many of them are affiliated with Cairo Microsoft Innovation Lab? ""FIBER: A Generalized Framework for Auto-tuning Software"" is the Title of paper; affiliated refers to Affiliation;  University of Tokyo is the affiliation organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list the titles of the paper whose authors include Klaus Zimmermann. ""Klaus Zimmermann"" is the name of author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Which author of the paper ""Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web"" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan? ""Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web"" is the title of paper; affiliated with refers to Affiliation; ""National Taiwan University Department of Computer Science and Information Engineering Taiwan"" is the Affiliation organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title of the paper published in 1995 and whose author included Thomas Wiegand? published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers whose authors include Thomas Wiegand were published in 1995? published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the average number of papers published in the journal ""Molecular Brain"" every year from 2008 to 2011? ""Molecular Brain"" is the FullName of journal; year from 2008 to 2011 refers to Year BETWEEN 2008 AND 2011; average = Divide (Count(Id),4)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many more papers in total were published in the journal ""Cases Journal"" than in the journal ""Molecular Brain"" in percentage? ""Cases Journal"" and ""Molecular Brain"" are FullName of journal; more paper in percentage = Subtract(Count(Id(FullName = 'Cases Journal')), Count(Id(FullName = 'Molecular Brain')))/ Count(Id(FullNmae = 'Molecular Brain')) * 100"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many journals have a word ""computing"" in its full name? word computing refers to FullName LIKE '%computing%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Enumerate the paper and author ID of authors with affiliation with Cairo Microsoft Innovation Lab. ""Cairo Microsoft Innovation Lab"" is the Affiliation organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the short name and full name of conference uses the homepage ""http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html""?"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List down the author ID of authors with a name of ""Peter"". ""Peter"" is the name of author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the title of papers with a conference ID from 160 to 170, include their conference short name. conference ID from 160 to 170 refers to ConferenceId BETWEEN 160 AND 170"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title and journal homepage of the latest published paper? latest published paper refers to Max(Year)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: In year 1999, list the titles and conference's short name of paper authored by someone named ""Philip"". in year 1999 refers to Year = 1999;  someone named ""Philip"" refers to Name LIKE 'Philip%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the total number and conference's homepage of papers held in a conference with an ID of 187 during 1990 to 2000? Id of 187 refers to ConferenceId = 187; during 1990 to 2000 refers to Year BETWEEN 1990 and 2000; total number of conference refers to Count(ConferenceId = 187)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title of the paper published in 2003 by an author with affiliation with Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications? published in 2003 refers to Year = 2003; 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' is the Affiliation organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the authors and journal short name of the papers with ""chemiluminescence"" in its title and has a journal ID from 245 to 250. with ""chemiluminescence"" in its title refers to Title LIKE 'chemiluminescence%'; journal ID from 245 to 250 refers to JournalId BETWEEN 245 AND 250"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the papers with conference ID of 0, list down the authors of papers with a journal ID less than 100. Conference ID of 0 refers to ConferenceId = 0; journal ID of less than 100 refers to JournalId < 100"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title and author ID of paper with conference ID less than 100 in year 2006? conference ID less than 100 refers to ConferenceId < 100; in year 2006 refers to Year = 2006"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the paper IDs of papers presented in conferences has a homepage starts with ""http://www.informatik.uni-trier.de/~ley/db/conf/""? homepage starts with ""http://www.informatik.uni-trier.de/~ley/db/conf/"" refers to HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the journal homepages and author ID of the papers published in 2000 to 2005 with a word ""social"" in its title? in 2000 to 2005 refers to Year BETWEEN 2000 AND 2005; a word ""social"" in its title refers to Title = '%SOCIAL%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the author ID and their affiliations of authors of the papers with a journal ID of 0 and published in 2009. published in 2009 refers to Year = 2009; journal ID of 0 refers to JournalId = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: In papers with journal IDs from 200 to 300 and with its short name starts with A, what is the percentage of papers with conference ID of 0? journal ID of 200 to 300 refers to JournalId BETWEEN 200 AND 300; short name starts with A refers to ShortName LIKE 'A%'; Percentage = Divide (Count(ConferenceId = 0), Count(ConferenceId)) * 100"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Within the year of 2001 to 2010, find the paper published rate of 2001. year of 2001 to 2010 refers to Year BETWEEN 2001 AND 2010; Percentage = Divide(Count (PaperId(Year = 2001)), Count (PaperID(Year BETWEEN 2001 AND 2010))) * 100"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down the conference full name of ""ICWE"" and it's homepage address. ""ICWE"" is the ShortName of conference"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Between ""Standford University"" and ""Massachusetts Institute of Technolgy"", which organization had affiliated with more author.? ""Standford University"" and ""Massachusetts Institute of Technolgy"" are affiliation organization; affiliated with more author refers to Max(Count(Id))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the ratio of author with affiliation and without affiliation? with affiliation refers to Affiliation is not Null; without affiliation refers to Affiliation IS NULL; Ration = Count(Id(Affiliation is NOT NULL)) : Count (Id (Affiliation IS NULL))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down the author's name and IDs who are affiliated with Univeristiy of Oulu. ""University of Oulu"" is the Affiliation Organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down the title and affiliation of the preprinted paper written by ""Roger J.Marshal"". ""Roger J. Marshall"" is the name of author; preprinted paper refers to ConferenceId = 0 AND JournalId = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Find the paper ID, title, published year and journal's full name of the paper which included the most number in author. most number in author refers to Max (Count(PaperId))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Describe the paper title, published year, conference's short name and included author names in the paper ID of 15. paper ID of 15 refers to PaperId = 15"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any. author ID of under 100 refers to AuthorId < 100; 'Zurich, ETH' is the Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the author included in the paper of ""Inspection resistant memory: Architectural support for security from physical examination"", write down the author name and ID who were affiliated with Microsoft Research, USA. ""Inspection resistant memory: Architectural support for security from physical examination"" is the title of paper;  'Microsoft Research, USA' is the Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down the author name, affiliation, jounal short name and full name of the paper ""Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats"". ""Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats"" is the Title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the paper title and journal ID which were published under the conference name of ""International Symposium of Robotics Research"". ""International Symposium of Robotics Research"" is the FullName of conference;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Name the title, year and keyword of the paper which were written by the author ID of 661002 with the affiliation of ""Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA"" organization. ""661002"" is the AuthorId;  ""Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA"" is the Affiliation organization"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Calculate the differences of the paper number with the journal name of IWC in 2000 and 2010. ""IWC"" is the ShortName of journal;  '2000' and '2010' are Year;  Difference = Subtract(Count(Paper.Id(Year = 2000)), Count(Paper.Id(Year = 2010)))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Provide any four valid Journal ID along with short name and full name of the papers which were made in 2013. valid journal ID refers to JournalId! = 0 and JournalId! = -1; made in 2013 refers to Year = 2013"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO. ""MICRO"" is the ShortName of conference; in 1971 to 1980 refers to Year BETWEEN '1971' AND '1980'; in 1991 to 2000 refers to Year BETWEEN '1991' AND '2000': Average needed paper = Subtract (Count(PaperId(Year BETWEEN '1991' AND '2000')), Count(PaperId(Year BETWEEN '1971' AND '1980')))/10"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many of the papers are preprinted or not published? preprinted or not published refers to Year = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: State the full name of conference for paper ""The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure"". ""The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure"" is the Title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the homepage address for paper ""Energy-efficiency bounds for noise-tolerant dynamic circuits""? ""Energy-efficiency bounds for noise-tolerant dynamic circuits"" is the Title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down the name of authors for paper with id from 101 to 105. paper with ID from 101 to 105 refers to Id BETWEEN 100 AND 106"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the papers published in 2009, pick 10 and list down the conference's short name of these papers. published in 2009 refers to Year = 2009"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write down homepage URL of journal for paper ""364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results"". paper ""364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results"" refers to Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List down all paper name that were published in conference ""International Conference on Internet Computing"". conference ""International Conference on Internet Computing"" refers to FullName = 'International Conference on Internet Computing'; paper name refers to Title"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among papers that were published in 2005, provide the author name of paper with key words of ""LOAD; IDE; SNP; haplotype; asso- ciation studies"". in 2005 refers to Year = '2005'; key words of ""LOAD; IDE; SNP; haplotype; asso- ciation studies"" refers to Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors have written paper ""145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: ""? paper ""145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: "" refers to Title like'%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Who are the co-authors for Jei Keon Chae and what is the title of paper written by them? 'Jei Keon Chee' is the name of author;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the conference name and journal name of paper written by Shueh-Lin Yau? List down the name of co-authors and provide the title of that paper. Shueh-Lin Yau is the name of author;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were preprinted between the years 1990 and 2000? years 1990 and 2000 refers to Year BETWEEN '1990' AND '2000'; papers refers to COUNT(id)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the names of all authors affiliated with Birkbeck University of London. affiliated with Birkbeck University of London refers to Affiliation = 'Birkbeck University of London'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the short name of all conferences whose full name begins with International Symposium. full name refers to FullName LIKE 'International Symposium%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many journals do not have a website? do not have a website refers to HomePage = ''"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List author name for articles that are preprinted but not published. articles that are preprinted but not published refers to Year = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List author affiliation for papers whose topic is Quantum Physics. topic is Quantum Physics refers to Keyword = 'Quantum Physics'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Identify by conference full name all papers in which a journal was not published but a conference. journal was not published but a conference refers to ConferenceId ! = 0 And JournalId = 0 Year ! = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Identify by papers title those in which conferences have been published that do not have a website.. do not have a website refers to HomePage IS NULL OR HomePage = ''"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Identify by publication year in the paper database all journals that don't have short name. don't have short name refers to ShortName is NULL OR ShortName = ''"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the affiliation of the author writing in the journal 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'? journal 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV' refers to Title = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Indicate the name of all the journals published in the paper database in the year 2001. name of all the journals refers to FullName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the name of the co-authors of the paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'? paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' refers to Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: In how many papers and in what years was the International Conference on Database Theory published? the International Conference on Database Theory refers to FullName = 'International Conference on Database Theory'; published refers to year ! = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the full name of the journals that are published in the database papers whose topic is Sustainability? topic is Sustainability refers to Keyword = 'Sustainability'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the name of the authors of papers in which conferences have been published whose full name includes the word Workshop? full name includes the word Workshop refers to FullName LIKE '%Workshop%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN? about Charged particle multiplicity refers to Title which contains 'Charged particle multiplicity'; affiliated with INFN refers to Affiliation LIKE '%INFN%' ; percentage refers to DIVIDE(COUNT(Affiliation LIKE '%INFN%' ), COUNT(AuthorId)) * 100%"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What percentage of journals whose short name begins with ANN were published in the paper database in 1989? short name begins with ANN refers to ShortName like 'ANN%' ; percentage refers to DIVIDE(COUNT(ShortName like 'ANN%' ), COUNT(id)) * 100%;  in 1989 refers to Year = 1989"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors were associated with the Microsoft Research when paper number 1 was written? associated with the Microsoft Research refers to Affiliation contains 'Microsoft Research'; paper number 1 refers to PaperId = 1"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What was the topic of the article ""A Formal Approach to Service Component Architecture"" and when was it published? article ""A Formal Approach to Service Component Architecture"" refers to Title = 'A Formal Approach to Service Component Architecture'; topic of the article refers to Keyword"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What percentage of papers were preprinted after the year 2000? after the year 2000 refers to Year > 2000; preprinted refers to ConferenceId = 0 AND JournalId = 0; percentage refers to DIVIDE(COUNT(ConferenceId = 0 AND JournalId = 0 AND Year > 2000), COUNT(Id))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list the names of the authors of the paper ""Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers"". paper ""Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers"" refers to Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the full name of the journal that published the paper ""Multiple paternity in a natural population of a salamander with long-term sperm storage""? paper ""Multiple paternity in a natural population of a salamander with long-term sperm storage"" refers to Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were in the journal ""Iet Software/iee Proceedings - Software""? journal ""Iet Software/iee Proceedings - Software"" refers to FullName = 'Iet Software/iee Proceedings - Software'; papers refers to COUNT(JournalId)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the full name of the conference where paper number 5 was published? paper number 5 refers to Id = 5"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list the titles of any two papers that Jundu has written. papers that Jundu has written refers to Name LIKE '%Jun du%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title of the paper that was written by Cheng Huang and affiliated with Microsoft? paper that was written by Cheng Huang refers to Name = 'Cheng Huang'; affiliated with Microsoft refers to Affiliation LIKE 'Microsoft %'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please provide the full name of the conference where one of the papers of Jean-luc Hainaut were published. papers of Jean-luc Hainaut refers to Name = 'Jean-luc Hainaut'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the three journals that the papers written by Andrew Cain were published in? Please provide your answer with the full name of each journal. written by Andrew Cain refers to Name = 'Andrew Cain'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please list all of the associations that the authors of the paper ""FIBER: A Generalized Framework for Auto-tuning Software"" are affiliated with. paper ""FIBER: A Generalized Framework for Auto-tuning Software"" refers to Title = 'FIBER: A Generalized Framework for Auto-tuning Software'; are affiliated with refers to Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Please provide the titles of any two papers that are either preprinted or unpublished along with the full name of the journal to which those papers belong. papers that are either preprinted or unpublished along refers to Year = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the journal's short and full names that feature papers on the ""Materials"" topic? papers on the ""Materials"" topic refers to Keyword = 'Materials'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the names of authors affiliated with the University of Oxford in alphabetical order. affiliated with the University of Oxford refers to Affiliation = 'University of Oxford'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the short name and home page URL of all the international conferences on artificial intelligence. all the international conferences on artificial intelligence refers to FullName LIKE 'International Conference on Artificial Intelligence%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Find the names of papers which are published in the year 1996."
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the title and author's name of papers published in the 2007 Neoplasia journal. published in the 2007 refers to Year = 2007; Neoplasia journal refers to FullName = 'Neoplasia'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the authors affiliated with Soongsil University, list the authors' names and papers published during the year 2000. authors affiliated with Soongsil University refers to Affiliation = 'Soongsil University'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Give the title and author's name of the papers published between 2000 and 2005 that include the topic optical properties. published between 2000 and 2005 refers to Year BETWEEN 2000 AND 2005; include the topic optical properties refers to Keyword LIKE '%optical properties%'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the average number of papers published in the World Computer Congress each year? published in the World Computer Congress refers to FullName = 'World Computer Congress'; average refers to DIVIDE(COUNT(FullName = 'World Computer Congress'), COUNT(Id))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Give the Title and author's name of the books that were preprint in 1997. in 1997 refers to Year = 1997; books that were preprint refers to ConferenceId = 0 AND JournalId = 0"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Write the titles of papers published by Adam Jones and the journal name in which it was published from 2005 to 2010. published from 2005 to 2010 refers to Year BETWEEN 2005 AND 2010; published by Adam Jones refers to Name = 'Adam Jones'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors is affiliated to the organization ""Otterbein University""? Otterbein University is an Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors drafted the paper ""Subcellular localization of nuclease in barley aleurone""? 'Subcellular localization of nuclease in barley aleurone' is the title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the full name of the conference in which the paper titled ""Extended Fuzzy Regression Models"" was published? 'Extended Fuzzy Regression Models' is the title of paper; full name of the conference refers to FullName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers are published under the conference ""Mathematics of Program Construction
""? 'Mathematics of Program Construction' is the FullName of conference"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Who is the author of the paper titled ""Open Sourcing Social Solutions (Building Communities of Change)""? 'Open Sourcing Social Solutions (Building Communities of Change)' is a title of the paper; author refers to PaperAuthor.Name"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all the title of the paper that Jianli Hua published. Jianli Hua is the author of a paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Who authored the paper titled ""Testing timed automata
""? 'Testing timed automata' is a title of a paper; Who authored refers to PaperAuthor.Name"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers are published in year 2000 under the conference ""SSPR""? SSPR is a ShortName; papers refers to Paper.Id"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all the paper that the journal ""Theoretical Computer Science
"" published in 2003. 'Theoretical Computer Science' is the FullName; paper refers to Title; published in 2003 refers to Year = 2003"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the conference homepage URL of the paper titled ""Quality evaluation of long duration audiovisual content""? homepage URL refers to HomePage; 'Quality evaluation of long duration audiovisual content' is the Title"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among the author who drafted the paper ""A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus"", which of them is/are affiliated with the Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea
? author refers to PaperAuthor.Name; 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' is the title; 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea' is an Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers are published under the journal ""Software - Practice and Experience""? papers refers to Paper.Id; 'Software - Practice and Experience' is the FullName of a journal;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all the paper that were under the conference homepage URL ""http://www.irma-international.org/"". paper refers to Paper.Title; http://www.irma-international.org/ is the HomePage"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Calculate the total average number of papers published from 2002 to 2010 under the conference ""Information and Knowledge Engineering"". average number of papers refers to DIVIDE(count(id), 9); published from 2002 to 2010 refers to Year BETWEEN 2002 AND 2010; 'Information and Knowledge Engineering' is the FullName of conference;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: From year 1991 to 2000, calculate the difference betweeen the total number of papers published under the conference ""International Conference on Supercomputing "" and ""Informatik & Schule""? From year 1991 to 2000 refers to Year BETWEEN 1991 AND 2000; papers refers to Paper.Id; 'International Conference on Supercomputing' AND 'Informatik & Schule' are the FullName of conference; calculate the difference between the total number of papers of these two conferences refers to SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Supercomputing'), SUM(Paper.Id where FullName = 'Informatik & Schule'))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the short name for ""Software - Concepts and Tools / Structured Programming""? 'Software - Concepts and Tools / Structured Programming' is the FullName;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Which journal was the paper ""Education, democracy and growth"" published on? Give the full name of the journal. 'Education, democracy and growth' is the title of a paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Give the number of papers that were published on ""IEEE Transactions on Nuclear Science"" in 1999. 'IEEE Transactions on Nuclear Science' is the FullName of journal; 1999 refers to Year = '1999'; papers refers to Paper.Id"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What was the name of the paper that was published on ""IEEE Transactions on Pattern Analysis and Machine Intelligence"" in 2011? 'IEEE Transactions on Pattern Analysis and Machine Intelligence' is the FullName of journal; 2011 refers to Year = '2011'; name of the paper refers to Title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the keywords for the paper which was published on ""Modeling Identification and Control"" in 1994? 'Modeling Identification and Control' is the FullName of the journal; 1994 refers to Year = '1994'; if the year is ""0"", it means this paper is preprint, or not published"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: For the paper which was presented by ""Zvezdan Protić"", was it preprinted? Year = 0 means this paper is preprint, or not published"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: At which conference was the paper ""Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes"" presented? 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes' is the Title of the paper; conference refers to Conference.FullName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Tell the number of papers that were presented at ""International Symposium on Software Testing and Analysis"" conference. 'International Symposium on Software Testing and Analysis' is the FullName of the conference; papers refers to Paper.Id"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Gives the home page of the conference where the paper ""Increasing the Concurrency in Estelle"" is presented. 'Increasing the Concurrency in Estelle' is the Title of the paper; home page of the conference refers to HomePage;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors finished the paper ""An Improved Active Suspension Model for Attitude Control of Electric Vehicles"" together? authors refers to AuthorId; 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles' is the Title of a paper; A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair."
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: In the year 2012, which conference had the most papers presented? Give the short name of the conference. Papers refers to Paper.Id; short name of the conference refers to Conference.ShortName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were presented at 'ECSQARU' in 2003? Papers refers to Paper.Id; ECSQARU is the ShortName of the conference; 2003 refers to Year = '2003'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Show the keywords of the paper that was presented at ""International Radar Symposium"" in 2012. 'International Radar Symposium' is the FullName of the conference; 2012 refers to Year = '2012'"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many times more for the papers that were presented at the ""International Conference on Thermoelectrics"" conference than ""International Conference on Wireless Networks, Communications and Mobile Computing“ conference? 'International Conference on Thermoelectrics' AND 'International Conference on Wireless Networks, Communications and Mobile Computing' are the FullName of the conference; Papers refers to Paper.Id; Calculation = SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Thermoelectrics'), SUM(Paper.Id where FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing'))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the percentage of preprints of John Van Reenen's papers? year = 0 means this paper is preprint; John Van Reenen is the author's name; papers refers to paper.Id; calculation = DIVIDE(SUM(paper.Id where Name = 'John Van Reenen' AND ConferenceID = 0 AND  JournalId = 0), SUM(paper.Id where Name = 'John Van Reenen'))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the oldest published book? published book refers to Title; the oldest book refers to MIN(Year)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Which conference has the longest name? the longest name refers to MAX(length(FullName))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many authors are affiliated with NASA Langley Research Center? NASA Langley Research Center is the Affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many journals don’t have a short name? don’t have a short name means ShortName is null"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many of the papers are preprinted? year = 0 means this paper is preprint; papers refers to Paper.Id"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the title of the paper with the most authors? paper refers to paper.Id; paper with the most authors refers to MAX(PaperAuthor.PaperId)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Which paper published by the ""TUBERCLE LUNG DIS"" journal is the oldest? paper refers to Title; TUBERCLE LUNG DIS is the ShortName of journal; the oldest refers to MIN(Year)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all of the papers written by the author ""Karin Rengefors."" all the papers refers to Title; Karin Rengefors is the Name of the author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were published by the ""Virtual Reality, IEEE Annual International Symposium"" conference in 2012? 'Virtual Reality, IEEE Annual International Symposium' is the FullName of conference; in 2012 refers to Year = 2012;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the short name for the journal that published the paper ""A Case of Unilateral Ashy Dermatosis""? A Case of Unilateral Ashy Dermatosis refer to Title"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the affiliations of the author ""Mark A. Musen"" written on and off paper? Mark A. Musen refer to Author.Name;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Who are the authors of the paper ""Determination of Planetary Meteorology from Aerobot Flight Sensors""? 'Determination of Planetary Meteorology from Aerobot Flight Sensors' refer to title of the paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all the titles and their publishing journals from the 60's. from the 60’s refer to Year 1960 BETWEEN 1970"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Which year did the ""Internet, Multimedia Systems and Applications"" conference publish the most papers? 'Internet, Multimedia Systems and Applications' is the FullName of paper; published the most papers refers to MAX(COUNT(year))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What are the different ways the name of the author, Randall Davis, is written on their papers? Randall Davis refer to Author.Name"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List all of the conferences where a paper was published in 2008. Published in 2008 refer to Year = 2008"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the homepage URL for the journal that published the most papers? published the most papers refer to MAX(JournalId); homepage URL refers to HomePage"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the proportion of the papers that have the keyword ""cancer""? Please provide a list of authors and their affiliations. Proportion refer to DIVIDE(COUNT(Keyword = ’cancer’), COUNT(PaperID))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the name of author with the ID of 1722?"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers are preprint or not published? preprint or not published refer to Year = 0;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List the name of the author that affiliated with University of Illinois Chicago? 'University of Illinois Chicago' is an affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were published in 2005. Calculate the difference between the number of paper published in 2005 and the number of paper published in the previous year. published in 2005 refer to Year = 2005; Difference refer to SUBTRACT(SUM(Year = 2005). SUM(Year = 2004))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: State the title of papers published in the Ibm Journal of Research and Development. Ibm Journal of Research and Development refer to FullName

'Ibm Journal of Research and Development' is the full name of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: State the name and affiliation of author for the 'Education, democracy and growth' paper? Education, democracy and growth' refer to title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many author published papers in the 'IEEE Computer' journal? IEEE Computer refer to FullName; How many author published papers refer to COUNT(PaperAuthor.Name) where FullName = ’IEEE Computer’"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference. A context-based navigation paradigm for accessing Web data' is the title of paper; name of conference refer to FullName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were published in International Workshop on Inductive Logic Programming from 2001 to 2009? From 2001 to 2009 refer to Year 2001 BETWEEN 2009; 'International Workshop on Inductive Logic Programming' refer to Conference.FullName"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Calculate the average of authors for each paper from the year of 1990 to 2000. Average refer to DIVIDE(COUNT(AuthorID where Year = 1990 BETWEEN 2000), COUNT(Title where Year = 1990 BETWEEN 2000))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Indicate the year and a full name of the journal in which the publication named 'Area Effects in Cepaea' was published. 'Area Effects in Cepaea' is the title of paper"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Who is the author of the publication named 'Real-Time Automata'? 'Real-Time Automata' is the title of paper; publication refers to title;"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Provide the name of the author who is affiliated with the organization named 'ABB Electrical Machines'. 'ABB Electrical Machines' is an affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010. 'Academic Medicine' is the FullName of journal; between 2005 and 2010 refer to Year 2005 BETWEEN 2010"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Provide the title of the latest publication published by it's author 'Zuliang Du'. 'Zuliang Du' is the name of paper author; latest publication refers to MAX(Year)"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many publications were published in relation to the conference 'Adaptive Multimedia Retrieval' in 2007? 'Adaptive Multimedia Retrieval is the FullName of paper; in 2007 refer to Year = 2007"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Provide the average number of papers that are published in the journal named 'Information Sciences' annually. 'Information Sciences' is the FullName of journal; average = DIVIDE(COUNT(JournalId = 48), COUNT(Years))"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many publications were published by author named 'Howard F. Lipson'? 'Howard F. Lipson' is the name of author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Among all publications containing keywords 'Turbulent Fluids', what percentage of them was published in the journal named 'Physics of Fluids'? 'Physics of Fluids' is the FullName of journal; percentage = DIVIDE(SUM(Keyword = 'Turbulent Fluids'), SUM(FullName = 'Physics of Fluids')) as percentage"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Indicate the number of authors affiliated with the organization named 'Arizona State University'. 'Arizona State University' is an affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: List out the full name and URL link of ICCI? 'ICCI' is the ShortName of conference; URL refer to HomePage"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Mention the titile of paper writen by Joe Lograsso. 'Joe Lograsso' is name of paper author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: How many papers were written by authors who cooperated with University of Hong Kong? University of Hong Kong' is an affiliation"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: State the year and title of papers written by Barrasa. 'Barassa' is name of paper author"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Sate the author name and published year for paper id 2? published year refers to year"
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: Mention the name of author for paper id 5 and state the keyword of this page."
authors,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Author (
Id integer,
Name text,
Affiliation text,
PRIMARY KEY (Id),
);
CREATE TABLE Conference (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Journal (
Id integer,
ShortName text,
FullName text,
HomePage text,
PRIMARY KEY (Id),
);
CREATE TABLE Paper (
Id integer,
Title text,
Year integer,
ConferenceId integer,
JournalId integer,
Keyword text,
PRIMARY KEY (Id),
FOREIGN KEY (ConferenceId) REFERENCES Conference(Id),
FOREIGN KEY (JournalId) REFERENCES Journal(Id),
);
CREATE TABLE PaperAuthor (
PaperId integer,
AuthorId integer,
Name text,
Affiliation text,
FOREIGN KEY (PaperId) REFERENCES Paper(Id),
FOREIGN KEY (AuthorId) REFERENCES Author(Id),
);
---------------------
QUESTION: What is the full name of the conference in which the paper ""2004 YD5"" was published? '2004 YD5' is the title of paper"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List the all the institutes from the state with the most number of American Indian in 2007. institutes refers to chronname; American Indian refers to race = 'Ai'; most number of American Indian refers to MAX(COUNT(race = 'Ai')); in 2007 refers to year = '2007';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: State the name and website of the institutes from the state with 209 graduate cohort in 2011. name of the institutes refers to chronname; website refers to site; graduate cohort refers to grad_cohort; in 2011 refers to year = '2011';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located? female refers to gender = 'F'; graduates refers to grad_cohort; between 2011 to 2013 refers to year BETWEEN 2011 AND 2013; Gateway Community College refers to chronname = 'Gateway Community College';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the total male graduates in 2012 in the state whereby the institute with the highest average amount of student aid going to undergraduate recipients is located? male refers to gender = 'M'; graduates refers to grad_cohort; in 2012 refers to year = 2012; highest average amount of student aid going to undergraduate recipients refers to MAX(aid_value);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: State the average median SAT value for institutes in the state with the most male graduate cohort in 2013. median SAT value refers to med_sat_value; average = AVG(med_sat_value); male refers to gender = 'M'; graduate cohort refers to grad_cohort; most male graduate cohort refers to MAX(COUNT(grad_cohort WHERE gender = 'M')); in 2013 refers to year = 2013;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Name the state with the most number of graduate cohort in 2012 from private institute for profit? List all such institutes in the mentioned state. most number of graduate cohort refers to MAX(SUM(grad_cohort)); in 2012 refers to year = 2012; private institute for profit refers to control = 'Private for-profit'; institutes refers to chronname;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List all the public institutes from the state with the least number of graduate cohort in 2013. public refers to control = 'Public'; institutes refers to chronname; least number of graduate cohort refers to MIN(grad_cohort); in 2013 refers to year = 2013;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Provide the institute name with less than 200 graduate cohort of all races and genders in 2013. Also, please state the total number of full-time equivalent undergraduates for the institute. institute name refers to chronname; less than 200 graduate cohort refers to grad_cohort < 200; all races refers to race = 'X'; all genders refers to gender = 'B'; in 2013 refers to year = 2013; total number of full-time equivalent undergraduates refers to fte_value;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the number of female graduate for all students cohort from Oakwood University in 2013? female refers to gender = 'F'; graduates refers to grad_cohort; Oakwood University refers to chronname = 'Oakwood University'; in 2013 refers to year = 2013; all sutdents refer to rae = 'X';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage? In 2012 refers to year = 2012; Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other'; University of Alaska at Anchorage refers to chronname = 'University of Alaska at Anchorage';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Compare the graduate cohort for Auburn University from 2011 to 2013? graduate cohort for Auburn University refers to grad_cohort is not null WHERE chronname = 'Auburn University', gender = 'B', race = 'X' and cohort = '4y other', '4y bach'; from 2011 to 2013 refers to year in (2011, 2012, 2013);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Calculate the percentage of Black students in all private for profit institutions. Black students refers to race = 'B'; private for profit refers to control = 'Private for-profit'; percentage = MULTIPLY(DIVIDE(SUM(race = 'B'), SUM(grad_cohort)), 100.0);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time. Asian refers to race = 'A'; Alabama refers to state = 'Alabama'; graduated within 100 percent of normal/expected time refers to grad_100; percentage = MULTIPLY(DIVIDE(SUM(race = 'A'), SUM(grad_cohort)), 100);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013? ratio = MULTIPLY(DIVIDE(SUM(grad_cohort WHERE Gender = 'M'), SUM( grad_cohort WHERE Gender = 'F')), 1.0); Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; male refers to gender = 'M'; Harvard University refers to chronname = 'Harvard University'; in 2013 refers to year = 2013;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: From which institute is harder to graduate for a bachelor, Amridge University or Auburn University? institute refers to chronname; harder to graduate for a bachelor refers to MIN(grad_100_value); Amridge University refers to chronname = 'Amridge University'; Auburn University refers to chronname = 'Auburn University';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many institutes are private and not-for profit? private and not for profit refers to control = 'Private not-for-profit';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In total, how many Hispanic male students graduated from Amridge University? Hispanic refers to race = 'H'; male refers to gender = 'M'; Amridge University refers to chronname = 'Amridge University';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many students that graduated from Lincoln College in 2011 belong to the cohort type of Bachelor's/equivalent seeking cohort at 4-year institutions? Lincoln College refers to chronname = 'Lincoln College'; in 2011 refers to year = 2011; Bachelor's/equivalent seeking cohort at 4-year institutions refers to cohort = '4y bach';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What's the number of male Hispanic students who graduated from Central Alabama Community College in 2011 within 100 percent of normal/expected time? male refers to gender = 'M'; Hispanic students refers to race = 'H'; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; number of students who graduated within 100 percent of normal/expected time refers to grad_100;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many students graduated from Central Alabama Community College in 2011 in total? Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students? amount of percentage = SUM(grad_150 WHERE gender = 'F') as female; percentage = SUM(grad_150 WHERE gender = 'M') as male; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; graduated within 150 percent of normal/expected time refers to grad_150; female refers to gender = 'F'; White refers to race = 'w'; male refers to gender = 'M';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Which institute has the highest percentage of male White students graduating in 2011 within 150 percent of normal/expected time? male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; graduating within 150 percent of normal/expected time refers to grad_150;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Please list the names of the institutes with the percentage of male White students graduating in 2011 within 150 percent of normal/expected time over 20. names of the institutes refers to chronname; male refers to gender = 'M'; white refers to race = 'w'; in 2011 refers to year = 2011; percentage of students graduating within 150 percent of normal/expected time over 20 refers to grad_150>20;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many students for both genders graduated from a 2-year institute in Alabama in 2011? 2-year institute refers to cohort = '2y all'; Alabama refers to state = 'Alabama'; in 2011 refers to year = 2011; T2.gender = 'B' means both genders;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many more students in total graduated from Central Alabama Community College in 2012 than in 2011? how many more = SUBTRACT(SUM(grad_cohort WHERE year = 2012)), (sum(grad_cohort WHERE year = 2011)); Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2012 refers to year = 2012; in 2011 refers to year = 2011;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the institutes in the state of Alabama whose percent rank for median SAT value within sector is 77, how many of them have over 500 graduates in total in 2011? percent rank for median SAT value within sector refers to med_sat_percentile; over 500 graduates refers to grad_cohort > 500; in 2011 refers to year = 2011;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011? public refers to control = 'Public'; over 30 students who graduated within 100 percent of normal/expected time refers to grad_100 > 30; in 2011 refers to year = 2011;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Please list the names of the institutes in the state of Alabama whose all graduates in total exceeded 500 in 2011? names of the institutes refers to chronname; graduates refers to grad_cohort; grad_cohort > 500; in 2011 refers to year = 2011; all students refer to race = 'X'."
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What's the average number of graduates for Central Alabama Community College in the 3 consecutive years from 2011 to 2013? graduates refers to grad_cohort; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; average number of graduates for 3 consecutive years = DIVIDE(SUM(SUM(grad_cohort WHERE year = 2011), SUM(grad_cohort WHERE year = 2012), SUM(grad_cohort WHERE year = 2013)), 3);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the average percentage of students graduating within 100 percent of normal/expected time for Central Alabama Community College? average = DIVIDE(SUM(grad_100_rate), (SUM(grad_100), SUM(grad_150))); percentage of students graduating within 100 percent of normal/expected time refers to grade_100_rate; Central Alabama Community College refers to chronname = 'Central Alabama Community College';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the web site address for ""Swarthmore College"". website address refers to site; Swarthmore College refers to chronname = 'Swarthmore College';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Which state is ""Mercer University"" located in? Mercer University refers to chronname = 'Mercer University';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Which city is ""Rensselaer Polytechnic Institute"" located in? Rensselaer Polytechnic Institute refers to chronname = 'Rensselaer Polytechnic Institute';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Tell the abbreviation for ""Delaware"" state. abbreviation for state refers to state_abbr;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many 2-year public schools are there in ""California""? 2-year refers to level = '2-year'; public refers to control = 'public'; California refers to state = 'California';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the post name of ""Idaho"" state. post name refers to state_post;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Tell the name of school in ""NJ"" that could get the bachelor's degree with highest students number. name of school refers to chronname; NJ refers to state_abbr = 'NJ'; bachelor's degree refers to level = '4-year'; highest students number refers to MAX(student_count);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the web site address for the school in ""PA"" state with the highest latitude. web site address refers to site; PA refers to state_abbr = 'PA'; highest latitude refers to MAX(lat_y);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Tell the number of 4-year public schools in UT whose graduation rate exceeds the average for the state. 4-year refers to level = '4-year'; public refers to control = 'Public'; UT refers to state_abbr = 'UT'; graduation rate exceeds the average for the state refers to awards_per_value > awards_per_state_value;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many 2-year private nonprofit schools in ""CT"" whose graduation rate falls below the average for the state? 2-year refers to level = '2-year'; private nonprofit refers to control = 'Private not-for-profit'; CT refers to state_abbr = 'CT'; graduation rate falls below the average for the state refers to awards_per_value < awards_per_natl_value;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the name of the 4-year public school in ""ID"" with the lowest graduation 100 value. name of the school refers to chronname; 4-year refers to level = '4-year'; public refers to control = 'Public'; ID refers to state_abbr = 'ID'; lowest graduation 100 value refers to MIN(grad_100_value);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Which 4-year private for-profit school in ""KY"" has the highest graudation 150 value? Give the ID for the school. 4-year refers to level = '4-year'; private for profit refers to control = 'Private for-profit'; KY refers to state_abbr = 'KY'; highest graduation 150 value refers to MAX(grad_150_value); ID of the school refers to unitid;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What was the number of female Hispanic students who graduated within 100 percent of expected time for ""Pennsylvania State University-Altoona""? female refers to gender = 'F'; Hispanic refers to race = 'H'; graduated within 100 percent of expected time refers to grad_100; Pennsylvania State University-Altoona refers to chronname = 'Pennsylvania State University-Altoona';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the cohort name for the school with biggest cohort size. biggest cohort size refers to MAX(cohort_size); cohort = '4y bach' means bachelor's or equivalent-seeking cohort at 4-year institutions; cohort = '4y other' means students seeking another type of degree or certificate at a 4-year institution; cohort = '2y all' means degree-seeking students at 2-year institutions;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Tell the number of 4-year private not-for-profit schools in the home state of ""Brevard Community College"". 4-year refers to level = '4-year'; private not-for-profit refers to control = 'Private not-for-profit'; Brevard Community College refers to chronname = 'Brevard Community College';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the total number of all graduated students from a 2-year public schools in Alabama in 2011. number of graduated students refers to grad_cohort; 2-year refers to level = '2-year'; public refers to control = 'Public'; Alabama refers to state = 'Alabama'; in 2011 refers to year = '2011'; reace = 'X' means all students."
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013. schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the percentage of the number of 4-year public schools from Madison Area Technical College's home state in the Alabama? percentage = MULTIPLY(DIVIDE(SUM(chronname = 'Madison Area Technical College'), SUM(state = 'Alabama')), 100); 4-year refers to level = '4-year'; public refers to control = 'Public'; Madison Area Technical College refers to chronname = 'Madison Area Technical College'; home state in the United States refers to state;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Give the state and name of institutions in year of data release from 2010 to 2012 with black students. name of institutions refers to chronname; year of data release refers to year; from '2010' to '2012' refers to year BETWEEN 2010 AND 2012; Black refers to race = 'B';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List down the states in 2011 with a national sector average of 20 and below. in 2011 refers to year = '2011'; national sector average of 20 and below refers to awards_per_natl_value < 20;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the race of all students, what is the control of institution and level of institution with highest number of students? highest number of students refers to student_count; all students refer to race = 'X'."
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the states with a public school count of 20 and below, list their race. public refers to control = 'Public'; school_count < 20;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List the basic of the institution in 2012 with race of all male students. in 2012 refers to year = '2012'; male refers to gender = 'M'; all students refer to race = 'X'."
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In Alaska with school count of 1 from year 2011 to 2013, how many of the students are white? Alaska refers to state = 'Alaska'; from year 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; white refers to race = 'W';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the institution's name of american students within the number of degree-seeking students in the cohort that ranges from 1 to 3? institution's name refers to chronname; american refers to race = 'Ai'; number of degree-seeking students in the cohort refers to grad_cohort; grad_cohort < = 3;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the states that start with letter A and attained a national sector average of 16.5, give the number of degree-seeking students in the cohort of those students in 2012 . state that starts with letter A refers to state LIKE 'A%'; national sector average of 16.5 refers to awards_per_natl_value = 16.5; number of degree-seeking students in the cohort refers to grad_cohort; in 2012 refers to year = '2012';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List the site of institution within the student count of 500 to 1000 that has the recent year of data release. recent year of data release refers to newest year;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the state name of male graduate in 2011 from a private for profit institution with black students? male refers to gender = 'M'; in 2011 refers to year = '2011'; private for profit refers to control = 'Private for-profit'; black refers to race = 'B';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the black students in 2011, list the institution site and name of those who has 20 t0 30 degree-seeking students in the cohort. black refers to race = 'B'; in 2011 refers to year = '2011'; institution name refers to chronname; 20 to 30 degree-seeking students in the cohort refers to grad_cohort BWEEN 20 AND 30;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In female students in year 2012, how many of them from a state with number of schools ranges from 10 to 20? female refers to gender = 'F'; number of schools refers to schools_count; schools_count BETWEEN 10 AND 20;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: List the race of institutions in Alabama with number of students greater than the 90% of average number of students of all institutions? Alabama refers to state = 'Alabama'; number of students greater than the 90% of average = MULTIPLY(AVG(student_count), 90%) < student_count;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In year 2010 at schools located in Hawaii, what is the percentage of schools offers an associate's degree? Hawaii refers to state = 'Hawaii'; associate's degree refers to level = '2-year'; percentage = MULTIPLY(DIVIDE(SUM(level = '2-year' ), count(level)), 1.0);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In the state of Connecticut, what is the name of the instution with the highest percent rank for freshman retention percentage within the sector? name of the institution refers to chronname;  highest percent rank for freshman retention percentage within the sector refers to MAX(retain_percentile);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the website address of the institution with the highest number of White degree-seeking students at 2-year institutions in 2008? website address refers to site; White refers to race = 'W'; degree-seeking students at 2-year institutions refers to cohort = '2y all'; in 2008 refers to year = '2008';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions? Harvard University refers to chronname = 'Harvard University'; highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In the state with the highest state appropriations to higher education in fiscal year 2011 per resident, which institution has the lowest number of undergraduates in 2010? highest state appropriations to higher education in fiscal year 2011 per resident refers to MAX(state_appr_value); lowest number of undergraduates refers to MIN(student_count); in 2010 refers to year = 2010;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005? Yale University refers to chronname = 'Yale University'; average = DIVIDE(COUNT(race = 'B' WHERE cohort = '4y bach AND year BETWEEN 2002 AND 2005), 3); Black refers to race = 'B'; bachelor's/equivalent-seeking cohort at 4-year institutions refers to cohort = '4y bach'; between 2002 to 2005 refers to year BETWEEN '2002' AND '2005';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the Ivy League Schools, which school have the highest number of Hispanic graduates of all time? Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; highest number of hispanic graduates refers to MAX(grad_cohort WHERE race = 'H');"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: How many 4-year public institutions are there in the state of Florida? Give all of their names. 4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Between the Ivy League Schools, which school's state have the lowest sate appropriations to higher education in fiscal year 2011 per resident? Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names. highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the average SAT value for incoming students in all of the schools located in the state with the lowest state appropriations to higher education in fiscal year 2011 per resident? average = DIVIDE(SUM(med_sat_value), SUM(chronname)); SAT value for incoming students refers to med_sat_value; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the name of the school with the highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions who were seeking another type of degree or certificate at a 4-year institution? name of the school refers to chronname; highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort WHERE gender = 'F'); seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Among the Ivy League Schools in 2013, which schools have the highest number of Black students who graduated within 150 percent of normal/expected time who were seeking a bachelor's/equivalent cohort at 4-year institutions? Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; in 2013 refers to year = '2013'; highest number of Black students who graduated within 150 percent of normal/expected time refers to MAX(grad_150 WHERE race = 'B'); seeking a bachelor's/equivalent cohort at 4-year institutions refers to cohort = '4y bach';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: Between 2011 to 2013, what is the average number of male Hispanic degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time in United Education Institute-Huntington Park Campus? between 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; male refers to gender = 'M'; Hispanic refers to race = 'H'; number of degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time refers to grad_150; United Education Institute-Huntington Park Campus refers to chronname = 'United Education Institute-Huntington Park Campus';"
college_completion,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE institution_details (
unitid integer,
chronname text,
city text,
state text,
level text,
control text,
basic text,
hbcu text,
flagship text,
long_x real,
lat_y real,
site text,
student_count integer,
awards_per_value real,
awards_per_state_value real,
awards_per_natl_value real,
exp_award_value integer,
exp_award_state_value integer,
exp_award_natl_value integer,
exp_award_percentile integer,
ft_pct real,
fte_value integer,
fte_percentile integer,
med_sat_value text,
med_sat_percentile text,
aid_value integer,
aid_percentile integer,
endow_value text,
endow_percentile text,
grad_100_value real,
grad_100_percentile integer,
grad_150_value real,
grad_150_percentile integer,
pell_value real,
pell_percentile integer,
retain_value real,
retain_percentile integer,
ft_fac_value real,
ft_fac_percentile integer,
vsa_year text,
vsa_grad_after4_first text,
vsa_grad_elsewhere_after4_first text,
vsa_enroll_after4_first text,
vsa_enroll_elsewhere_after4_first text,
vsa_grad_after6_first text,
vsa_grad_elsewhere_after6_first text,
vsa_enroll_after6_first text,
vsa_enroll_elsewhere_after6_first text,
vsa_grad_after4_transfer text,
vsa_grad_elsewhere_after4_transfer text,
vsa_enroll_after4_transfer text,
vsa_enroll_elsewhere_after4_transfer text,
vsa_grad_after6_transfer text,
vsa_grad_elsewhere_after6_transfer text,
vsa_enroll_after6_transfer text,
vsa_enroll_elsewhere_after6_transfer text,
similar text,
state_sector_ct integer,
carnegie_ct integer,
counted_pct text,
nicknames text,
cohort_size integer,
PRIMARY KEY (unitid),
);
CREATE TABLE institution_grads (
unitid integer,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
FOREIGN KEY (unitid) REFERENCES institution_details(unitid),
);
CREATE TABLE state_sector_grads (
stateid integer,
state text,
state_abbr text,
control text,
level text,
year integer,
gender text,
race text,
cohort text,
grad_cohort text,
grad_100 text,
grad_150 text,
grad_100_rate text,
grad_150_rate text,
grad_cohort_ct integer,
FOREIGN KEY (stateid) REFERENCES state_sector_details(stateid),
FOREIGN KEY (state) REFERENCES institution_details(state),
);
CREATE TABLE state_sector_details (
stateid integer,
state text,
state_post text,
level text,
control text,
schools_count integer,
counted_pct text,
awards_per_state_value text,
awards_per_natl_value real,
exp_award_state_value text,
exp_award_natl_value integer,
state_appr_value text,
state_appr_rank text,
grad_rate_rank text,
awards_per_rank text,
FOREIGN KEY (state) REFERENCES institution_details(state),
);
---------------------
QUESTION: What is the name of the school with the highest difference in the average completion rate for the national in which it belongs? Indicate the state appropriations to higher education in fiscal year 2011 per resident to which the school belongs. name of the school refers to chronname; highest difference in the average completion rate for the national in which it belongs = MAX(SUBTRACT(awards_per_value, awards_per_natl_value)); state appropriations to higher education in fiscal year 2011 per resident to which the school belongs refers to state_appr_value;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp businesses are there in 'AZ' with less than ""3"" stars? AZ refers to state = 'AZ'; stars < 3;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the quantity of the closed or not running Yelp Businesses in 'AZ'? closed or not running refers to active = 'False'; AZ refers to state = 'AZ';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many long reviews does user No. 36139 give for the Yelp businesses? long reviews refers to review_length = 'long'; user No. refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users have ""uber"" number of fans? uber number of fans refers to user_fans = 'uber';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp businesses are opened 24 hours? open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What kind of ""wi-fi"" does Yelp business No.""10172"" have? kind of wi-fi refers to attribute_value where attribute_name = 'Wi-Fi'; business No. refers to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""bars"" are there in the Yelp business? bars refers to category_name = 'Bars';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many more ""buffets"" than ""gyms"" in Yelp business? buffets refers to category_name = 'Buffets'; gyms refers to category_name = 'Gyms'; difference = SUBTRACT(SUM(category_name = 'Buffets'), SUM(category_name = 'Gyms'));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What business category is the Yelp business which got the most 5 star reviews in? business category refers to category_name; most 5 star reviews refers to MAX(COUNT(category_name WHERE star_reviews = 5));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In which year did the user who gave the most number of ""5"" star reviews join the Yelp? year the user join the Yelp refers to user_yelping_since_year; star reviews refers to review_stars;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the user who gave the most number of long reviews, what is his/her averge ratings of all review? long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); average ratings = AVG(review_stars);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the Yelp business which had the most number of ""long"" reviews, which category does it belong to? long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); category refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the Yelp business which had the most number of ""short"" tips, which category does it belong to? short tips refers to tip_length = 'short'; most number of short tips refers to MAX(COUNT(tip_length = 'short')); category refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In which year did the user who has given the most number of ""short"" tips join the Yelp? year the user join the Yelp refers to user_yelping_since_year; most number of short tips refers to MAX(COUNT(tip_length = 'Short'));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: User No. 70271 only has given one tip to the Yelp business, which category was that business belonged to? user No. refers to user_id; short tip refers to tip_length = 'short'; category refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business? short tip refers to tip_lenghth = 'short'; user No. refers to user_id; ratings refers to stars; stars = 5 means great experience; stars = 4 means good experience; stars = 3 means average experience; stars = 2 means bad experience; stars = 1 means terrible experience;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Give the percentage of ""Automotive"" businesses among all the Yelp businesses. automotive businesses refers to category_name = 'Automotive'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Automotive'), COUNT(business_id)), 1.0);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What percentage more for the ""Women's Clothing"" Yelp businesses to ""Men's Clothing""? Women's clothing refers to category_name = 'Women''s Clothing'; Men's clothing refers to category_name = 'Men''s Clothing'; percentage more = MULTIPLY(DIVIDE(SUBTRACT(SUM(category_name = 'Women''s Clothing'), SUM(category_name = 'Men''s Clothing')), COUNT(business_id)), 1.0);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Give the number of users who joined Yelp since ""2004"". joined yelp since 2004 refers to user_yelping_since_year = 2004;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users who have joined Yelp since ""2005"" but have no fans? joined Yelp since 2005 refers to user_yelping_since_year = 2005; no fans refers to user_fans = 'None';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: State the number of actively running Yelp businesses in ""Tolleson"". actively running refers to active = 'TRUE'; Tolleson refers to city = 'Tolleson';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the number of reviews from user No. ""21679""? user No. refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""5"" star reviews does the Yelp business No. ""10682"" get? 5 star reviews refers to review_stars = 5; business No. refers to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which closed/not running Yelp business in ""Sun City"" has got the most reviews? Give the business id. closed/not running refers to active = 'False'; most reviews refers to MAX(COUNT(user_id));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the only Yelp business in ""Yuma"" city, how many ""medium"" reviews did it get? medium reviews refers to review_length = 'Medium';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Does Yelp business No.""4960"" have TV? business No. refers to business_id; have TV refers to attribute_name = 'Has TV';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Give the number of ""dogs allowed"" Yelp businesses. number of Yelp businesses refers to business_id; dogs allowed refers to attribute_name = 'Dogs Allowed' AND attribute_value = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many hours does the Yelp business No. ""5734"" open on Saturday? how many hours = SUBTRACT(closing_time, opening_time); business No. refers to business_id; open on Saturday refers to day_of_week = 'Saturday';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Tell the number of ""hair removal"" Yelp businesses. hair removal refers to category_name = 'Hair Removal';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many more ""Chinese"" than ""Filipino"" Yelp businesses? Chinese refers to category_name = 'Chinese'; Filipino refers to category_name = 'Filipino'; how many more = SUBTRACT(SUM(category_name = 'Chinese'), SUM(category_name = 'Filipino'));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: User No.""63469"" has got ""1"" like for a tip to the Yelp business, which city is that business located in? user No. refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many types of music does Yelp business No.""1141"" have? types of music refers to attribute_name LIKE '%music%' WHERE attribute_value = 'true'; business No. refers to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""cute"" type of compliments does user No. 57400 get? type of compliments refers to compliment_type; user No. refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Who has got the most number of ""funny"" type of compliments? Give the user ID. type of compliments refers to compliment_type; most number of funny type of compliments refers to MAX(COUNT(number of compliments = 'high' WHERE compliment_type = 'funny'));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Give the number of ""drive-thru"" businesses in ""Scottsdale"" with business ID number less than ""1000"". drive-thru refers to attribute_name = 'Drive-Thru' AND attribute_value = 'true'; Scottsdale refers to city = 'Scottsdale'; business_id < 1000;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average rating for the all Yelp businesses that open 24 hours? open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'; rating refers to stars; average rating = AVG(stars);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For all the Yelp businesses that allow customers bring their own beer, what percentage of them are in ""Phoenix""? bring their own beer refers to attribute_name = 'BYOB' AND attribute_value = 'TRUE'; Phoenix refers to city = 'Phoenix'; percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix'), COUNT(business_id)), 1.0)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the names of business in AZ with a rating of 5. AZ refers to state = 'AZ'; rating refers to stars;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many active businesses of city are underrated? active businesses refers to active = 'true'; underrated refers to review_count = 'Low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many user ids from 1 to 20 have no fan users and have low ratings? user_id BETWEEN 1 AND 20; no fan users refers to user_fans = 'None'; low ratings refers to user_review_count = 'Low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Indicate the opening hours of businesses are with category in fashion. opening hours refers to opening_time; category refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses operating in the shopping business have opening times before 8AM? shopping business refers to category_name = 'Shopping'; opening time before 8AM refers to opening_time < '8AM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Provide name of businesses whose category is pets and are still opened after 9PM. category refers to category_name; open after 9pm refers to closing_time > '9PM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses with the category are open from Monday to Thursday? open from Monday to Thursday refers to day_of_week BETWEEN Monday AND Thursday and day_id BETWEEN 2 AND 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please indicate the review count of the ""active life"" businesses in Phoenix. active life refers to category_name = 'Active Life'; Phoenix refers to city = 'Phoenix';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the businesses name with a rating less than 5 whose category name is men's clothing. businesses name refers to business_id; rating refers to stars; stars < 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which businesses are no longer in business but have a low number of votes useful? no longer in business refers to active = 'False'; low number of votes useful refers to review_votes_useful = 'Low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the businesses names whose length of user review is long with business id from 1 to 20. businesses names refers to business_id; length of user review is long refers to review_length = 'Long'; business_id BETWEEN 1 AND 20;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please provide the attribute values ​​of the bussinesses with fashion in Scottsdale. fashion refers to category_name = 'Fashion'; Scottsdale refers to city = 'Scottsdale';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many compliments received from medium users that Phoenix city achieved? medium refers to number_of_compliments = 'Medium';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Provide the businesses name in Tempe city whose opening hours are earlier than 8AM. opening hours refers to opening_time; earlier than 8AM refers to opening_time < '8AM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Glendale city that are still running is opened from 8AM to 6PM? still running refers to active = 'true'; opened from 8AM to 6PM refers to opening_time = '8AM' AND closing_time = '6PM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are there in Phoenix city? Find the percentage of businesses in Phoenix city in the total city. percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix' END), COUNT(category_id)), 1.0);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many cities have businesses with active life category? Find the percentage of the city where the review count that is low in total review count. category refers to category_name; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Active Life'), SUM(review_count = 'LOW')), 1.0);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many active businesses are there in Phoenix? active businesses refers to active = 'true'; Phoenix refers to city = 'Phoenix';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Scottsdale are rated as ""wonderful experience""? Scottsdale refers to city = 'Scottsdale'; rated refers to stars; rated as wonderful experience refers to stars > 3;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average rating of inactive businesses? rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in AZ state have the beer_and_wine attribute? beer_and_wine refers to attribute_value = 'beer_and_wine';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which city has the most businesses whose attribute is full_bar? most business refers to MAX(business_id); full_bar refers to attribute_value = 'full_bar';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in the fashion industry are rated 5 stars? fashion industry refers to category_name = 'Fashion';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which city has the highest number of businesses in the food industry whose number of reviews is high? highest number of businesses refers to MAX(business_id); food industry refers to category_name = 'Food'; number of reviews is high refers to review_count = 'High';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list all business IDs in Mesa city that review stars of over 3. stars > 3;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which city has the least number of businesses whose amount of funny votes is low? least number of businesses refers to MIN(business_id); funny votes is low refers to review_votes_funny = 'Low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What percentage of businesses are in the Real Estate sector and have the rating of 5 out of all businesses in Chandler? Real Estate sector refers to category_name = 'Real Estate'; rating of 5 refers to stars = 5; Chandler refers to city = 'Chandler'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Real Estate' and stars = 5), COUNT(business_id)), 100);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users who started yelping since 2012 have sent a high number of funny votes? users who started yelping in 2012 refers to user_yelping_since_year = '2012'; high number of funny votes refers to user_votes_funny = 'High';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the number of useful votes that the user 52592 received when reviewed for business number 2? number of useful votes refers to review_votes_useful; business number refers to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the attribute numbers that are related to payment? attribute numbers refers to attribute_id; related to payment refers to attribute_name like '%payment%';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How long was the review for business number 2 that user number 612 wrote? how long was the review refers to review_length; business number refers to business_id; user number refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are actively running in Gilbert City? actively running refers to active = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in the AZ state got low quality of reviews? low quality of reviews refers to review_count = 'low';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please state any three business numbers in AZ state that have received the ""Great experience"" review stars. business numbers refers to business_id; great experience review stars refers to review_stars = 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please name one attribute that business number 2 does not have. business number refers to business_id; business_id = 2; does not have refers to attribute_value = 'none';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""cool"" compliments did user number 33 receive? cool compliments refers to compliment_type = 'cool'; user number refers to user_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the opening hours of business number 53 on Friday? opening hours refers to opening_time; business number refers to business_id; Friday refers to day_of_week = 'Friday';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the attributes that business number 56 have? business number refers to business_id; attributes that business have refers to attribute_value = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What are the categories that business number 15 belongs to? business number refers to business_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are there in Scottsdale city under the category of ""Beauty & Spas""? category refers to category_name;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list any two user numbers that have an ""Uber"" number of cute compliments. user numbers refers to user_id; Uber number refers to number_of_compliments = 'Uber'; cute compliments refers to compliment_type = 'cute';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses operating in the ""Accessories"" category have received a ""wonderful experience"" review from users? Accessories category refers to category_name = 'Accessories'; wonderful experience review refers to stars > 3;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How long does business number 12 in Scottsdale stay open on day number 3? business number refers to business_id; Scottsdale refers to city = 'Scottsdale'; day number refers to day_id;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in AZ state do not open on Thursday? do not open on Thursday refers to day_of_week = 'Thursday' AND label_time_4 = 'None';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses of Yelp are in Scottsdale? Scottsdale refers to city = 'Scottsdale';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the Yelp_Businesses in Arizona, how many of them are still running? Arizona refers to state = 'AZ'; still running refers to active = 'true';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Businesses in Scottsdale have received positive comments in the Elitestar rating? Scottsdale refers to city = 'Scottsdale'; positive comments refers to stars > 3; Elitestar rating refers to stars;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which city has more Yelp_Business that's more appealing to users, Scottsdale or Anthem? more appealing to users refers to MAX(review_count);"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Businesses in Arizona have a Elitestar rating of over 4? Arizona refers to state = 'AZ'; Elitestar rating of over 4 refers to stars > 4;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Businesses are there in Arizona in total? Arizona refers to state = 'AZ';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the cities of the Yelp_Businesses that have gotten a 5 in the Elitestar rating. 5 in the Elitestar rating refers to stars = 5;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many reviews have the user whose ID is 3 posted?"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many reviews made by user whose ID is 3 are long? long refers to review_length = 'Long';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the long reviews made by user ID 3, how many of them have received a medium number of useful votes? long reviews refers to review_length = 'Long'; medium number of useful votes refers to review_votes_useful = 'medium';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users have joined Yelp since the year 2012? since year 2012 refers to user_yelping_since_year = '2012'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the IDs of the users who have a high number of followers. high number of followers refers to user_fans = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Businesses do not provide alcohol? do not provide alcohol refers to attribute_name = 'Alcohol'and attribute_value = 'none'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol? Arizona refers to state = 'AZ'; do not provide alcohol refers to attribute_name = 'Alcohol' and attribute_value = 'none'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the business IDs of all the Yelp_Businesses that are good for kids. good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Business falls under the category of ""Shopping""? category of ""Shopping"" refers to category_name = 'Shopping'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Under which categories is Yelp_Business no. 1? categories refers to category_name; Yelp_Business no.1 refers to business_id = 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the Yelp_Businesses which are still running, how many of them fall under the category of ""Food""? are still running refers to active = 'true'; the category of ""Food"" refers to category_name = 'Food'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Business in Anthem are under the category of ""Food""? in Anthem refers to city = 'Anthem'; the category of ""Food"" refers to category_name = 'Food'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the business ID of the Yelp_Business with the highest Elitestar rating under the category ""Food"". under the category ""Food"" refers to category_name = 'Food'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Business under the category of ""Food"" are good for kids? under the category of ""Food"" refers to category_name = 'Food'; are good for kids refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Business in Arizona has user no. 3 reviewed? in Arizona refers to state = 'AZ'; user no. 3 refers to user_id = 3"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list all the categories of the Yelp_Business in Arizona. categories refers to category_name; in Arizona refers to state = 'AZ'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How long does Yelp_Business no.1 open on Tuesdays? ""How long"" and ""how much time"" are synonyms; how much time does this business open refers to subtract(closing_time, opening_time); Yelp_Business no.1 refers to business_id = 1; Tuesdays refers to day_of_week = 'Tuesday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: When does Yelp_Business no.1 open on Tuesdays? Yelp_Business no.1 refers to business_id = 1; open on refers to opening_time; Tuesdays refers to day_of_week = 'Tuesday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many Yelp_Business close after 8PM on Mondays? close after 8PM refers to closing_time = '9PM' or closing_time = '10PM' closing_time = '11PM' closing_time = '12PM'; Mondays refers to day_of_week = 'Monday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the opening time on Mondays of all the Yelp_Businesses in Anthem that are still running. Mondays refers to day_of_week = 'Monday'; in Anthem refers to city = 'Anthem'; are still running refers to active = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the Yelp_Business in Arizona, how many of them closes at 12PM on Sundays? in Arizona refers to state = 'AZ'; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the categories of the Yelp_Business that closes at 12PM on Sundays. categories refers to category_name; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""Good for Kids"" Yelp_Businesses are open everyday of the week? Good for Kids refers to attribute_name = 'Good for Kids'and attribute_value = 'true'; open everyday refers to day_id between 1 and 7"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users became an elite user the same year they joined Yelp? became an elite user the same year they joined Yelp refers to user_yelping_since_year = year_id"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the longest business time on Mondays for a Yelp_Business under the category ""Shopping""? longest business time refers to max(subtract(closing_time, opening_time)); on Mondays refers to day_of_week = 'Monday';  category ""Shopping"" refers to category_name = 'Shopping'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Please list the business IDs of the Yelp_Business that have a business time of longer than 12 hours on Sundays. business time of longer than 12 hours refers to subtract(closing_time, opening_time) > 12; on Sundays refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many elite users have reviewed Yelp_Business no.1? Yelp_Business no.1 refers to business_id = 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the users who have posted more than 10 reviews, how many users are elite users? posted more than 10 reviews refers to count(Reviews.user_id) > 10"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which Yelp_Business in Arizona gets the most number of reviews? Arizona refers to state = 'AZ'; gets the most number of reviews refers to max(count(Reviews.business_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many stars on average does a Yelp_Business in Anthem get from a user review? in Anthem refers to city = 'Anthem'; stars on average = avg(review_stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many stars on average does user no.3 give to Yelp_Business in Arizona? user no.3 refers to user_id = 3; in Arizona refers to state = 'AZ'; stars on average = avg(review_stars(user_id = 3))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average business time for Yelp_Business no.1 on weekends? Yelp_Business no.1 refers to business_id = 1; on weekends refers to day_of_week = 'Saturday' or day_of_week = 'Sunday'; average business time refers to DIVIDE(SUBTRACT(closing_time, opening_time), 2)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average Elitestar rating for a Yelp_Business that closes at 12PM on Sundays? average Elitestar rating refers to DIVIDE(SUM(stars), COUNT(business_id)); closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many of the busineses are in Casa Grande? in Casa Grande refers to city = 'Casa Grande'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the total number of active businesses in AZ with a low review count? active businesses refers to active = 'true'; in AZ refers to state = 'AZ'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID with a star range from 2 to 3, located at Mesa. star range from 2 to 3 refers to stars > = 2 AND stars < 4;  located at Mesa refers to city = 'Mesa'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In users yelping since 2011 to 2013, how many of them have high count of fans? In users yelping since 2011 to 2013 refers to user_yelping_since_year > = 2011 AND user_yelping_since_year < 2014"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the review length of user 35026 to business with business ID 2? user 35026 refers to user_id = 35026"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses in Chandler, list the attribute of the business with a low review count. in Chandler refers to city = 'Chandler'; attribute refers to attribute_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In businesses with a category of mexican, how many of them has a star rating below 4? category of mexican refers to category_name = 'Mexican'; star rating below 4 refers to stars < 4"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the active business ID and its stars of the businesses fall under the category of Fashion. active business refers to active = 'true'; category of Fashion refers to category = 'Fashion'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the category of businesses with highest star rating? category refers to category_name; highest star rating refers to max(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the category of the business with medium review length and highest review stars within business ID from 6 t0 9? category refers to category_name; highest review stars refers to max(review_stars); business ID from 6 to 9 refers to business_id between 6 and 9"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Count the active businesses that has an attribute of caters with low review count. active businesses refers to active = 'true'; attribute of caters refers to attribute_name = 'Caters'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the closing and opening time of businesses located at Tempe with highest star rating? located at Tempe refers to city = 'Tempe'; highest star rating refers to max(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count. active businesses refers to active = 'true'; located at Chandler, AZ refers to city = 'Chandler', state = 'AZ'; category refers to category_name; atrributes refers to attribute_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the categories of active businesses in Surprise, AZ. categories refers to category_name; active businesses refers to active = 'true'; in Surprise, AZ refers to city = 'Surprise' and state = 'AZ'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the location of businesses that have business hours from 8 am to 9 pm every Friday. location of businesses refers to city and state; business hours from 8 am to 9 pm refers to opening_time = '8AM', closing_time = '9PM'; every Friday refers to day_of_week = 'Friday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ? active business refers to active = 'true'; located at Mesa, AZ refers to city = 'Mesa', state = 'AZ'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the opening time of the active businesses in Chandler that has a medium review count. active businesses refers to active = 'true'; in Chandler refers to city = 'Chandler'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses with a category of Accessories, what is the percentage of the business with less than 4 stars? category of Accessories refers to category_name = 'Accessories'; percentage of the business with less than 4 stars = divide(count(Business.business_id(stars < 4)), count(Business.business_id)) * 100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the closing time and day of week of active businesses in Tempe with stars greater than the 70% of average age of star rating. active businesses refers to active = 'true'; in Tempe refers to city = 'Tempe'; with stars greater than the 70% of average age of star rating refers to stars > DIVIDE(sum(stars), COUNT(business_id)) * 70%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many active businesses are located at Phoenix, Arizona? active business refers to active = 'true'; 'Phoenix' is the city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are with high review count? high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses ID sell beer and wine? attribute_value = 'beer_and_wine'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many attributes ID owned by business ID 2?"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users received high compliment type in photo? high compliments refers to number_of_compliments = 'High'; type in photo refers to compliment_ID = 1"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Phoenix, Arizona is attributed to waiter service? 'Phoenix' is the city; waiter service refers to attribute_name = 'waiter_services'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find out which business is opened for 24/7 and list out what is the business attribute. opened for 24/7 refers to Business_Hours WHERE opening_time = closing_time and business_id COUNT(day_id) = 7; business attribute refers to attribute_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which business in fashion category has the most review? 'Fashion' is the category_name; most review refers to Max(Count(user_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out which business category that are most likely to have average good review in Arizona? average good review refers to review_count > = 3; Arizona refers to state = 'AZ'; business category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the ratio of having the best to worse elite user in 2013? best elite refers to user_average_stars = 5; worse eliter refers to user_average_stars = 1: in 2013 refers to year_id = 2013; ratio = Divide(Count(user_id(user_average_stars = 5)),  Count(user_id(user_average_stars = 1)))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the increment percentage of elite user for each year since year 2005. since year 2005 refers to year_id Between 2005 and 2014; increment percentage = Divide(Count(user_id(year_id < 2014)), Count (user_id(year_id = 2015))) * 100"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many business have been reviewed by user ID 3 and how long have this user been with Yelp? year with yelp = Subtract ('%Y'(CURRENT TIME), user_yelping_since_year)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the yearly average review done by user ID 3? yearly average review = Divide( Count(business_id), Subtract('%Y'(CURRENT_TIME), user_yelping_since_year))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the average number of review received by each business given that the user is an elite? average review = Divide(Count(user_id), Count(business_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List out the user who is an elite user for consecutively 5 years or more and what is the user average star? How many likes does this user gets? elite user for consecutively 5 years or more refers to user_id COUNT(year_id) > 5; Average star = AVG(likes)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find out which hotel and travel business having the most review? Calculate the standard deviation of the review star for this business. ""Hotel & Travel"" is the category_name; most review refers to Max(Count(category_id)); Average star per user = Divide (Sum (review_stars), Count(user_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the correlation between the review starts and business stars? highest review count refers to review_count = 'Uber'; average business review stars = Divide (Sum(review_stars), Count(user_id))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many of the businesses are active? active refers to active = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID with a low review count in Phoenix. ""Phoenix"" is the city; low review count refers to review_count = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the total number of active business in AZ with a high review count? active business refers to active = 'true'; 'AZ' is the state; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID with a star range from 3 to 4, located at Tempe. star range from 3 to 4 refers to stars > = 3 AND stars < 5; 'Tempe' is the name of city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In users yelping since 2010 to 2012, how many of them has an low fans? user yelping since 2010 to 2012 refers to user_yelping_since_year > = '2010' AND user_yelping_since_year < '2013'; low fans refers to user_fans = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the review length of user 60776 to business with business ID 1? ""60776"" is the user_id"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses in Scottsdale, list the attribute of the business with a high review count. ""Scottsdale"" is the name of city; high review count refers to review_count = 'High'; attribute of the business refers to attribute_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: In businesses with a category of automotive, how many of them has an star rating below 3? ""Automotive"" is the category of business; star rating below 3 refers to stars < 3"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the active business ID and its stars of the businesses fall under the category of Pets. active business refers to active = 'true'; 'Pets' is the category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the attribute of the business with highest star rating? highest star rating Max(stars); attribute of business refers to attribute_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the category of the business with short review length and highest review stars within business ID from 5 t0 10? short review length refers to review_length = 'Short'; highest review stars refers to Max(review_stars); business ID from 5 to 10 refers to business_id BETWEEN 5 AND 10; category of business refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Count the active businesses that has an attribute of Wi-Fi with medium review count. active business refers to active = 'true'; 'Wi-Fi' is the attribute_name; medium review count refers to review_count = 'Medium'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the closing and opening time of businesses located at Gilbert with highest star rating? ""Gilbert"" is the name of city; highest star rating refers to Max(stars)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the active businesses located at Mesa, AZ, list the category and attributes of business with a low review count. active business refers to active = 'true': 'Mesa' is the name of city; 'AZ' is the state; low review count refers to review_count = 'Low'; category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the categories of inactive businesses in AZ. inactive business refers to active = 'FALSE'; 'AZ' is the state; category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the location of businesses that has business hours from 9 am to 9 pm every Saturday. 9 am refers to opening_time = '9AM'; 9 pm refers to closing_time = '9PM'; every Saturday refers to day_of_week = 'Saturday'; location refers to city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the attribute value of an inactive business with a medium review count and 3.5 stars which is located at Phoenix, AZ? inactive business refers to active = 'FALSE'; 'AZ' is the state; 'Phoenix' is the name of city; medium review count refers to review_count = 'Medium'; 3.5 stars refers to stars = 3.5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the opening time of the active businesses in Surprise that has a low review count. active business refers to active = 'true'; 'Surprise' is the name of city;  low review count refers to review_count = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars? ""Local Services"" is the category_name; less than 3 stars refers to stars < 3; percentage = Divide(Count(business_id(stars < 3)), Count(business_id)) * 100"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the closing time and day of week of active businesses in Scottsdale with stars greater than the 60% of average age of star rating. active business refers to active = 'true';  'Scottsdale' is the name of city; stars greater than the 60% of average age of star rating refers to stars  > avg(stars) * 60%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many users have no followers in 2014? in 2004 refers to user_yelping_since_year = 2004; no follower refers to user_fans = 'None'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List at least 5 users that has received less than 5 low compliments from
other users. less than 5 low compliment refers to number_of_compliments < 5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List at least 10 users ID that has 4 as an average ratings of all reviews sent. 4 as an average rating refers to user_average_stars = 4"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What city does the business have a business hour from 10 am to 12 pm on Sunday? 10 am refers to opening_time = '10AM'; 12 pm refers to closing_time = '12PM'; on Sunday refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses are opened for 24 hours? opened for 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List at least 5 active business ID that are good for groups and dancing. ""Good for Groups"" and ""Good for Dancing"" are attribute_name; active business refers to active = true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the active businesses in Ahwatukee, which of them are still open in Sunday? active business refers to active = 'true'; 'Ahwatukee' is the name of city; open in Sunday refers to day_of_week = 'Sunday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the categories of all active businesses that were not in Arizona. active business refers to active = 'true'; not in Arizona refers to state ! = 'AZ'; category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the category of the business with high review count but received 2 stars. high review count refers to review_count = 'High'; received 2 stars refers to stars = 2; category refers to category_name"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses have a romantic ambiance? romantic ambiance refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the city of the business where they open from 1 pm to 6 pm on Saturday. 1 pm refers to opening_time = '1PM'; 6 pm refers to closing_time = '6PM'; on Saturday refers to day_of_week = 'Saturday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the total number of fans or followers who received most likes of their comments in the business? fans and followers refers to user_fans; most likes of their comments refer to Max(likes)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday. 12 am refers to opening_time = '12AM'; 1 am refers to closing_time = '1AM'; on Saturday refers to day_of_week = 'Saturday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses have shopping centers and received high review count? ""Shopping Centers"" is the category_name; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses accept insurance? business that accept insurance refers to attribute_name = 'Accepts Insurance' AND attribute_value = 'true'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the average review star from users in businesses located in South Carolina and California state. ""South Carolina"" and ""California"" are both state; average review stars from users = Divide((Sum(review_stars(state = 'SC')) + Sum(review_stars(state = 'CA'))), Sum(stars))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Compare and get the difference of the number of businesses that are open in Monday and Tuesday from 10 am to 9 pm. 10 am refers to opening_time = '10AM'; 9 pm refers to closing_time = '9PM'; 'Monday' and 'Tuesday' are both day_of_week; difference number of business = Subtract(Count(business_id(day_of_week = 'Monday')), Count(business_id(day_of_week = 'Tuesday')))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: State the ID number for the attribute named ""Accepts Insurance""? ID number refers to attribute_id"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many actively running Yelp businesses are there located in ""Phoenix"" city? actively running business refers to active = 'true'; 'Phoenix' is the name of city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Give the number of ""4"" stars Yelp businesses in ""Mesa"" city. ""4"" stars refers to stars = '4'; 'Mesa' is the name of city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Provide the number of Yelp businesses in ""Gilbert"" which got a"" high"" review count. ""Gilbert"" is the name of city; high review count refers to review_count = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which actively running Yelp business in ""Gilbert"" has got the most reviews? Give the business id. actively running business refers to active = 'true'; 'Gilbert' is the name of city; most review refers to review_count = 'Uber'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the Yelp business in ""Tempe"" city which got ""3.5"" stars and review count as ""Uber"", how many ""long"" reviews did it get? ""Tempe"" is the name of city; long review refers to review_length = 'Long'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How is the ""noise level"" for the only Yelp business in “Mesa” which got a ""Uber"" review count? ""Noise Level"" is the attribute_name; 'Mesa' is the name of city"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Is the Yelp business No. 14033 good for supper? business no. 14033 refers to business_id = 14033; good for supper refers to attribute_name = 'good_for_dinner'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How long is the Yelp business No. 15098 opened on Monday? Yelp business No. 15098 refers to business_id = '15098'; Monday refers to day_of_week = 'Monday'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the Yelp businesses which received a ""5"" star review with ""uber"" number of votes for funny, which one is located in ""Phoenix""? Give the business ID. located in ""Phoenix"" refers to city = 'Phoenix'; received a ""5"" star review refers to review_stars = '5'; ""uber"" number of votes for funny refers to review_votes_funny = 'Uber'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which city is the business that got a ""medium"" length tip with ""3"" likes located in? medium length tip refers to tip_length = 'Medium';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the user who joined Yelp in ""2010"", with an average of ""4.5"" stars review and has got uber number of fans, how many ""funny"" compliments has he/she received from other users? in ""2010"" refers to user_yelping_since_year = '2010'; average of ""4.5"" stars review refers to user_average_stars = '4.5'; uber number of fans refers to user_average_stars = '4.5'; ""funny"" compliments refers to compliment_type = 'funny'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many ""cool"" type compliments does user No. 41717 get? ""cool"" type compliments refers to compliment_type = 'cool'; user No. 41717 refers to user_id = 41717"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Does Yelp business No.""11825"" have a ""parking lot""? business No.""11825"" refers to business_id = '12476'; have a ""parking lot"" refers to attribute_value = 'parking_lot'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Is the payment in mastercard possible for the Yelp business No.""12476""? Yelp business No.""12476"" refers to business_id = '12476'; payment in mastercard refers to attribute_value = 'payment_types_mastercard'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: What is the percentage for the Yelp businesses in ""Pets"" category of all businesses? businesses in ""Pets"" category refers to category_name = 'Pets'; percentage refers to DIVIDE(COUNT(category_name = 'Pets'), COUNT(business_id)) * 100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many times is the number of ""Women's Clothing"" Yelp businesses to ""Men's Clothing""? ""Women's Clothing"" Yelp businesses refers to  category_name = 'Women''s Clothing'; ""Men's Clothing"" refers to category_name = 'Men''s Clothing'; times refers to DIVIDE(COUNT(category_name = 'Women''s Clothing'), COUNT(category_name = 'Men''s Clothing'))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Write down the ID, active status and city of the business which are in CA state. the ID refers to business_id; active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is closed or not running now"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of running business among all business. running business refers to active = 'true'; percentage refers to DIVIDE(COUNT(active = 'true'), COUNT(business_id)) * 100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among all attribute names, list down the ID and attribute name which start with ""music"". attribute name which start with ""music"" refers to attribute_name LIKE 'music%'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Between 2006 and 2007, which year ID had the greater number in elite user? 2006 and 2007 refers to BETWEEN 2006 AND 2007; greater number in elite user refers to count(user_id)"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Based on all user compliments, find the percentage of low number of compliments on all compliments ID. low number of compliments refers to number_of_compliments = 'Low'; percentage refers to DIVIDE(COUNT(number_of_compliments = 'Low'), COUNT(user_id)) * 100"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List down the business ID and user ID who got uber for cool votes. got uber for cool votes refers to review_votes_cool = 'Uber'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Write the user ID, business ID and tips length of who started using Yelp since 2004 and had high followers. started using Yelp since 2004 refers to user_yelping_since_year = '2004'; had high followers refers to user_fans = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the review votes of funny and cool hit uber with long review length, describe the business ID, active status, user ID and user year of joining Yelp. review votes of funny refers to review_votes_funny = 'Uber'; cool hit uber refers to review_votes_cool = 'Uber'; user year of joining Yelp refers to user_yelping_since_year"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Under the attribute name of ""music_playlist"", describe the attribute ID, business ID, city and inactive status. active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is inactive or not running now"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate the percentage of business with attribute name of ""Accepts Credit Cards"". percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among the stopped businesses in San Tan Valley city, list down the user ID and review length of who had great experience. stop businesses refers to active = 'false'; great experience refers to review_stars = 5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber. number of compliments reach uber refers to number_of_compliments = 'Uber'; elite year refers to year_id; user average star refers to user_average_stars"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Under the category name of ""Coffee & Tea"", mention any 5 business ID , their state and city."
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Describe category name which had above 10% in comparing with all business and categories. above 10% refers to DIVIDE(COUNT(Business_Categories.business_id = category_id), COUNT(category_id)) * 100% > 10%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: For the business with great experience existed in Sun Lakes city, provide the user ID who gave review on it and user followers. with great experience refers to stars = 5"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Compare the number of business between the category of ""Men's Clothing"" and ""Women's Clothing"". category of ""Men's Clothing"" refers to category_name = 'Men''s Clothing'; ""Women's Clothing"" refers to category_name = 'Women''s Clothing'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers. highest quality user refers to number_of_compliments = 'Uber'; user of under ID 100 refers to user_id < 100 ;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List all the businesses that closed at 8PM. closed at 8PM refers to closing_time = '8PM';"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many 2 stars rated business located in Phoenix, Arizona? located in Phoenix refers to city = 'Phoenix'; Arizona refers to state = 'AZ'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Tempe are rated as 'Wonderful experience? in Tempe refers to city = 'Tempe'; rated as 'Wonderful experience refers to stars > 3"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List all the users with average star less than 3 stars in 2012 average star less than 3 stars refers to user_average_stars < 3; in 2012 refers to user_yelping_since_year = 2012"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Find the percentage of 5 stars rated business. percentage refers to DIVIDE(COUNT(stars = 5), COUNT(business_id)) * 100%"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Calculate difference between business that have the highest number of reviews and business that have the lowest number of reviews. highest number of reviews refers to SUBTRACT(MAX(COUNT(business_id), MIN(COUNT(business_id))))"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List all the tires businesses that are opened everyday. tires businesses refers to category_name = 'Tires'; opened everyday refers to COUNT(distinct opening_time) = 7;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: Which users become an elite in 2012? in 2012 refers to actual_year = 2012;"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: List the business ID of shopping business that have 4 stars ratings. shopping business refers to category_name = 'Shopping'; 4 stars ratings refers to stars = 4"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many business have low check-in on Sunday at 10AM? on Sunday refers to day_of_week = 'Sunday'; low check-in at 10AM refers to label_time_10 = 'Low'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many businesses in Glendale are reviewed by user with the ID of 20241? in Glendale refers to city = 'Glendale'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: State the locations of all Pet Services business. location refers to city; Pet Services business refers to category_name = 'Pet Services'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many photos type compliment given from users with high cool votes? photos type compliment refers to compliment_type = 'photos'; high cool votes refers to review_votes_cool = 'High'"
public_review_platform,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Attributes (
attribute_id integer,
attribute_name text,
PRIMARY KEY (attribute_id),
);
CREATE TABLE Categories (
category_id integer,
category_name text,
PRIMARY KEY (category_id),
);
CREATE TABLE Compliments (
compliment_id integer,
compliment_type text,
PRIMARY KEY (compliment_id),
);
CREATE TABLE Days (
day_id integer,
day_of_week text,
PRIMARY KEY (day_id),
);
CREATE TABLE Years (
year_id integer,
actual_year integer,
PRIMARY KEY (year_id),
);
CREATE TABLE Business_Attributes (
attribute_id integer,
business_id integer,
attribute_value text,
);
CREATE TABLE Business_Categories (
business_id integer,
category_id integer,
);
CREATE TABLE Business_Hours (
business_id integer,
day_id integer,
opening_time text,
closing_time text,
);
CREATE TABLE Checkins (
business_id integer,
day_id integer,
label_time_0 text,
label_time_1 text,
label_time_2 text,
label_time_3 text,
label_time_4 text,
label_time_5 text,
label_time_6 text,
label_time_7 text,
label_time_8 text,
label_time_9 text,
label_time_10 text,
label_time_11 text,
label_time_12 text,
label_time_13 text,
label_time_14 text,
label_time_15 text,
label_time_16 text,
label_time_17 text,
label_time_18 text,
label_time_19 text,
label_time_20 text,
label_time_21 text,
label_time_22 text,
label_time_23 text,
);
CREATE TABLE Elite (
user_id integer,
year_id integer,
);
CREATE TABLE Reviews (
business_id integer,
user_id integer,
review_stars integer,
review_votes_funny text,
review_votes_useful text,
review_votes_cool text,
review_length text,
);
CREATE TABLE Tips (
business_id integer,
user_id integer,
likes integer,
tip_length text,
);
CREATE TABLE Users_Compliments (
compliment_id integer,
user_id integer,
number_of_compliments text,
);
CREATE TABLE Business (
business_id integer,
active text,
city text,
state text,
stars real,
review_count text,
PRIMARY KEY (business_id),
);
CREATE TABLE Users (
user_id integer,
user_yelping_since_year integer,
user_average_stars text,
user_votes_funny text,
user_votes_useful text,
user_votes_cool text,
user_review_count text,
user_fans text,
PRIMARY KEY (user_id),
);
---------------------
QUESTION: How many closed businesses that have more than 10 attributes? closed refers to active = 'false'; more than 10 attributes refers to count(attribute_id) > 10"
