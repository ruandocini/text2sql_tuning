db_id,train_example
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders were returned in the year 2020? returned refers to status_value = 'Returned'; in the year 2020 refers to status_date LIKE '%2020%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the second-least common method of shipping? method of shipping refers to method_name; least method refers to Min(Count(method_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many of the customer addresses are inactive? addresses are inactive refers to address_status = 'Inactive'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the book with the most orders? books refers to title; the most orders refers to Max(Count(order_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the address that received the most orders? address refers to street_name, city; received the most orders refers to Max(count(dest_address_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How much time does it take to update the status of order ""2398""? ""2398"" is the order_id; time =   Subtract(strftime('%Y', status_date), strftime('%Y', order_date)) AS ""year"" , Subtract(strftime('%m', status_date), strftime('%m', order_date)) AS ""month"", Subtract (strftime('%d', status_date), strftime('%d', order_date)) AS ""day"""
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which customer has the most addresses? customer refers to first_name, last_name; the most address refers to Max(count(address_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What percentage of the total prices of all orders are shipped internationally? shipped internationally refers to method_name = 'International'; percentage = Divide (Sum(price where method_name = 'International'), Sum(price)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the authors who wrote fewer pages than the average. author refers to author_name; who wrote fewer pages than the average refers to num_pages < AVG(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Other than zero, what is the lowest price paid by a customer for an order? other than 0 refers to price ! = 0; lowest price paid refers to Min(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers have an address that is located in the city of Villeneuve-la-Garenne? ""Villeneuve-la-Garenne"" is the city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many authors are named Adam? authors named Adam refers to author_name LIKE 'Adam'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers use a Yahoo! Mail e-mail address? Yahoo! Mail e-mail address refers to email LIKE '%@yahoo.com'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What are the city addresses of the customers located in the United States of America? ""United States of America"" is the country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders did Marcelia Goering place in 2021 that uses the Priority Shipping method? in 2021 refers to substr(order_date, 1, 4) = '2021'; priority shipping method refers to method_name = 'Priority'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which books have the most expensive price? most expensive book refers to Max(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers ordered the book titled ""Anleitung zum Zickigsein"" ""Anleitung zum Zickigsein"" is the title of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the most expensive price paid by a customer for the book ""Bite Me If You Can (Argeneau #6)""? ""Bite Me If You Can (Argeneau #6)"" is the title of the book; most expensive price refers to Max(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers ordered the oldest book? oldest book refers to Min(publiation_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the titles of the Spanish books published by Alfaguara. ""Spanish"" is the language_name; 'Alfaguara' is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many customers ordered Stephen King's first book? ""Stephen King"" is the author_name; first book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What are the languages of the first two published books? first two published book refers to Min(publication_date); language refers to language_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who published the book ""The Secret Garden""? ""The Secret Garden"" is the title of the book; who published the book refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books that were published by Scholastic, how many were written by J.K Rowling? ""J.K Rowling"" is the author_name; 'Scholastic' is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What are the names of all the publishers who have published at least 30 books? published at least 30 books refers to Count(book_id) > = 30"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Indicate the last number of each street. street refers to street_name; last number of each street refers to Substr (street_number, -1)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Indicate the complete address of customers located in Lazaro Cardenas. complete address refers to street_number, street_name, city, country; ""Lazaro Cardenas"" is the city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Indicate the ISBN13 of all the books that have less than 140 pages and more than 135. ISBN13 refers to isbn13; less than 140 pages and more than 135 refers to num_pages > 135 AND num_pages < 140;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Indicate the title of the six books with the greatest potential value as collectibles. greatest potential value refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were ordered in the last month of the year 2020? ordered in last month of the year 2020 refers to Substr(order_date, 1, 7) = '2020-12'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Indicate the full name of all customers whose last name begins with the letter K. full name refers to first_name, last_name; last name begin with the letter 'K' refers to last_name LIKE 'K%'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: In which cities are the customers of Costa Rica located? ""Costa Rica"" is the country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which customer addresses are no longer active? no longer active refers to address_status = 'Inactive'; customer address refers to street_number, street_name, city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the full name of the customers who live in Baiyin city? full name refers to first_name, last_name; 'Baiyin' is the city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the email of the customers who place their orders with priority method? priority method refers to method_name = 'Priority'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: On what date did the customers who live at number 460 of their respective streets place their orders? live at number 460 refers to street_number = '460'; date the customers placed their orders refers to order_date"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Identify by their id all the orders that have been cancelled. have been cancelled refers to status_value = 'cancelled'; id refers to order_id"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the status of the orders placed on 04/10/2022? placed on 04/10/2022 refers to SUBSTR(order_date, 1, 10) = '2022-04-10'; status of order refers to status_value"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the highest price at which a customer bought the book 'The Prophet'? ""The Prophet"" is the title of the book; highest price refers to Max(price)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: On what dates were books ordered at a price of 16.54? price of 16.54 refers to price = 16.54; dates the book ordered refers to order_date"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the titles of all the books that Peter H. Smith wrote. ""Peter H.Smit"" is the author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books under 300 pages has HarperCollins Publishers published? under 300 pages refers to num_pages < 300; 'HarperCollins Publishers"" is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books have been published in Japanese? in Japanese refers to language_name = 'Japanese"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the average number of pages in the books written by Jennifer Crusie? ""Jennifer Crusie"" is the author_name; average number of pages refers to AVG(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What percentage of the orders placed by Kaleena were shipped by the international method? shipped by international method refers to method_name = 'International'; percentage = Divide (Sum(method_name = 'International'), Count(method_name)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the full name of the customers who have ordered the book The Sorrows of Young Werther. full name refers to first_name, last_name; 'The Sorrows of Young Werther' is the title of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List every book that Ursola Purdy has ordered. book refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who is the author of the book with the biggest page count? author refers to author_name, biggest page count refers to Max(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books written by Akira Watanabe are available on Gravity? ""Akira Watanabe"" is the author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the full address of Ursola Purdy. full address refers to street_number, street_name, city, country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who is the author of the book The Mystery in the Rocky Mountains? author refers to author_name; 'The Mystery in the Rocky Mountains' is the title of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Identify the publisher of the book Girls' Night In. ""Girls' Night In"" is the title of the book; publisher is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the publisher of the oldest book. publisher refers to publisher_name;  oldest book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Identify the cost difference between Priority and Express shipping methods. ""Priority"" and ""Express"" are both method_name; cost difference = Subtract (Sum(cost where method_name = 'Express'), Sum(cost where method_name 'Priority'))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders have been cancelled in 2022? cancelled refers to status_value = 'Cancelled'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all the books published by BBC Audiobooks. ""BBC Audiobooks"" refers to publisher_name; books refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published in 2017? published in 2017 refers to Substr(publication_date,1, 4) = '2017'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the International Standard Book Number of the book The Mystery in the Rocky Mountains. International Standard Book Number refers to isbn13; 'The Mystery in the Rocky Mountains' is the title of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among all orders updated in 2022, identify the percentage that has been returned. order updated in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'; has been returned refers to status_value = 'Returned'; percentage = Divide (Count(status_value = 'Returned'), Count(status_value)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among all addresses provided by customers, identify the percentage that are not in use anymore. address not in use refers to address_status = 'Inactive'; percentage = Divide (Count(address_status = 'Inactive'), Count(address_status)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many pages does 'Seaward' have? ""Seaward"" is the title of the book; pages refers to num_pages"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who is the author of First Things First? ""First Things First"" is the title of the book; author refers to author_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all books authored by Tom Clancy. ""Tom Clancy"" is the author_name; books refers title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which book by Hirohiko Araki was published on 6/6/2006? ""Hirohiko Araki"" is the author_name; on 6/6/2006 refers to publication_date = '2006-06-06'; which book refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who is the publisher of Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic? ""Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic"" is the title of the book; publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all books published by ADV Manga. ""ADV Manga"" is the publisher_name; books refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Write the full name of the customers whose address is at 55 Dorton Pass, Huangqiao. full name refers to first_name, last_name; '55' is the street_number, 'Dorton Pass' is the street_name; 'Huangqiao' is the city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which country is 9 Green Ridge Point, Arendal located at? ""9"" is the street_number; 'Green Reidge Point' is the street_name; 'Arendal' is the city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List 10 addresses located in Poland. ""Polan"" is the country_name; address refers to street_number, street_name, city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the shipping method ordered by Nicolette Sadler at 6/29/2020 7:40:07 PM? ordered at 6/29/2020 7:40:07 PM refers to order_date = '2020-06-29 19:40:07'; shipping method refers to method_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List all books written in Arabic. ""Arabic"" is the language_name; book refers to title"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which language is 'El plan infinito' written in? ""El plan infinito"" is the title of the book; language refers to language_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What percentage of books written by Hirohiko make up the number of books published by Viz Media? ""Hirohiko Araki"" is the author_name; 'Viz Media' is the publisher_name; percentage = Divide (Count(author_name = 'Hirohiko Araki'), Count(book_id)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the average number of book pages written by Zilpha Keatley Snyder? ""Zilpha Keatley Snyder"" is the author_name; average number of book pages refers to AVG(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the full name of customer with email ckupis4@tamu.edu? ""ckupis4@tamu.edu"" is the email of customer; full name refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which book has the most number of pages? books with the most number of pages refers to Max(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were written by author A.J. Ayer? ""A.J. Ayer"" is the author_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the title of books written by author A.J.Ayer. ""A.J. Ayer"" is the author_name;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: The book name ""The Season: A Candid Look at Broadway"" was published by which publisher? ""The Season: A Candid Look at Broadway"" is the  title of the book; publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the average of English books among all books published by Carole Marsh Mysteries? English book refers to language_name = 'English'; 'Carole Marsh Mysteries' is the publisher_name; average = Divide (Count(language_name = 'English'), Count(book_id))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the title of the book with the most number of pages that was published from 1990 to 2000 by publisher Free Press. books with the most number of pages refers to Max(num_pages); published from 1990 to 2000 refers to SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'; 'Free Press' is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the order price of the book ""The Servant Leader"" in 2003? ""The Servant Leader"" is the title of the book; book in 2003 refers to SUBSTR(publication_date, 1, 4) = '2003'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the current address of customer Kandy? current address refers to address_status = 1; address refers to street_number, street_name, city"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were ordered by customer Kandy Adamec?"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many orders got returned in 2022? orders got returned refers to status_value = 'Returned'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Which country does the customer with the email ""rturbitt2@geocities.jp"" from? ""rturbitt2@geocities.jp"" is the email of customer; country refers to country_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Name the publisher who published the most books. published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the title of the first book that was written by A.J. Ayer? ""A.J. Ayer"" is the author_name; first book refers to Min(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the percentage of books that cost greater than $10 and were ordered by customer Ruthanne Vatini? cost greater than $10 refers to price > 10; percentage = Divide (Count(book_id where price >10), Count(book_id)) * 100; full name refers to the composition of first name, lastname"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the title of books published by AK Press. ""AK Press"" is the publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Who ordered the book with the cheapest price? book with cheapest price refers to Min(price); who order means name of customer which refers to first_name, last_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com. ""fsier3e@ihg.com"" is the email of customer; ISBN refers to isbn13"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Give the author's name of the books that cost 19 dollars and above. books cost 19 dollars and above refers to price > = 19"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the publisher name of the book with ISBN 76092025986. ""76092025986"" is the isbn13"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books published by Birlinn in 2008, how many books have pages around 600 to 700? ""Birlinn"" is the publisher_name; books have pages around 600 to 700 refers to num_pages BETWEEN 600 AND 700; in 2008 refers to SUBSTR(publication_date, 1, 4) = '2008'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the price of the book with ISBN 9780763628321? ""9780763628321"" is the isbn13"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the number of pages of the book in the order ID 1167? number of pages refers to num_pages"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the title of the books published in British-English. ""British English"" is the language_name of the book"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: How many books were published by Brava in 2006? ""Brava"" is the publisher_name; in 2006 refers to SUBSTR(publication_date, 1, 4) = '2006'"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the ISBN and price of the book with book ID 7160. ISBN refers to isbn13;"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the title of the book in the order ID 931?"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the language of the book titled Zorro? ""Zorro"" is the title of the book; langauge refers to language_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Provide the email of the customers that purchased books with a price range of 3 to 5 dollars. books with a price range of 3 to 5 dollars refers to price BETWEEN 3 AND 5"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: List the ISBN of the books that cost 7.5 dollars. ISBN refers to isbn13; books cost 7.5 dollars refers to price = 7.5"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Give the publisher's name of the books authored by Alan Lee. ""Alan Lee"" is the author_name; publisher's name refers to publisher_name"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What is the sum of the number of pages of the books ordered by Mick Sever? sum of the number of pages refers to Sum(num_pages)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Write down the author's name of the book most recently published. author's name refers to author_name; book most recently published refers to Max(publication_date)"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: In books published by Ace Book, what is the percentage of English books published? ""Ace Book"" is the publisher_name; English book refers to language_name = 'English'; percentage = Divide (Count(book_id where language_name = 'English'), Count(book_id)) * 100"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages? book purchased by less than 1 dollar refers to price < 1; books with less than 500 pages refers to num_pages < 500; greater than 500 pages refers to num_pages > 500; Difference = Subtract (Count(book_id where num_pages < 500), Count(book_id where num_pages > 500))"
books,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE address_status (
status_id integer,
address_status text,
PRIMARY KEY (status_id),
);
CREATE TABLE author (
author_id integer,
author_name text,
PRIMARY KEY (author_id),
);
CREATE TABLE book_language (
language_id integer,
language_code text,
language_name text,
PRIMARY KEY (language_id),
);
CREATE TABLE country (
country_id integer,
country_name text,
PRIMARY KEY (country_id),
);
CREATE TABLE address (
address_id integer,
street_number text,
street_name text,
city text,
country_id integer,
PRIMARY KEY (address_id),
FOREIGN KEY (country_id) REFERENCES country(country_id),
);
CREATE TABLE customer (
customer_id integer,
first_name text,
last_name text,
email text,
PRIMARY KEY (customer_id),
);
CREATE TABLE customer_address (
customer_id integer,
address_id integer,
status_id integer,
FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
FOREIGN KEY (address_id) REFERENCES address(address_id),
);
CREATE TABLE order_status (
status_id integer,
status_value text,
PRIMARY KEY (status_id),
);
CREATE TABLE publisher (
publisher_id integer,
publisher_name text,
PRIMARY KEY (publisher_id),
);
CREATE TABLE book (
book_id integer,
title text,
isbn13 text,
language_id integer,
num_pages integer,
publication_date date,
publisher_id integer,
PRIMARY KEY (book_id),
FOREIGN KEY (language_id) REFERENCES book_language(language_id),
FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
);
CREATE TABLE book_author (
book_id integer,
author_id integer,
FOREIGN KEY (book_id) REFERENCES book(book_id),
FOREIGN KEY (author_id) REFERENCES author(author_id),
);
CREATE TABLE shipping_method (
method_id integer,
method_name text,
cost real,
PRIMARY KEY (method_id),
);
CREATE TABLE cust_order (
order_id integer,
order_date datetime,
customer_id integer,
shipping_method_id integer,
dest_address_id integer,
PRIMARY KEY (order_id),
);
CREATE TABLE order_history (
history_id integer,
order_id integer,
status_id integer,
status_date datetime,
PRIMARY KEY (history_id),
);
CREATE TABLE order_line (
line_id integer,
order_id integer,
book_id integer,
price real,
PRIMARY KEY (line_id),
);
---------------------
QUESTION: What are the language and title of the ordered books with price less than 20% of the average price of all ordered books? language refers to language_name; books with price less than 20% of the average price refers to price < Multiply (AVG(price), 0.2)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the full names of all the sanitarians under the supervision of Darlisha Jacobs. full name refers to first_name, last_name"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the full names of the sanitarians who did at least one inspection in May, 2010. full name refers to first_name, last_name; in May 2010 refers to inspection_date like '2010-05%'; sanitarian refers to title = 'Sanitarian'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections were sanitarian Joshua Rosa responsible for in 2010? in 2010 refers to inspection_date like '2010%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the assumed name of all the facilities inspected by Joshua Rosa. assumed name refers to dba_name"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the facilities that have undergone at least one inspection in 2010, how many of them are restaurants or cafeterias? in 2010 refers to inspection_date like '2010%'; restaurant or cafeteria refers to facility_type = 'Restaurant'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the location coordinates of all the facilities that had an inspection on 2010/5/11. location coordinates refers to latitude, longitude; on 2010/5/11 refers to inspection_date = '2010-05-11'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42? in 2010 refers to inspection_date like '2010%'; in ward no.42 refers to ward = 42"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the full names of all the sanitarians who have inspected the facility Burbank. full name refers to first_name, last_name; the facility Burbank refers to dba_name = 'Burbank'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the assumed name of all the facilities that failed an inspection in 2010. assumed name refers to dba_name; failed an inspection refers to results = 'Fail'; in 2010 refers to inspection_date like '2010%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11? full name refers to first_name, last_name;  Amundsen High School refers to dba_name = 'AMUNDSEN HIGH SCHOOL'; on 2010/5/11 refers to inspection_date = '2010-05-11'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the inspections done by sanitarian Joshua Rosa, how many of them have the result of ""pass""? have the result of ""pass"" refers to results = 'Pass'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done? Azha Restaurant Inc. refers to dba_name = 'Azha Restaurant Inc.'; on 2010/1/21 refers to inspection_date = '2010-01-21'; follow-up inspection date refers to followup_to"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the facilities that had undergone at least one inspection in 2010, how many of them have the most serious food safety issues? in 2010 refers to inspection_date like '2010%'; the most serious food safety issues refers to risk_level = 3"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the average number of inspections carried out in the year 2010 by a sanitarian whose salary is over 70000? in the year 2010 refers to inspection_date like '2010%'; salary is over 70000 refers to salary > 70000; average number = divide(sum(inspection where inspection_date like '2010%'), sum(employee_id where salary > 70000))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the point level of ""Refrigeration and metal stem thermometers provided and conspicuous""? ""Refrigeration and metal stem thermometers provided and conspicuous"" refers to Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Which employee was responsible for inspection no.48224? Give the full name. inspection no.48224 refers to inspection_id = '48224'; full name refers to first_name, last_name;"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections did All Style Buffet Restaurant have? All Style Buffet refers to dba_name = 'All Style Buffet'; Restaurant refers to facility_type = 'Restaurant'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: When did Wing Hung Chop Suey Restaurant have its first inspection? Wing Hung Chop Suey Restaurant refers to aka_name = 'WING HUNG CHOP SUEY RESTAURANT'; first inspection refers to min(inspection_date)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many restaurants were inspected on 2015/5/8? restaurant refers to facility_type = 'Restaurant'; on 2015/5/8 refers to inspection_date = '2015-05-08'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many ""food maintenance"" related violations did inspection no.1454071 have? ""food maintenance"" related refers to category = 'Food Maintenance'; inspection no.1454071 refers to inspection_id = '1454071'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: State the number of violations did Royal Thai Cuisine has during the 2015/5/8 inspection. Royal Thai Cuisine refers to dba_name = 'ROYAL THAI CUISINE'; 2015/5/8 refers to inspection_date = '2015-05-08'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: For the grocery store located at ""3635 W DIVERSEY AVE"", how many inspections did it have? grocery store refers to facility_type = 'Grocery Store'; ""3635 W DIVERSEY AVE"" refers to address = '3635 W DIVERSEY AVE'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Who is responsible for most of the inspections? Give the full name. full name refers to first_name, last_name; most of the inspections refers to max(count(employee_id))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections done by Lisa Tillman ended up with the result of ""Out of Business""? the result of ""Out of Business"" refers to results = 'Out of Business'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: For the sanitarian who lives on 5000 N Wolcott Ave, how many establishments did he/she inspect in the May of 2011? sanitarian refers to title = 'Sanitarian'; 5000 N Wolcott Ave refers to address = '5000 N Wolcott Ave'; in May 2011 refers to inspection_date between '2011-04-30' and '2011-06-01'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Show the phone number of the sanitarian who was responsible for inspection no.634597. phone number refers to phone; sanitarian refers to title = 'Sanitarian'; inspection no.634597 refers to inspection_id = '634597'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: State the salary of the employee who did the most inspections. the most inspections refers to max(count(employee_id))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the average number of inspections did risk level 3 taverns have? risk level 3 refers to risk_level = '3'; tavern refers to facility_type = 'TAVERN'; average number = divide(count(inspection_id), sum(license_no)) where risk_level = '3' and facility_type = 'TAVERN'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: State the inspection pass rate of Pockets Restaurant. Pockets refers to dba_name = 'POCKETS'; Restaurant refers to facility_type = 'Restaurant'; pass refers to results = 'Pass'; the inspection pass rate = divide(sum(inspection_id where results = 'Pass'), count(license_no)) where dba_name = 'POCKETS' and facility_type = 'Restaurant'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many sanitarian employees in Chicago are from the zip code 60617? sanitarian refers to title = 'Sanitarian'; in Chicago refers to city = 'Chicago'; zip code 60617 refers to zip = 60617"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the assumed name of the business located at 2903 W Irving Park Rd? assumed name refers to dba_name; 2903 W Irving Park Rd refers to address = '2903 W IRVING PARK RD '"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the full name of the employee with the lowest salary? full name refers to first_name, last_name; the lowest salary refers to min(salary)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many establishments that are doing business as Homemade Pizza have a risk level of 2? Homemade Pizza refers to dba_name = 'HOMEMADE PIZZA'; a risk level of 2 refers to risk_level = 2"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections with critical food safety problems are under inspection point id 3? critical food safety problems refers to fine = 500; point_id = 3"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many employees are under Gregory Cardenas?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: When did Renaldi's Pizza had its first inspection? Renaldi's Pizza refers to dba_name = 'RENALDI''S PIZZA'; first inspection refers to min(inspection_date)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the full name of the employee who was responsible for the most inspection in March 2016? full name refers to first_name, last_name; the most inspection refers to max(count(employee_id)); in March 2016 refers to inspection_date like '2016-03%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What are the names of the businesses that passed with conditions in May 2012? name of business refers to dba_name; passed with conditions refers to results = 'Pass w/ Conditions'; in May 2012 refers to inspection_date like '2012-05%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Out of all the short form complaint inspections done by David Hodges, how many businesses passed? short form complaint inspection refers to inspection_type = 'Short Form Complaint'; pass refers to results = 'Pass'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015? ward 42 refers to ward = 42; at least 5 failed inspection results refers to count(results = 'Fail') > = 5; between 1/1/2010 to 12/31/2015 refers to inspection_date between '2010-01-01' and '2015-12-31'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How much is the salary of the employee who has the highest number of inspections done of all time? the highest number of inspections done refers to max(count(employee_id))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the assumed name of the business that has the highest total fine in 2014? assumed name of business refers to dba_name; the highest total fine refers to max(sum(fine)); in 2014 refers to inspection_date like '2014%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the precise location of the establishment with the highest number of failed inspections? precise location refers to latitude, longitude; the highest number of failed inspections refers to max(count(results where results = 'Fail'))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What are the comments of the inspector during the inspection of Taqueria La Fiesta on 1/25/2010? comment of the inspector refers to inspector_comment; Taqueria La Fiesta refers to dba_name = 'TAQUERIA LA FIESTA'; on 1/25/2010 refers to inspection_date = '2010-01-25'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How much is the total fine given to Ron of Japan Inc in its inspection done on February 2014? total fine = sum(fine); Ron of Japan Inc refers to dba_name = 'RON OF JAPAN INC'; on February 2014 refers to inspection_date like '2014-02%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List the full names of the employees who were responsible for inspecting Taqueria La Paz. full name refers to first_name, last_name; Taqueria La Paz refers to dba_name = 'TAQUERIA LA PAZ'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the full name of the employee who gave the highest amount of fine of all time? full name refers to first_name, last_name; the highest amount of fine refers to max(sum(fine))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the average number of inspections done by the top 5 employees with the highest salary? List the names of the said employees. the highest salary refers to max(salary); sanitarian refers to title = 'Sanitarian'; name refers to first_name, last_name; average number = divide(sum(inspection_id), 5)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Which business had the highest number of inspections done? Calculate the percentage of passed and failed inspections of the said business. business name refers to dba_name; the highest number of inspections done max(count(inspection_id)); percentage of passed inspections = divide(sum(inspection_id where results = 'Pass'), total(inspection_id)) * 100%; percentage of failed inspections = divide(sum(inspection_id where results = 'Fail'), total(inspection_id)) * 100%"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL? 7211 S Hermitage Ave refers to address = '7211 S Hermitage Ave'; Chicago refers to city = 'Chicago'; IL refers to state = 'IL'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the establishment's name and employee involved in the inspection ID 44256 on May 5, 2010? establishment's name refers to dba_name; employee name refers to first_name, last_name; inspection ID 44256 refers to inspection_id = 44256; on May 5, 2010 refers to inspection_date = '2010-05-05'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Give the address of the schools that passed the inspection in March 2010. school refers to facility_type = 'School'; pass refers to results = 'Pass'; in March 2010 refers to inspection_date like '2010-03%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the employee's full name involved in the canvass inspection type on March 09, 2010? full name refers to first_name, last_name; canvass inspection type refers to inspection_type = 'Canvass'; on March 09, 2010 refers to inspection_date = '2010-03-09'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the inspection ID of the establishment named ""PIZZA RUSTICA, INC."" ""PIZZA RUSTICA, INC."" refers to dba_name = 'PIZZA RUSTICA, INC'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many restaurants with the highest risk level still passed the inspection? restaurant refers to facility_type = 'Restaurant'; the highest risk level refers to max(risk_level); pass the inspection refers to results = 'Pass'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List the names of employees involved in an inspection with the Display of Inspection Report Summary category. name refers to first_name, last_name; Display of Inspection Report Summary category refers to category = 'Display of Inspection Report Summary'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the title of the employee involved in inspection ID 60332?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many of the restaurants with the lowest risk level failed the complaint inspection type? restaurant refers to facility_type = 'Restaurant'; the lowest risk level refers to min(risk_level); failed refers to results = 'Fail'; the complaint inspection type refers to inspection_type = 'Complaint'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the fine paid and the complete address of the establishment with inspection ID 48216. complete address refers to state, city, address"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the inspection ID of the inspection with critical point level, $500 fine, and inspector comment ""CDI ON 5-17-10""? critical point level refers to point_level = 'Critical'; $500 fine refers to fine = 500; inspector comment ""CDI ON 5-17-10"" refers to inspector_comment = 'CDI ON 5-17-10'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What are the inspection description and inspector's comments in the inspection ID 164795? inspection description refers to Description; inspector's comment refers to inspector_comment"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What are the inspector's comments and clean operating requirement code for inspection ID 54216 and point ID 34? inspector's comment refers to inspector_comment; clean operating requirement code refers to code"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the establishments that failed in the inspection, what is the percentage of establishments with the highest risk level? failed in inspection refers to results = 'Fail'; the highest risk level refers to max(risk_level); percentage = divide(count(license_no where risk_level = max(risk_level)), count(license_no)) * 100% where results = 'Fail'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500? salary between $75000 and $85000 refers to 75000 < = salary < = 80000; difference = subtract(count(inspection_id where fine = 100), count(inspection_id where fine = 500)) where 75000 < = salary < = 80000"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections were done in January 2011? in January 2011 refers to inspection_date like '2011-01%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections failed in 2014? failed refers to results = 'Fail'; in 2014 refers to inspection_date like '2014%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the percentage of inspections with the fine for a minor food safety problem. fine for a minor food safety problem refers to fine = 100; percentage = divide(count(inspection_id where fine = 100), sum(inspection_id)) * 100%"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List the point IDs and fines of the inspections done on 7th August 2010. on 7th August 2010 refers to inspection_date = '2010-08-07'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections were done under the personnel category? under the personnel category refers to category = 'Personnel'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the names and inspection results of the facilities located in Burnham. names refers to dba_name; inspection result refers to results; in Burnham refers to city = 'BURNHAM'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Compare the number of inspections under toxic items and no-smoking regulations. under toxic items refers to category = 'Toxic Items'; no-smoking regulations refers to category = 'No Smoking Regulations'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Which facilities were inspected by Sarah Lindsey on 20th November 2012? facility name refers to dba_name; on 20th November 2012 refers to inspection_date = '2012-11-20'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the categories and fines for the inspections done by Lisa Tillman in January 2014. in January 2014 refers to inspection_date like '2014-01%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections were done under the display of inspection report summary category? under the display of inspection report summary category refers to category = 'Display of Inspection Report Summary'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List the types and results of the inspections done on Riverwalk café. type refers to inspection_type; Riverwalk café refers to facility_type = 'RIVERWALK CAFE'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Who inspected Jean Samocki and what was the result? employee's name refers to first_name, last_name; Jean Samocki refers to dba_name = 'JEAN SAMOCKI'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How much did Hacienda Los Torres from ward 36 fine for failing an inspection? Hacienda Los Torres refers to dba_name = 'HACIENDA LOS TORRES'; ward 36 refers to ward = 36; failing an inspection refers to results = 'Fail';"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the total amount of fine under the food equipment and utensil category. under the food equipment and utensil category refers to category = 'Food Equipment and Utensil'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the names and locations of the facilities that failed inspections on 29th July 2013. name refers to dba_name; location refers to latitude, longitude; failed inspections refers to results = 'Fail'; on 29th July 2013 refers to inspection_date = '2013-07-29'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the percentage of inspections with verified quality. Among them, how many businesses were from Chicago? verified quality refers to results like 'Pass%'; from Chicago refers to city = 'CHICAGO'; percentage = divide(count(inspection_id where results like 'Pass%'), sum(inspection_id)) * 100%"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the average inspections per year done by Jessica Anthony from 2010 to 2017. from 2010 to 2017 refers to inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'; average inspections per year = divide(count(inspection_id where inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'), 8)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the first name of employee who did inspection ID 48225?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Tell the address of employee who did inspection ID 52238?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Write down the last name of employee who did inspection ID 52238?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the inspection result for inspection done by Thomas Langley? inspection result refers to results"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List down the address of employees who did inspection dated 11/5/2010. dated 11/5/2010 refers to inspection_date = '2010-11-05'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List down the phone numbers of employees who did Canvass inspection. phone number refers to phone; Canvass inspection refers to inspection_type = 'Canvass'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the job title of employee who did inspection ID 52269? job title refers to title"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What are the inspection results for Xando Coffee & Bar / Cosi Sandwich Bar? Xando Coffee & Bar / Cosi Sandwich Bar refers to dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What type of inspection was done at John Schaller? type of inspection refers to inspection_type; John Schaller refers to dba_name = 'JOHN SCHALLER'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List down the dba name of restaurants that were inspected due to license. inspected due to license refers to inspection_type = 'License'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspections done in 2010 had serious food safety issue? in 2010 refers to inspection_date like '2010%'; had serious food safety issue refers to risk_level = 3"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: State the name of dbas with verified quality. name of dba refers to dba_name; with verified quality refers to results = 'Pass' or results = 'Pass w/Conditions'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the total salary for employees who did inspection from ID 52270 to 52272. inspection from ID 52270 to 52272 refers to inspection_id between 52270 and 52272"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Calculate the average salary for employees who did inspection on License Re-Inspection. inspection on License Re-Inspection refers to inspection_type = 'License Re-Inspection'; average salary = avg(salary)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Did license number 1222441 pass the inspection and what is the zip code number of it? license number 1222441 refers to license_no = 1222441; result of the inspection refers to results; zip code number refers to zip"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: When did restaurant John Schaller has its first inspection in 2010? John Schaller refers to dba_name = 'JOHN SCHALLER'; first inspection refers to min(inspection_date); in 2010 refers to inspection_date like '2010%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the full name of the employee that inspected establishments with license 1334073? full name refers to first_name, last_name; with license 1334073 refers to license_no = 1334073"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Which establishments did Joshua Rosa inspect? establishment name refers to dba_name"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many employees have salary greater than 70000 but fail the inspection? salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Name the food businesses that passed the inspection in 2010. business name refers to dba_name; food business refers to restaurant; pass the inspection refers to results = 'Pass'; in 2010 refers to inspection_date like '2010%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the name of the establishment that Joshua Rosa inspected? name of the establishment refers to dba_name"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many taverns failed in July 2010? tavern refers to facility_type = 'Tavern'; failed refers to results = 'Fail'; in July 2010 refers to inspection_date like '2010-07%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the risk level of the establishment that Bob Benson inspected?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Which establishments did Bob Benson inspect in 2010 and what was the results? establishment name refers to dba_name; in 2010 refers to inspection_date like '2010%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the title of the employee that inspected the establishment with license number 1576687? license number 1576687 refers to license_no = 1576687"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many inspection points with serious point level that have no fine? serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the percentage of restaurants that paid a fine of 250 among all establishments? a fine of 250 refers to fine = 250; percentage = divide(sum(license_no where fine = 250), count(license_no)) * 100%"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection? a risk level of 1 refers to risk_level = 1; pass the inspection refers to results = 'Pass'; percentage = divide(sum(license_no where risk_level = 1), count(license_no)) * 100% where results = 'Pass'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Where does the employee named ""Standard Murray"" live? address refers to address, city, state"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the facility type of the establishment named ""Kinetic Playground""? the establishment named ""Kinetic Playground"" refers to dba_name = 'Kinetic Playground'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How much salary does Jessica Anthony receive?"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the restaurant's name at ""41.9532864854"" latitude and ""-87.7673790701422"" longitude? restaurant refers to facility_type = 'Restaurant'; name refers to dba_name; ""41.9532864854"" latitude and ""-87.7673790701422"" longitude refers to latitude = 41.9532864854 and longitude = -87.7673790701422"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the list of employees, what is the total number of supervisors? supervisor refers to title = 'Supervisor'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Where in Chicago does the restaurant named ""Old Timers Rest & Lounge"" located? in Chicago refers to city = 'CHICAGO'; restaurant refers to facility_type = 'Restaurant'; ""Old Timers Rest & Lounge"" refers to dba_name = 'OLD TIMERS REST & LOUNGE'; location refers to address"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many employees are living in Hoffman Estates, IL? in Hoffman Estates refers to city = 'Hoffman Estates'; IL refers to state = 'IL'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the total number of establishments with the highest risk level? total number of establishments with the highest risk level = count(max(risk_level))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Who is the employee that receives 82700 as their salary? employee name refers to first_name, last_name; receives 82700 as salary refers to salary = 82700"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the last name of the employee involved in the inspection ID 52256."
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Please list the names of taverns that paid a $100 fine upon inspection. name refers to dba_name; tavern refers to facility_type = 'Tavern'; a $100 fine refers to fine = 100"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List point level of inspections with no fine. no fine refers to fine = 0"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the facility type and license number of establishments with the lowest risk level but failed the inspection. license number refers to license_no; the lowest risk level refers to min(risk_level); failed the inspection refers to results = 'Fail'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the result of the February 24, 2010 inspection involving the employee named ""Arnold Holder""? February 24, 2010 refers to inspection_date = '2010-02-24'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many restaurants failed the inspection in April 2010? restaurant refers to facility_type = 'Restaurant'; failed the inspection refers to results = 'Fail'; in April 2010 refers to inspection_date like '2010-04%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List all inspection IDs where the employee named ""Rosemary Kennedy"" was involved."
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What type of inspection was done on July 07, 2010, involving the employee named ""Lisa Tillman""? type of inspection refers to inspection_type; on July 07, 2010 refers to inspection_date = '2010-07-07'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the inspection ID of the inspection with the comment ""MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA"" and sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A). comment ""MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA"" refers to inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'; sanitary operating requirement code of 7-38-030, 015, 010 (A), 005 (A) refers to code = '7-38-030, 015, 010 (A), 005 (A)'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List down the names of the establishments with the highest risk level and failed the inspection. name of establishment refers to dba_name; the highest risk level refers to max(risk_level); failed the inspection refers to results = 'Fail'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the inspection ID where the employee named ""David Hodges"" is currently employed in the ""Kamayan Express"" establishment? the ""Kamayan Express"" establishment refers to dba_name = 'KAMAYAN EXPRESS'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Provide the salary range of the employee involved in the inspection ID 58424."
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: List down the inspection ID with the inspector's comment ""A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED"" and inspection category of Personnel. inspector's comment ""A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED"" refers to inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'; inspection category of Personnel refers to category = 'Personnel'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many grocery stores paid $250 fine upon their inspection? grocery store refers to facility_type = 'Grocery Store'; $250 fine refers to fine = 250"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the category of the inspection of the establishment named ""J & J FOOD""? the establishment named ""J & J FOOD"" refers to dba_name = 'J & J FOOD'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Name the taverns that failed the inspection in January 2010. tavern refers to facility_type = 'Tavern'; failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: How many of the inspections with serious point levels have no fines? serious point level refers to point_level = 'Serious'; no fines refers to fine = 0"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the establishment's name with an inspection category of No Smoking Regulations? establishment's name refers to dba_name; an inspection category of No Smoking Regulations refers to category = 'No Smoking Regulations'"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: What is the difference in the number of restaurants that passed and failed the canvass inspection type? canvass inspection type refers to inspection_type = 'Canvass'; restaurant refers to facility_type = 'Restaurant'; difference = subtract(count(inspection_id where results = 'Pass'), count(inspection_id where results = 'Fail'))"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the establishments that failed the inspection in February 2010, list the names of the employees with a salary greater than 70% of the average salary of all employees. failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'; name of employee refers to first_name, last_name; a salary greater than 70% of the average salary refers to salary > multiply(avg(salary), 0.7)"
food_inspection_2,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE employee (
employee_id integer,
first_name text,
last_name text,
address text,
city text,
state text,
zip integer,
phone text,
title text,
salary integer,
supervisor integer,
PRIMARY KEY (employee_id),
FOREIGN KEY (supervisor) REFERENCES employee(employee_id),
);
CREATE TABLE establishment (
license_no integer,
dba_name text,
aka_name text,
facility_type text,
risk_level integer,
address text,
city text,
state text,
zip integer,
latitude real,
longitude real,
ward integer,
PRIMARY KEY (license_no),
);
CREATE TABLE inspection (
inspection_id integer,
inspection_date date,
inspection_type text,
results text,
employee_id integer,
license_no integer,
followup_to integer,
PRIMARY KEY (inspection_id),
FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
FOREIGN KEY (license_no) REFERENCES establishment(license_no),
FOREIGN KEY (followup_to) REFERENCES inspection(inspection_id),
);
CREATE TABLE inspection_point (
point_id integer,
Description text,
category text,
code text,
fine integer,
point_level text,
PRIMARY KEY (point_id),
);
CREATE TABLE violation (
inspection_id integer,
point_id integer,
fine integer,
inspector_comment text,
FOREIGN KEY (inspection_id) REFERENCES inspection(inspection_id),
FOREIGN KEY (point_id) REFERENCES inspection_point(point_id),
);
---------------------
QUESTION: Among the establishments that paid a 500 fine, what is the percentage of restaurants? a 500 fine refers to fine = 500; restaurant refers to facility_type = 'Restaurant'; percentage = divide(count(license_no where facility_type = 'Restaurant'), count(license_no)) * 100% where fine = 500"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coin that has the highest market capitalization for all transactions in 2018. highest market capitalization refers to max(market_cap); in 2018 refers to year(date) = 2018"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11. total value in the past 24 hours refers to volume_24h; on 11/10/16 refers to date = '2016-11-10'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days? on 1/11/13 and the next 7 consecutive days refers to DATE BETWEEN '2013-11-01' AND '2013-11-07'; average price refers to AVG(price); Zetacoin refers to name = 'Zetacoin'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price. in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: State the transaction date whereby DigixDAO was transacted at the hightest price. the highest price refers to max(price); DigixDAO refers to name = 'DigixDAO'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price. the highest percentage price changed in 24 hours refers to max(percent_change_24h)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What is the average monthly circulating supply for Frozen in 2014. average monthly circulating supply = AVG(circulating_supply); in 2017 refers to date BETWEEN '2017-01-01' AND '2017-12-31'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List all the inactive coins and state the last date of its transaction? the last date refers to max(date); inactive coins refers to status = 'inactive'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the price of 1 Bitcoin in 2016? 2016 refers to historical date where year(date) = 2016"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: State the transaction date and the price when Bitcoin was bottomed? was bottomed refers to min(price)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: For all coins with average price more than $1000. State the current status of the coin. average price more than $1000 refers to AVG(price)>1000"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coin and date of transactions with the greatest decline in percent change in 1 hour. the greatest decline in percent change in 1 hour refers to max(percent_change_1h)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coin under the token category that gives the highest max profit. the highest max profit refers to max(subtract(high, low))"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coin that have higher than average percentage price changed from the previous 24 hours for transaction on 2013/6/22. average percentage price changed from the previous 24 hours refers to AVG(percent_change_24h); on 15/5/2013 refers to DATE = '2013-04-15'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28? ranked the first refers to cmc_rank = 1; on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market? worth refers to price; on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Which crytocurrency was not opened on 2013/5/3? not opened refers to open IS NULL; on 2013/5/3 refers to date = '2013-05-03'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the price of Bitcoin when it closed at the end of the day on 2013/4/29? price when it closed refers to close; on 2013/4/29 refers to date = '2013-04-29'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When did Bitcoin reach its highest price on 2013/4/29? time that a coin reaches its highest price refers to time_high; on 2013/4/29 refers to date = '2013-04-29'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the max profit a user can make on Bitcoin on 2013/4/28? the max profit = subtract(high, low); on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the number of Bitcoins verifiably burned until 2013/4/28? the number of Bitcoins verifiably burned = max_supply - total_supply; 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Which crytocurrency was traded in the highest value on 2016/1/8? traded in the highest value refers to max(volume_24h); on 2016/1/8 refers to date = '2016-01-08'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Please list the names of the crytocurrencies that have a total amount of existence of over 10000000 on 2013/4/28. a total amount of existence of over 10000000 refers to total_supply>10000000; on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before? price increased refers to percent_change_7d>0; decreased refers percent_change_7d<0; on 2013/5/5 refers to date = '2013-05-05'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin? a bigger number of coins circulating in the market refers to max(circulating_supply); on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: How much was a Bitcoin on 2013/4/28? how much refers to price; on 2013/4/28 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the average price of a Bitcoin in the year 2013? average price refers SUM(price)/COUNT(named = 'Bitcoin'); in the year 2013 refers to year(date) = 2013"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What was the percentage of the Bitcoins verifiably burned until 2018/4/28? the percentage of the Bitcoins verifiably burned = divide(subtract(SUM(max_supply), SUM(total_supply)),SUM(total_supply))*100%; until 2013/4/28 refers to date<'2013-04-08'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Please list the names of coins that has been disappeared. has disappeared refers to status = 'extinct'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What's the descripition of BitBar?"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: How many coins were added in May 2013? Please list the names of coins. in May 2013 refers to year(date_added) = 2013 and month(date_added) = 5"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List the names and symbols of the coins that were added on June 14, 2013. added on June 14, 2013 refers to date_added like '2013-06-14%'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List the names of coins that cannot be traded in 2014. cannot be tracked refers to status = 'untracked'; in 2014 refers to year(date_added) = '2014'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coins that have three tags. have three tags refers to length(tag_names)-length(replace(tag_names,',','')) = 2"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What is the name of the coin with the highest price? the highest price refers to max(price)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Please name the coin that ranked first among the coins traded on April 29, 2013. ranked first refers to cmc_rank = 1; on April 29, 2013 refers to date = '2013-04-29'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When is the best time to purchase Bitcoin? lowest price refers to low; best time refers to date with the low;"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What is the name of the coin that creates the most total value in the past 24 hours? creates the most total value in the past 24 hours refers to max(volume_24h)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: Name the coins that were not opened on May 2013. not opened refers to open IS NULL; on May 2013 refers to year(date) = 2019 AND month(date) = 5"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When is the highest closed price of CHNCoin? the highest closed price refers to max(close)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When did Peercoin rank fifth? when refers to date; rank fifth refers to cmc_rank = 5"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When is Devcoin most valuable in the market? when refers to date; most valuable refers to max(market_cap)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List the names of the top five coins traded on January 1, 2014. the top five coins refers to cmc_rank< = 5; on January 1, 2014 refers to date = '2014-01-01'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When was Lebowskis not opened? when refers to date; not opened refers to open IS NULL"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: When is the highest price of Terracoin? when refers to date; the highest price refers to max(price)"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: How many times was Bytecoin traded in June 2013? in June 2013 refers to year(date) = 2013 AND month(date) = 6"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: List the names of the coins above the average price on April 28, 2013. average price = divide(sum(price), count(name)); on April 28, 2013 refers to date = '2013-04-28'"
coinmarketcap,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE coins (
id integer,
name text,
slug text,
symbol text,
status text,
category text,
description text,
subreddit text,
notice text,
tags text,
tag_names text,
website text,
platform_id integer,
date_added text,
date_launched text,
PRIMARY KEY (id),
);
CREATE TABLE historical (
date date,
coin_id integer,
cmc_rank integer,
market_cap real,
price real,
open real,
high real,
low real,
close real,
time_high text,
time_low text,
volume_24h real,
percent_change_1h real,
percent_change_24h real,
percent_change_7d real,
circulating_supply real,
total_supply real,
max_supply real,
num_market_pairs integer,
);
---------------------
QUESTION: What's the percentage of coins that is higher than the price 1 hour ago in May 29,2013? List the names of these coins. percentage that is higher than the price 1 hour ago refers to percent_change_1h>0; in May 29,2013 refers to date = '2013-05-29'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees have obtained a doctorate? doctorate refers to TitleOfCourtesy = 'Dr.;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: To whom does Nancy Davolio report? Please give that employee's full name. to whom refers to ReportsTo; full name = FirstName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which phone number should I call if I want to reach Nancy Davolio's home? phone number of Nancy Davolio's home refers to HomePhone WHERE FirstName = 'Nancy' AND LastName = 'Davolio';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees have Andrew Fuller as their direct supervisor? direct supervisor refers to ReportsTo where the person being reported to is usually the direct supervisor of the reporter;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which employee has the highest salary? Please give his or her full name. highest salary refers to MAX(Salary); full name = FirstName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much higher is the salary of Andrew Fuller than that of Nancy Davolio? how much higher = SUBTRACT(SUM(Salary WHERE LastName = 'Fuller' and FirstName = 'Andrew'), SUM(Salary WHERE LastName = 'Davolio' and FirstName = 'Nancy'));"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the employees working as Sales Representatives, how many of them are located in the UK? Sales Representatives refers to Title = 'Sales Representative'; UK refers to Country = 'UK';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which employee is in charge of the sales in Hollis? Please give the employee's full name. Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: The sales of how many territories is Nancy Davolio in charge of?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the names of all the territories whose sales are taken in charge by Nancy Davolio. names of all territories refers to TerritoryDescription;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: The sales of how many territories in total do the employees in London take charge of? London refers to city = 'London';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller. territories refers to TerritoryDescription;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees in the UK takes charge of the sales in over 4 territories? UK refers to Country = 'UK'; employees with over 4 territories refers to EmployeeID WHERE TerritoryID > 4;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territories are there in the Eastern Region? Eastern Region refers to RegionDescription = 'Eastern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list all the territories in the Eastern Region. territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees in total are in charge of the sales in the Eastern Region? Eastern Region refers to RegionDescription = 'Eastern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region. home phone numbers refers to HomePhone; Eastern Region refers to RegionDescription = 'Eastern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many more territories are there in than Eastern Region than in the Southern Region? how many more = SUBTRACT(SUM(RegionDescription = 'Eastern'), SUM(RegionDescription = 'Southern')); Eastern Region refers to RegionDescription = 'Eastern'; Southern Region refers to RegionDescription = 'Southern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the names of all the products ordered in order no. 10248. names of the products refers to ProductName; order no. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the quantity of Ikura ordered in order no. 10273? Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total price of Ikura ordered in order no. 10273? total price = MULTIPLY(UnitPrice, Quantity); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total production of the product that is ordered in the highest quantity in order no. 10248? total production of the product = SUM(units in stock, units on order); order no. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of all the products ordered in order no. 10248, which product has the highest user satisfaction? order no. refers to OrderID; highest user satisfaction refers to MAX(ReorderLevel);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders have asked for the product Tofu? product refers to ProductName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the IDs of the orders with a product whose production is not continuous. IDs of the orders refers to OrderID; production is not continuous refers to Discontinued = 1;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of all the orders that have ordered Ikura, how many of them enjoys a unit price that's lower than its standard unit price? Ikura refers to ProductName = 'Ikura'; ordered unit price that's lower than its standard unit price refers to ""Order Details"".UnitPrice < ""Product"".UnitPrice;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the supplier company for Aniseed Syrup? name of the supplier refers to CompanyName; Aniseed Syrup refers to ProductName = 'Aniseed Syrup';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the names of all the products whose supplier is in Japan. names of the products refers to ProductName; Japan refers to Country = 'Japan';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock. UnitsInStock < UnitsOnOrder;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products that are no longer in continuous production, how many of them have their supplier in the USA? no longer continuous refers to Discontinued = 1; USA refers to Country = 'USA';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the supplier of the product with the highest unit price? supplier of the product refers to CompanyName; highest unit price refers to MAX(UnitPrice);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average salary of the employees who takes charge of the sales of over 4 territories? average salary = DIVIDE(SUM(Salary), COUNT(EmployeeID)); employees who takes charge of over 4 territories refers to EmployeeID WHERE COUNT(TerritoryID) > 4;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much lower in percentage is the unit price of Ikura in order no. 10273 than its standard unit price? how much lower in percentage = MULTIPLY(DIVIDE(SUBTRACT(Products.UnitPrice, Order Details.UnitPrice), Products.UnitPrice), 100); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average quantity of Ikura ordered in one order? average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products ordered in order no. 10248, which product has the biggest ratio of units on order to units in stock? order no. refers to OrderID; biggest ratio = MAX(DIVIDE(UnitsOnOrder, UnitsInStock));"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the full name of the youngest employee. full name = FirstName, LastName; youngest refers to latest BirthDate;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the newest hired employee? Give the full name. newest hired refers to latest HireDate; full name = FirstName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the number of orders that were handled by Michael Suyama."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the name of the territory where Mr. Robert King works. name of territory refers to TerritoryDescription; Mr. refers to TitleOfCourtesy = 'Mr';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which territory does Ms. Laura Callahan's direct supervisor work in? Give the name of the territory. Ms. refers to TitleOfCourtesy = 'Ms'; ReportsTo’ represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; name of the territory refers to TerritoryDescription;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is in charge of the ""Santa Monica"" territory? Give the full name. Santa Monica refers to TerritoryDescription = 'Santa Monica'; full name = FirstName, MiddleName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the home phone number of the employee who is in charge of ""Savannah"" territory. home phone number refers to HomePhone; Savannah refers to TerritoryDescription = 'Savannah';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: For the order from ""HILAA"" on 1997/12/25, what was the total quantity of the products in that order? HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: For the order paying the highest freight, how many kinds of products does it contain? highest freight refers to MAX(Freight); kinds of products refers to ProductID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Tell the name of the shipper company for the order No.10585. name of the shipper company refers to ShipName; order No. refers to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the number of orders that were shipped by ""Federal Shipping"". Federal Shipping refers to CompanyName = 'Federal Shipping';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many kinds of products are there in the the category of ""dairy products""? kinds of products refers to ProductID; category refers to CategoryName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which category does ""tofu"" belong to? category refers to CategoryName; tofu refers to ProductName = 'Tofu';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total production of the products from the supplier “Escargots Nouveaux”? total production of the products = add(units in stock , units on order); supplier “Escargots Nouveaux” refers to CompanyName = 'Escargots Nouveaux'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the reorder level for the products from the supplier ""Nord-Ost-Fisch Handelsgesellschaft mbH"". supplier ""Nord-Ost-Fisch Handelsgesellschaft mbH"" refers to CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many kinds of products are supplied by ""Karkki Oy"" company? supplied by refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the contact name of the supplier for the product ""Gudbrandsdalsost"". product refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Tell the country name of the supplier for ""Scottish Longbreads"". ""Scottish Longbreads"" refers to ProductName = 'Scottish Longbreads'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the number of territories in the ""Northern"" region. ""Northern"" region refers to RegionDescription = 'Northern'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region is ""Columbia"" in? region refers to RegionID; ""Columbia"" refers to TerritoryDescription = 'Columbia'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: For the orders of Customer ""WHITC"", what is the percentage of the orders were fulfilled with shipper company ""United Package""? Customer ""WHITC"" refers to CustomerID = 'WHITC'; shipper company ""United Package"" refers to CompanyName = 'United Package'; percentage = divide(count(ShipperID where CompanyName = 'United Package') , count(ShipperID)) * 100%"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many percent more orders were fulfilled with shipper company ""United Package"" than with ""Speedy Express""? percent = divide(subtract(count(OrderID where CompanyName = 'United Package') , count(OrderID where CompanyName = 'Speedy Express')) , count(OrderID where CompanyName = 'Speedy Express')) * 100%"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many times is the number of territories in ""Eastern Region"" than ""Southern Region""? ""Eastern Region"" refers to RegionDescription = 'Eastern'; ""Southern Region"" refers to RegionDescription = 'Southern'; times = divide(count(TerritoryDescription where RegionDescription = 'Eastern') , count(TerritoryDescription where RegionDescription = 'Southern'))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers are there in the country with the highest number of customers? highest number refers to max(count(CustomerID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the order ids of the orders with freight of over 800? freight of over 800 refers to Freight > 800"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the Island Trading customer's complete address? Island Trading refers to CompanyName = 'Island Trading'; complete address = Address, City, Region, Country, PostalCode"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the most expensive product? product refers to ProductName; most expensive refers to max(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many suppliers are there in the United States of America? United States of America refers to Country = 'USA'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product have the highest user satisfaction? product refers to ProductName; highest user satisfaction refers to max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the employee with the highest salary? full name refers to FirstName LastName; highest salary refers to max(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of the products that were discountinued? discontinued refers to Discontinued = 1; name of products refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average salary of sales representatives in the United Kingdom? average salary = avg(Salary); sales representative refers to Title = 'Sales Representative'; in the United Kingdom refers to Country = 'UK'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the most widely used shipping company in the United States of America? most widely used refers to max(count(ShipVia)); shipping company refers to CompanyName; in the United States of America refers to ShipCountry = 'USA'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products were supplied by Pavlova, Ltd.? Pavlova, Ltd. refers to CompanyName = 'Pavlova, Ltd.'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped to GREAL via United Package? GREAL refers to CustomerID = 'GREAL'; via United Package refers to CompanyName = 'United Package'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of the suppliers whose products have the highest user satisfaction? name of the supplier refers to SupplierID; highest user satisfaction refers to max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In total, how many orders were shipped via United Package? via United Package refers to CompanyName = 'United Package'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many suppliers in Australia whose products were discontinued? in Australia refers to Country = 'Australia'; discontinued refers to Discontinued = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much is the total purchase price, including freight, of the top 2 most expensive products? total purchase price including freight refers to add(multiply(UnitPrice , Quantity) , Freight); most expensive refers to max(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the supplier that supplies the most products to the company? name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of the products that were ordered that have a unit price of no more than 5? unit price of no more than 5 refers to UnitPrice < 5; name of products refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the title of the employee with the highest number of territories in charge? highest number of territories refers to max(TerritoryID)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the most ordered products by customers? most ordered refers to max(count(ProductID)); product refers to ProductID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which territories is the employee with a doctorate in charge of? List all of the territory descriptions. with a doctorate refers to TitleOfCourtesy = 'Dr.'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the territory descriptions of territories in the Eastern region? in the Eastern region refers to RegionDescription = 'Eastern'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average number of territories do each sales representative is in charge of? sales representative refers to Title = 'Sales Representative'; average number of territories = divide(count(TerritoryID) , count(EmployeeID)) where Title = 'Sales Representative'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the beverages, which product has the highest customer satisfaction? beverage refers to CategoryName = 'Beverages'; highest customer satisfaction refers to max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the employee who handled the highest amount of orders? full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products were ordered in the order with the highest freight? highest freight refers to max(Freight)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the seafood products, which product have the highest total production of the production? seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the difference in salary of the top 2 employees with the highest number of territories in charge? highest number of territories refers to max(TerritoryID); difference in salary = subtract(employeeA.Salary, employeeB.Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average price of products with more than fifty units in stock? more than fifty units in stock refers to UnitsInStock > 50; average price = avg(UnitPrice where UnitsInStock > 50)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the company names of customers from the city with the most customers. most customers refers to max(count(Relationship))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find and list the company name, company contact name, and contact title of customers from Madrid. from Madrid refers to City = 'Madrid'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the full name and contact number of employees in descending order of age. full name refers to FirstName LastName; contact number refers to HomePhone; descending order of age refers to order by BirthDate desc limit 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average price of products shipped to the UK. average price = divide(sum(UnitPrice) , count(ProductID)); the UK refers to Country = 'UK'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among all the orders, which products sold for the most amount? the most amount refers to max(sum(Quantity))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the name, address, and phone number of companies that supply products for more than thirty dollars per unit. more than thirty dollars per unit refers to UnitPrice > 30"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the customers, list customers' company names and addresses who paid more than average in freight. paid more than average in freight refers to Freight > divide(sum(Freight) , count(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find and list the full name of employees who are from the territory, Wilton. full name refers to FirstName LastName; Wilton refers to TerritoryDescription = 'Wilton'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the names of non-US suppliers that have discontinued. non-US refers to Country <> 'USA'; discontinued refers to Discontinued = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the top five most costly products in 1998. most costly refers to max(add(unit price , Freight)); in 1998 refers to OrderDate > = '1998-01-01 00:00:00' AND OrderDate < '1999-01-01 00:00:00'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of the customers who are from Canada, how many used Federal Shipping? from Canada refers to Country = 'Canada'; Federal Shipping refers to ShipName = 'Federal Shipping'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the name of the top ten most ordered product's names in descending order of the number of orders. most ordered refers to max(COUNT(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which supplier supplies the most amount of products? supplier refers to SupplierID; most amount refers to max(count(ProductID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the full name and region of each employee in alphabetical order. full name refers to FirstName LastName; region refers to RegionDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which employee handled the most amount of orders in 1996? Give the full name, title, and address of this employee. most amount of orders refers to max(count(OrderID)); in 1996 refers to OrderDate > = '1996-01-01 00:00:00' AND OrderDate < '1997-01-01 00:00:00'; full name refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What was the average unit price of products shipped via United Package in 1997? via United Package refers to CompanyName = 'United Package'; in 1997 refers to OrderDate > = '1997-01-01 00:00:00' AND OrderDate < '1998-01-01 00:00:00'; average unit price = divide(sum(UnitPrice), count(ShipperID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the percentage of shipping done through Speedy Express. through Speedy Express refers to CompanyName = 'Speedy Express'; percentage = divide(count(ShipperID where CompanyName = 'Speedy Express') , count(ShipperID)) * 100%"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the courtesy title of the 3 employees who have the lowest salary. courtesy title refers to TitleOfCourtesy; the lowest salary refers to MIN(Salary);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the last name of the employees who must report to the Vice President of Sales? report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Vice President of Sales refers to Title = 'Vice President, Sales';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the highest total price paid for an order? the highest total price paid for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which 3 products are produced in greater quantity? 3 products produced in greater quantity refer to MAX(SUM(UnitsInStock, UnitsOnOrder)) Limit 3;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of the 10 products with the highest unit price, identify by their ID the ones that have generated the least satisfaction. High reorder level generally means high user satisfaction of the product and vice versa; the least satisfaction refers to MIN(ReorderLevel); the highest unit price refers to MAX(UnitPrice);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many non-discontinued products are there in the dairy category? non-discontinued products in the dairy category refer to ProductID where Discontinued = 0 and CategoryName = 'Dairy Products';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What territories is the Inside Sales Coordinator in charge of? territories refer to TerritoryDescription; Title = 'Inside Sales Coordinator';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the name of the companies that have freighted products for a value greater than 2,000,000. freighted products for a value greater than 2,000,000 refer to Freight > 2000000; name of companies refers to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Through which companies have products been shipped the most times to the city of Aachen? shipped the most times refer to MAX(COUNT(ShipVia)); city of Aachen refers to ShipCity = 'Aache'; companies refers to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the full name of all employees who work in the Northern region. full names = FirstName, LastName; Northern region refers to RegionDescription = 'Northern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the contact person of the Pavlova supplier company? contact person refers to ContactName; Pavlova is the name of the product;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the name of the products that have been shipped to the city of Paris. shipped to the city of Paris refers to ShipCity = 'Paris';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What product is the least shipped to the postal code 28023? the least shipped product refers ProductName where MIN(Quantity);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the employee in charge of the Southern region who is to report to Andrew Fuller? full names = FirstName, LastName; report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Andrew Fuller refers to Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller'; Southern region refers to RegionDescription = 'Southern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: On what date did the Du monde entier company request that 9 units of Filo Mix be sent to it? 9 units of Filo Mix refer to ProductName where Quantity = 9; Du monde entier is the name of the customer; date refers to OrderDate;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the name of the categories to which the products of order number 10933 belong. order number 10933 refers to OrderID = 10933;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the phone number for the employee in charge of the Portsmouth territory? phone refers to HomePhone; Portsmouth territory refers to TerritoryDescription = 'Portsmouth';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average quantity of product that have been shipped by Federal Shipping in November 1996? Federal Shipping refers to CompanyName = 'Federal Shipping'; DIVIDE(SUM(Quantity), COUNT(ProductID)) where CompanyName = 'Federal Shipping' and ShippedDate > = '1996-11-01 00:00:00' AND ShippedDate < '1996-12-01 00:00:00';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Of all the shipments made by United Package throughout the year 1996, what percentage correspond to the month of September? DIVIDE(COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-09-01 00:00:00' AND ShippedDate < '1996-09-30 00:00:00')), (COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-01-01 00:00:00' AND ShippedDate < '1997-01-01 00:00:00')) as percentage;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many owners are located in Mexico? owners in Mexico refer to ContactTitle where Country = 'Mexico';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full address of Andr Fonseca? full address includes Address, City, Region, PostalCode and Country; ContactName = 'Andr Fonseca';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the companies that have the same phone area code as 171? phone area code as 171 refers to Phone LIKE '(171)%'; companies refer to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the difference in the number of employees from the UK and the USA who work as sales representatives? SUBTRACT(COUNT(EmployeeID where Country = 'UK' and Title = 'sales representative'), COUNT(EmployeeID where Country = 'USA' and Title = 'sales representative'));"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales associates are located in Sao Paulo, Brazil? sales associates refer to ContactTitle; Sao Paulo is the name of the city in the country Brazil;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the family name of the employee who shipped the order 10521 to CACTU? order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the shipping cost for order number 10692 from the company Alfreds Futterkiste? Alfreds Futterkiste is the name of the company; order number 10692 refers to OrderID = 10692;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the shipping company for order number 10558? order number 10558 refers to OrderID = 10558;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list any three order numbers that have been shipped using Speedy Express. Speedy Express is the name of the shipping company; three order numbers refer to OrderID LIMIT 3;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the products that belong to the beverage category? products belong to beverage category refer to ProductName where CategoryName = 'beverage';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the description of the category that tofu belongs to? tofu is the name of the product;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which company supplies Gula Malacca? Gula Malacca is the name of the product; company refers to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the products that are supplied by Aux joyeux ecclsiastiques? Aux joyeux ecclsiastiques is the name of supply company; products refer to ProductName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much per unit of Konbu does Mayumi's charge? Mayumi's is the name of the company; how much per unit of Konbu refers to UnitPrice where ProductName = 'Konbu';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the person to contact to get Camembert Pierrot? Camembert Pierrot is the name of the product; person to contact refers to ContactName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please name any three products that have been discontinued in the meat or poultry category. three products that have been discontinued refer to ProductName LIMIT 3 where Discontinued = 1; CategoryName = 'Meat/Poultry';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please name any two products that have the highest satisfaction levels among users of Heli Swaren GmbH & Co. KG. High reorder level generally means high user satisfaction; the highest satisfaction levels refer to MAX(ReorderLevel); two products refer to ProductName LIMIT 2; CompanyName = 'Heli Swaren GmbH & Co. KG';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the one representing the company ""Heli Swaren GmbH & Co. KG""? Heli Swaren GmbH & Co. KG is the name of the company; who is representing refers to ContactName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: From which country is the company ""Drachenblut Delikatessen"" from? Drachenblut Delikatessen is the company name;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territories are there?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the largest total price for an order? the largest total price for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product is the most expensive? most expensive product refers to ProductName where MAX(UnitPrice);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many of the orders are shipped to France? shipped to France refers to ShipCountry = 'France';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region does Hoffman Estates belong to? Hoffman Estates refer to TerritoryDescription;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the homepage link for the company that supplies the product ""Thringer Rostbratwurst""? ProductName = 'Thringer Rostbratwurst';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the first names of the employees who take the orders that ship to the city of ""Reims"". ship to the city of ""Reims"" refers to ShipCity = Reims';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the largest quantity of ""Manjimup Dried Apples"" for an order? the largest quantity of ""Manjimup Dried Apples"" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped by ""Speedy Express""? ""Speedy Express"" is the name of the shipping company; orders refer to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Make a list of all the territories in the Southern region. territories in the Southern region refer to TerritoryDescription WHERE RegionDescription = 'Southern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the prices on cheese products? prices on cheese refer to UnitPrice WHERE Description = 'Cheeses';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders did ""Laughing Bacchus Wine Cellars"" make? ""Laughing Bacchus Wine Cellars"" is the name of the company; orders refer to OrderID;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the products that were shipped to Starenweg 5. products shipped to Starenweg 5 refer to ProductName where ShipAddress = 'Starenweg 5';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the products by the company ""Bigfoot Breweries""? Bigfoot Breweries is the name of the company; products refer to ProductName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the names of Robert King's territories? Robert King is a full name of an employee where LastName = 'King' AND FirstName = 'Robert'; names of territories refer to TerritoryDescription;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the name of the contact person who made the orders that shipped to Switzerland. shipped to Switzerland refers to ShipCountry = 'Switzerland'; contact person refers to Customers;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What proportion of orders are taken by the Sales Representative? DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the USA employess, how many of them has PhD title of courtesy? ""USA"" is the Country; PhD title of courtesy refers to TitleOfCourtesy = 'Dr.'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average salary for employees from ID 1 to 9? ID 1 to 9 refers to EmployeeID BETWEEN 1 AND 9; Average salary = AVG(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total salary for employees from UK. ""UK"" is the Country; total salary refers to Sum(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Is (206) 555-1189 the home phone number for Laura Callahan? ""Laura Callahan"" refers to FirstName = 'Laura AND LastName = 'Callahan"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the notes of employee with the highest salary. highest salary refers to Max(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the customer ids who placed order with Michael Suyama."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Where are the ship countries of orders placed by Janet Leverling?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders have Margaret Peacock placed?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average salary per order for Andrew Fuller. average salary = AVG(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the product names of Exotic Liquids? ""Exotic Liquids"" is the CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the quantity per unit for products of Tokyo Traders. ""Tokyo Traders"" is the CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products have been discountinued by New Orleans Cajun Delights? ""New Orleans Cajun Delights"" is the CompanyName; discontinued refers to Discontinued = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please calculate the average unit price for products of Formaggi Fortini s.r.l. ""Formaggi Fortini s.r.l."" is the CompanyName; average unit price = AVG(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total products that are supplied by Japan suppliers. Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the contact name for product Teatime Chocolate Biscuits? ""Teatime Chocolate Biscuits"" is the ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the company names that have the highest reorder level. Highest reorder level refers to Max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces. ""10 boxes x 12 pieces"" is the QuantityPerUnit"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total units on order from Exotic Liquids? ""Exotic Liquids"" is the CompanyName; total unit on order = Sum(UnitsOnOrder)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the percentage of products supplied by Gai pturage over all products. ""Gai pturage"" is the CompanyName; Percentage = Divide (Count(SupplierID where CompanyName = 'Gai pturage'), Count (SupplierID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the product ID of the top five products, by descending order, the number of quantities in stock. by descending in number of quantity in stock refers to max(UnitsInStock)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products, how many of them were discontinued in production? discontinued refers to Discontinued = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give me the address, home phone and salary of the Sales Manager. ""Sales Manage"" is the Title"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the Vice President of Sales. Give me the URL of his/her photo. ""Vice Present of Sales"" refers to Title = 'Vice President, Sales'; full name refers to FirstName, LastName; url of photo refers to PhotoPath"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the top ten companies with the most total sales by amount. most total sales refers to Max(SaleAmount); companies refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average sales for each categories? average sales = AVG(ProductSales)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Compute the total order quantity for Uncle Bob's Organic Dried Pears so far. ""Uncle Bob's Organic Dried Pears"" is the ProductName; total order quantity refers to Sum(Quantity)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the seafoods, how many of them have an order quantity of more than 50? ""Seafood"" is the CategoryName; order quantity of more than 50 refers to Quantity > 50"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level. ""Pavlova, Ltd"" is the CompanyName; products refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who are the suppliers of the discontinued products? discontinued product refers to Discontinued = 1; supplier refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the employees, give me the full names of those who have less than 4 territories. less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees have territories in the Eastern region? ""Eastern"" is the RegionDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: From 1/3/97 to 8/10/97, how many orders were shipped via Federal Shipping? from 1/3/97 to 8/10/97 refers to 1997-03-01 < ShippedDate < 1997-10-08; 'Federal Shipping' is the CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Tally the customer ID of orders that were shipped to Brazil by Margaret Peacock from 3/31/97 to 12/10/97. ""Brazil"" is the ShipCountry; from 3/31/97 to 12/10/97 refers to 1997-03-31 < ShippedDate < 1997-10-12"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the re-order level of products that have an order quantity of 1? order quantity of 1 refers to Quantity = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the stock value of every condiments? ""Condiments"" is the CategoryName; Stock value = MULTIPLY( UnitPrice, UnitInStock)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territories are owned by Anne Dodsworth?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which of the American customers have experienced a delay in the shipment and how long was the longest? ""American"" refers to Country = 'USA'; longest delay in shipment refers to Max(Subtract(RequiredDate, ShippedDate)); customer refers to CustomerID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the contact name and phone number of the customer who has made the most total payment on the order to date? most total payment = Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount)))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the sales representative of the customer who has made the highest payment? Include the full name of employee and his/her supervisor. highest payment refers to Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount))); full name refers to FirstName, LastName; his/her supervisor refers to 'ReportsTo'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers are there in Berlin, Germany? ""Berlin"" is the City; 'Germany' is the Country"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products does the company Exotic Liquids supply? ""Exotic Liquids"" is the CompanyName of supplier"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which company has the lowest unit price? Please give the company name and the product name. lowest unit price refers to Min(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average unit price of Tokyo Traders' products? ""Tokyo Traders"" is the CompanyName; average unit price = AVG(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territories are there in the Eastern region? ""Eastern"" is the RegionDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region has the most territories? region refers to RegionDescription; most territories refers to Max(Count(TerritoryID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which region does territory id 2116 belong to? region refers to RegionDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What percentage of orders were placed by customers in Madrid city in 1996? ""Madrid"" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please list the full names and titles of all employees. full name refers to LastName, FirstName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who has the highest salary? Please give their first name. highest salary refers to Max(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales representatives whose salaries are higher than 2000? ""Sales Representative"" is the Title; higher than 2000 refers to Salary > 2000"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In 1996, how many orders were from customers in the UK? in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which company had the most orders in 1998? in 1998 refers to YEAR (OrderDate) = 1998; most orders = Max(Count(CustomerID)); company refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please calculate the number of orders from customers by country in 1996. in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were from Hanna Moos company in 1999? ""Hanna Moos"" is the CompanyName; in 1999 refer to YEAR (OrderDate) = 1999"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many days was the fastest shipping of Berglunds snabbkp's order? Berglunds snabbkp is the CompanyName; fastest shipping = Min(Subtract(ShippedDate, OrderDate))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which company placed the order with the id 10257? ""10257"" is the OrderID; company refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In which year did Around the Horn place the most orders? Around the Horn is the CompanyName; year with the most order refers to Year (OrderDate) where Max(Count(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees report to Andrew Fuller? ""Andrew Fuller"" refers to FirstName = 'Andrew' AND LastName = 'Fuller'; report to refers to ReportsTo ! = NULL"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which country are the majority of the suppliers located? majority of the suppliers located refers to MAX(COUNT(SupplierID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the employees who report to the Sales Manager? full name refers to LastName, FirstName; the Sales Manager refers to Title = 'Sales Manager'; report to refers to ReportsTo is not NULL;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: In August of 1996, how many orders were placed by the customer with the highest amount of orders? August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How much is the salary of the first employee that was hired? first employee that was hired refers to MIN(HireDate)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How old was the oldest employee at the time he or she was hired? oldest employee at the time he or she was hired refers to MAX(SUBTRACT(HireDate, Birthdate))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total sales amount of all discontinued products? discontinued products refers to Discontinued = 1; total sales amount refers to SUM(MULTIPLY(UnitPrice, Quantity))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the category of the product that has the highest number of discontinued products? discontinued products refers to Discontinued = 1; highest number of discontinued products refers to MAX(Discontinued = 1)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many condiments were sold in 1997? ""Condiments"" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the customer who purchased the highest number of products in a single order? highest number of products refers to MAX(COUNT(ProductID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the monthly average number of products shipped via Federal Shipping for the year 1996? monthly average number of products refers to DIVIDE(SUM(OrderID), 12); shipped via Federal Shipping refers to CompanyName = 'Federal Shipping'; for the year 1996 refers to year(ShippedDate) = 1996"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which products are being supplied by ""G'day, Mate""? List all of their names. supplied by ""G'day, Mate"" refers to CompanyName = 'G''day, Mate';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territories are there in the region with the highest number of territories? highest number of territories refers to max(TerritoryID)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the company name of the supplier who supplies the product with the highest unit price? the highest unit price refers to MAX(UnitPrice);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many female employees are in charge of 3 or more territories? female employees refers to TitleOfCourtesy = 'Mrs.' or TitleOfCourtesy = 'Ms.'; in charge of 3 or more territories refers to TerritoryID > = 3;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who are the top 8 suppliers supplying the products with the highest user satisfaction? highest user satisfaction refers to max(ReorderLevel);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the company name of the customer who made the biggest amount of purchase in a single order before discount? biggest amount of purchase in a single order refers to MAX(MULTIPLY(UnitPrice, Quantity)); before discount refers to Discount = 0"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What was the total amount of sales handled by Nancy Davolio in December 1996, excluding discounts? in December 1996 refers to year(OrderDate) = 1996 AND month(OrderDate) = 12; excluding discounts refers to Discount = 0; total amount of sales refers to MULTIPLY((UnitPrice, Quantity))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the total amount of sales made in the year 1997? year 1997 refers to year(OrderDate) = 1997; total amount of sales refers to (UnitPrice * Quantity)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average annual amount of shipped sales from 1997 to 1998? from 1997 to 1998 refers to ShippedDate > '1996-1-1' and ShippedDate < '1998-12-31'; average annual amount refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped to Venezuela in 1996? shipped to Venezuela refers to ShipCountry = 'Venezuela'; in 1996 refers to year(ShippedDate) = '1996';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the ID and description of the condiments category? condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the order IDs, product IDs and unit price of orders which total payment is greater than 15000. total payment is greater than 15000 refers to MULTIPLY((Quantity * UnitPrice * (1 - Discount))) > 15000"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the territory IDs under employee ID of 7."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the supplier company name in Sydney and its homepage address if available. in Sydney refers to City = 'Sydney';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write down the full name of Vie President of Sales and his age when he was hired. Vice President of Sales refers to Title = 'Vice President, Sales';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the supplier company names located in Germany. located in Germany refers to Country = 'Germany';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the employees' full names and ages in 2022 who lived in London. in London refers to City = 'London'; ages in 2022 refers to SUBTRACT(2022, year(BirthDate)); full names refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the customer company names, addresses, phones and faxes which are located in London. in London refers to City = 'London'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the full name of employees and titles who have to report to Sales Manager. Sales Manager refers to Title = 'Sales Manager'; full name refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the customer company names and cities located in Canada. located in Canada refers to Country = 'Canada'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the total production amount and product names which had ""10 - 500 g pkgs."" as quantity per unit. total production amount refers to ADD(UnitsInstock, UnitsOnOrder)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the product names and categories of the highest reorder level. Highest reorder level refers to Max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the supplier companies, cities and products which total production amount is more than 120. total production amount is more than 120 refers to ADD(UnitsInstock, UnitsOnOrder) > 120"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the contact person name, title and supplied products by ""Escargots Nouveaux"" company. ""Escargots Nouveaux"" company refers to CompanyName = 'Escargots Nouveaux';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the territory IDs, description and region description under the in-charge of Mrs. Margaret Peacock."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What were the products supplied by the company in Spain? company in Spain refers to Country = 'Spain'; product supplied refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What products were ordered by the customer ID ""WILMK"" which were required on 3/26/1998? required on 3/26/1998 refers to RequiredDate = '1998-03-26 00:00:00'; products ordered refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the list of product IDs and names under the meat/poultry category. meat/poultry category refers to CategoryName = 'Meat/Poultry';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were made by the customers in Ireland. in Ireland refers to Country = 'Ireland';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the products list which were ordered in 1996 by the company in Norway. ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among orders shipping to Brazil, mention the supplier company of the order which was done by employee Anne Dodsworth in December, 1996 . shipping to Brazil refers to ShipCountry = 'Brazil'; in December, 1996  refers to year(OrderDate) = 1996 and month(OrderDate) = 12;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him. full name refers to FirstName, LastName; shipped to USA refers to ShipCountry = 'USA'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the territory IDs and descriptions existed in Southern region. in Southern region refers to RegionDescription = 'Southern';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the average payment per product under confections category. under confections category refers to CategoryName = 'Confections';"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the total payment of the orders by customers from San Francisco. from San Francisco refers to City = 'San Francisco'; total payment refers to sum(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total production for each product which were supplied from Japan from Japan refers to Country = 'Japan'; total production refers to ADD(UnitsInstock, UnitsOnOrder)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the supplied products from Australia, describe the discontinued products and the category. from Australia refers to Country = 'Australia'; discontinued products refers to Discontinued = 1;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Mention the supplier country of Ipoh Coffee and the order ID which had maximum in total payment. Ipoh Coffee refers to ProductName = 'Ipoh Coffee'; maximum in total payment refers to MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the list of products ordered by ID 10979 and calculate its total payment. ordered by ID 10979 refers to OrderID = '10979'; total payment refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the products under grains/cereals category, provide the contact person and title of the supplier with one digit ID. grains/cereals category refers to CategoryName = 'Grains/Cereals'; supplier with one digit ID refers to SupplierID between 1 and 10;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide Speedy Express's phone number and number of shipped orders on 30th January, 1998. Speedy Express's refers to CompanyName = 'Speedy Express'; orders on 30th January, 1998 refers to ShippedDate = '1998-01-30 00:00:00'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe the ordered products which were the most overdue from required date. the most overdue from required date refers to MIN(SUBTRACT(ShippedDate, RequiredDate) < 0)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Under the in-charge of inside sales coordinator, provide the product lists which were shipped to Mexico in 1996. shipped to Mexico refers to ShipCountry = 'Mexico'; in 1996 refers to year(ShippedDate) = 1996; charge of inside sales coordinator refers to Title = 'Inside Sales Coordinator'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the name of the most popular dairy product in terms of reorder quantity. 'dairy product' refers to CategoryName; most popular reorder quantity refers to MAX(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the production volume of the dairy product 'Mascarpone Fabioli'. 'Mascarpone Fabioli' is a ProductName; calculation = SUM(UnitsInStock, UnitsOnOrder)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the name and product category for the most expensive and the least expensive products. name of product refers to ProductName; category of product refers to CategoryName; the most expensive products refers to MAX(UnitPrice); the least expensive products refers to MIN(UnitPrice);"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the customer, which placed the largest order in terms of value. value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the number of employees in Northern sales region. Northern sales region refers to RegionDescription = 'Northern'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the average value of the sales order? calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Find the percentage of discontinued products in Northwind's portfolio of products. discontinued products refers to Discontinued = 1; calculation = DIVIDE(SUM(Discontinued = 1), COUNT(ProductID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the full name of the employee who processed the sales order with ID 10274. full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'. 'GROSELLA-Restaurante' refers to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name products and their quantity ordered by the company 'GROSELLA-Restaurante' in the sales order that was processed by Nancy Davolio. name products refers to ProductName; 'GROSELLA-Restaurante' refers to CompanyName; 'Nancy Davolio' is the full name of an employee; full name refers to FirstName, LastName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the total number of orders placed by the customer 'Laughing Bacchus Wine Cellars' and it's average value. 'Laughing Bacchus Wine Cellars' refers to CompanyName; calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many boxes of 'Pavlova' did Northwind sell? 'Pavlova' is a ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the salary range for sales representative in Northwind? salary range is BETWEEN max(Salary) AND min(Salary); sales representative is a title"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many suppliers does Northwind have in USA? 'USA' is a country; supplier refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What products are no longer sold by Northwind? no longer sold refers to Discontinued = 1; products refers to ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who is the Sales Agent for the company 'Eastern Connection'? 'Eastern Connection' is a CompanyName; 'Sales Agent' is a ContactTitle"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many companies do ship Northwind's orders? companies refers to ShipperID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Identify the total number of orders processed by Northwind employee named Andrew Fuller. What percent of those orders was shipped to Austria? 'Andrew Fuller' is the full name of an employee; full name refers to FistName, LastName; Austria refers to ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Austria'), COUNT(OrderID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate category name of soft drinks, coffees, teas, beers, and ales in description list. Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the phone number of company named Around the Horn. phone number refers to Phone; 'Around the Horn' is a CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city. 'Blondesddsl pre et fils' is a CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many companies are there in the city of London? companies refers to CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the address of the company Eastern Connection whose contact name is Ann Devon. 'Eastern Connection' is a CompanyName; 'Ann Devon' is the full name of an employee; full name refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate which company is located in France? company refers to CompanyName; France is a country"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many product names does the supplier Exotic Liquids have? 'Exotic Liquids' is a CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of the company that has the product with the highest unit price? name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which company name in London city has the most stocked products? the most stocked products refers to MAX(UnitsInStock)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which product of Exotic Liquids company that have the highest reorder levels? 'Exotic Liquids' is a CompanyName; the highest reorder levels refers to MAX(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide the category name of the Chef Anton's Gumbo Mix product that New Orleans Cajun Delights company has. 'Chef Anton's Gumbo Mix' is a ProductName; 'New Orleans Cajun Delights' is a CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the name of the country where Leka Trading supplies Ipoh Coffee product. 'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Indicate the category name of the product name with the highest units on order."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the difference in number of unit price from Chef Anton's Cajun Seasoning product and Chef Anton's Gumbo Mix product of New Orleans Cajun Delights company. Chef Anton's Cajun Seasoning' AND 'Chef Anton''s Gumbo Mix' are ProductName; 'New Orleans Cajun Delights' is a CompanyName; calculation = SUBTRACT(UnitPrice where ProductName = 'Chef Anton's Cajun Seasoning', UnitPrice where ProductName = 'Chef Anton''s Gumbo Mix')"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which of Cooperativa de Quesos 'Las Cabras' products have a unit price greater than 20? Cooperativa de Quesos 'Las Cabras'' is a CompanyName; unit price greater than 20 refers to UnitPrice > 20"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please indicate the product name of Tokyo Traders company with order quantity greater than 40. 'Tokyo Traders' is a CompanyName; order quantity greater than 40 refers to Quantity > 40"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all category name of Exotic Liquids 's product with units in stock over 100. 'Exotic Liquids' is a CompanyName; units in stock over 100 refers to UnitsInStock > 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity. order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity. 'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the position of Robert King? 'Robert King' is the full name of an employee; full name refers to FirstName, LastName; position refers to Title"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write the shipping company name with the telephone number of (503) 555-9931. telephone number of (503) 555-9931 refers to Phone = '(503) 555-9931'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Write the address and phone number of Margaret Peacock. Margaret Peacock is the full name of an employee; full name refers to FirstName, LastName; phone number refers to HomePhone"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full address of Rattlesnake Canyon Grocery? full address refers to ShipAddress, ShipCity, ShipRegion,ShipPostalCode, ShipCountry; 'Rattlesnake Canyon Grocery' is a ShipName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all product names under Confections. 'Confections' is a CompanyName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Sir Rodney's Marmalade is supplied by which company and who is the contact for this company? 'Sir Rodney's Marmalade' is a ProductName; company refers to CompanyName; contact for a company refers to ContactName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the full name of the employee who is in charge of the territory of Denver? full name refers to FirstName, LastName; Denver is a TerritoryDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List all the territories where Laura Callahan is in charge. territories refers to TerritoryDescription; Laura Callahan is the full name of an employee; full name refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped via Federal Shipping? 'Federal Shipping' is a CompanyName; orders refers to OrderID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the products where the suppliers come from Finland. 'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well. Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the suppliers that supply products under the category 'cheeses.' suppliers refers to CompanyName; 'cheeses' is a Description"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name all products supplied by Zaanse Snoepfabriek. products refers to ProductName; 'Zaanse Snoepfabriek' is a CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which products by Plutzer Lebensmittelgromrkte AG were discontinued and what are their price? products refers to ProductName; 'Plutzer Lebensmittelgromrkte AG' is a CompanyName; price refers to UnitPrice; 
discontinued products refers to discontinued = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List the cities where the product 'Mishi Kobe Niku' were shipped to. cities refers to ShipCity; 'Mishi Kobe Niku' is a ProductName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What percentage does the shipment of products by Speedy Express to Sweden make up to the shipping company's total? Speedy Express is a company; Sweden is a ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Sweden'), SEM(ShipCountry)) * 100"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many territory fall into region 1? region 1 refers to RegionID = 1"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the the total number of territory in each region?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many suppliers are from UK? from UK refers to Country = 'UK'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Please give the contact name for Tokyo Traders. Tokyo Traders refers to CompanyName = 'Tokyo Traders'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees from USA with Sales Representative title? from USA refers to Country = 'USA'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the highest salary earn by the the employee and what is his/her position in the company? highest salary refers to max(salary); position refers to Title"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many products supplied by Plutzer Lebensmittelgromrkte AG that is currently out of stock and on order? Plutzer Lebensmittelgromrkte AG refers to CompanyName; is currently out of stock and on order refers to UnitsInStock = 0 and UnitsOnOrder > 0"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What product have the highest unit price and how many quantity have been being sold? product refers to ProductID; highest unit price refers to Max(UnitPrice)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which employee has created the least order and please indicates the employee's title? least order refers to Min(OrderID)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the most common product ordered by a customer from Germany? most common product refers to max(count(ProductID)); customer from Germany refers to Country = 'Germany'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the total products value shipped to Brazil by Speedy Express Company? shipped to Brazil refers to ShipCountry = 'Brazil'; by Speedy Express Company refers to CompanyName = 'Speedy Express'; total products value refers to sum(MULTIPLY(UnitPrice, Quantity))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many subordinates does employee ID 2 have and what is the biggest order in terms of value that his/her subordinates have created? subordinates of employee ID 2 refers to EmployeeID where ReportsTo = 2;  biggest order in terms of value refers to max(MULTIPLY(Quantity, UnitPrice))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many sales values have been created by sales representative and which sales representative have the highest sales? sales representative refers to Title = 'Sales Representative'; sales values refers to MULTIPLY(Quantity, UnitPrice); the highest sales refers to max(MULTIPLY(Quantity, UnitPrice))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many employees is a UK citizen and are they all covering the same region? is a UK citizen refers to Country = 'UK'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which customer have the biggest purchase in one order and where does this order being ship to? biggest purchase refers to max(ProductID.Order_Details); ship to refers to ShipCountry"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Which customer is a regular customer in this shop and what are the products category that he mostly buy? regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What are the most popular confections product and calculate the total sales generated by this product? most popular confections product refers to ProductID = max(count(MULTIPLY(Quantity, UnitPrice))) from CategoryName = 'Confections' ;  total sales refers to sum(MULTIPLY(Quantity, UnitPrice))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the name of product with the ID of 77? name of product refers to ProductName; ID refers to ProductID"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the company name of all suppliers in USA. in USA refers to Country = 'USA'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the position title for Laura Callahan?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the name of employee that manages the order from Victuailles en stock? name of employee refers to FirstName; from Victuailles en stock refers to CompanyName = 'Victuailles en stock'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were shipped by Federal Shipping? Federal Shipping refers to CompanyName = 'Federal Shipping'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Who was taking charge of orders from Morristown? Morristown refers to TerritoryDescription = 'Morristown'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the name of all territories in Northern region. name of all territories refers to TerritoryDescription; Northern region refers to RegionDescription = 'Northern'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders were handled by Michael Suyama. State the order ID."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the ratio number of territories in Northern region and number territories in Western region? Northern region refers to RegionID = 3; Western region refers to RegionID = 2 ; ratio = divide((TerritoryDescription where RegionID = 3), (TerritoryDescription where RegionID = 2))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Provide employees' ID who are in-charge of territory ID from 1000 to 2000. territory ID from 1000 to 2000 refers to TerritoryID BETWEEN 1000 and 2000"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the territory IDs, descriptions and region description which are under the in-charge of Nancy Davolio, descriptions refers to TerritoryDescription; region refers to RegionDescription"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Describe Sales Representative names who were hired in 1992 and compare the number of orders among them. Sales Representative refers to Title = 'Sales Representative'；were hired in 1992 refers to HireDate = '1992'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the total payment of orders for Vegie-spread product. Vegie-spread product refers to ProductName = 'Vegie-spread'；total payment = MULTIPLY(UnitPrice, Quantity, (1-Discount))"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List down the company names which supplied products for the order on 14th August, 1996. products refers to Order_Details.ProductID; on 14th August, 1996 refers to OrderDate = '8/14/1996'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the product lists in order ID 10337, write down the product names and suppliers which had the highest in reorder level. suppliers refers to CompanyName; highest in reorder level refers to Max(ReorderLevel)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Name the shipper which had the most shipments in first quarter of 1998. Name the shipper refers to CompanyName; most shipments refers to max(count(OrderID)); first quarter of 1998 refers to ShippedDate = 1998/1 and ShippedDate = 1998/2 and ShippedDate = 1998/3 and ShippedDate = 1998/4"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many customers are located in London? London refers to City = 'London'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the title of Michael Suyama?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the full name of employee who has birth day on ""3/4/1955 12:00:00 AM"". full name refers to FirstName, LastName; brith day refers to BirthDate"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Mention the first name of employee who took care the order id 10250."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders that the employees who are located in Tacoma handled? located in Tacoma refers to City = 'Tacoma'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the country location of the employee who handled order id 10257?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the title of the employee who handled order id 10270?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the phone number of the customer who placed the order id 10264."
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: What is the region where the customer who placed the order id 10276 located?"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Among the employees who handled orders to Brazil, who has the highest salary and calculate the average salary of them. orders to Brazil refers to ShipCountry = 'Brazil'; highest salary refers to max(salary); average salary = AVG(Salary)"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Calculate the percentage salary of employees who handled orders shipped in 1996. shipped in 1996 refers to ShippedDate = 1996; percentage salary = divide(sum(Salary when ShippedDate = 1996), sum(Salary)) as percentage"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: When was the employee who handled order id 10281 hired? When was hired refers to HireDate"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders was handled by employees who reported to employee id 5? reported to employee id 5 refers to ReportsTo = 5"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: Give the full name of employee who handled the order id 10280. full name refers to FirstName, LastName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: State the shipping company of order id 10260. shipping company refers to CompanyName"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: How many orders have been shipped through United Package? shipped through refers to ShipVia; United Package refers to CompanyName = 'United Package'"
retail_world,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE Categories (
CategoryID integer,
CategoryName text,
Description text,
PRIMARY KEY (CategoryID),
);
CREATE TABLE Customers (
CustomerID integer,
CustomerName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
PRIMARY KEY (CustomerID),
);
CREATE TABLE Employees (
EmployeeID integer,
LastName text,
FirstName text,
BirthDate date,
Photo text,
Notes text,
PRIMARY KEY (EmployeeID),
);
CREATE TABLE Shippers (
ShipperID integer,
ShipperName text,
Phone text,
PRIMARY KEY (ShipperID),
);
CREATE TABLE Suppliers (
SupplierID integer,
SupplierName text,
ContactName text,
Address text,
City text,
PostalCode text,
Country text,
Phone text,
PRIMARY KEY (SupplierID),
);
CREATE TABLE Products (
ProductID integer,
ProductName text,
SupplierID integer,
CategoryID integer,
Unit text,
Price real,
PRIMARY KEY (ProductID),
FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
);
CREATE TABLE Orders (
OrderID integer,
CustomerID integer,
EmployeeID integer,
OrderDate datetime,
ShipperID integer,
PRIMARY KEY (OrderID),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
FOREIGN KEY (ShipperID) REFERENCES Shippers(ShipperID),
);
CREATE TABLE OrderDetails (
OrderDetailID integer,
OrderID integer,
ProductID integer,
Quantity integer,
PRIMARY KEY (OrderDetailID),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
);
---------------------
QUESTION: List out the phone number of the shipping company of order id 10296. shipping company refers to Shippers; phone number refers to Phone"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many kinds of items are returned in order no.5? returned refer to l_returnflag = 'R'; order no.5 refers to l_orderkey = 5; kinds of items refer to l_linenumber;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: When was the latest date the items of order no.1 were shipped? order no.1 refers to l_orderkey = 1; the latest date shipped refers to MAX(l_shipdate);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which order has a higher priority, order no. 4 or order no. 36? earlier orderdate have higher priority in delivery; which order no. 4 or order no. 36 refers to o_orderkey in (4, 36) where MIN(o_orderdate);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the comment of the order with the highest total price? the highest total price refers to MAX(o_totalprice); comment of the order refers to o_comment;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the phone number of Customer#000000001? customer phone refers to c_phone; Customer#000000001 refers to c_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders in total have the customers in the household segment made? orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the orders made by a customer in the household segment, what is the highest total price? orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the highest total price refers to MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the order comments of all the orders made by customers in the household segment. orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please give the name of the customer who has made the single order with the highest total price. name of the customer refers to c_name; single order with the highest total price refers to MAX(o_totalprice) LIMIT 1;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the order keys of all the orders made by a customer whose account is in debt. account is in debt if c_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the orders made by customers in the household segment, how many of them are urgent? orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the order is urgent if o_orderpriority = '1-URGENT' ;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers are in Brazil? Brazil is the name of the nation which refers to n_name = 'BRAZIL'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the phone numbers of all the customers in the household segment and are in Brazil. phone numbers refer to c_phone; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; household segment refers to c_mktsegment = 'HOUSEHOLD';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the customers in Germany, how many of them have an account balance of over 1000? Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders in total are made by customers in Germany? orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total price of all the orders made by customers in Germany? orders refer to o_orderkey; total price refers to o_totalprice; Germany is the name of the nation which refers to n_name = 'GERMANY';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the orders made by customers in Germany, which one of them has the highest priority in delivery? Please give its order key. orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY'; earlier orderdate have higher priority in delivery therefore MIN(o_orderdate);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the average price of the orders made by a customer in Germany? DIVIDE(SUM(o_totalprice), COUNT(o_orderkey)) where n_name = 'GERMANY';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the customers, what is the percentage of the customer's nation being Germany? DIVIDE(COUNT(c_custkey when n_name = 'GERMANY'), COUNT(c_custkey)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many countries are there in the No.2 region? No.2 region refers to n_regionkey = 2;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which country does supplier No.34 come from? supplier No.34 refers to s_suppkey = 34; country refers to n_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which region does ""Supplier#000000129"" belong to? ""Supplier#000000129"" is the name of the supplier which refers to s_name; Which region refers to r_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the nationality of ""Customer#000000055""? ""Customer#000000055"" is the name of the customer which refers to c_name; nationality is the state of belonging to a particular country, therefore nationality refers to n_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give customer No.106936's region name. ""Customer#000000055"" is the name of the customer which refers to c_name; region name refers to r_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give the number of Moroccan customers whose account is in debt. account is in debt if c_acctbal < 0; Moroccan customers refer to c_name WHERE n_name = 'MOROCCO';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397? MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) where o_totalprice = 231499.38 AND l_suppkey = 9397;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: For the order with the total price of 218195.43, which supplier handled the returned item? Give the supplier id. returned item refers to l_returnflag = 'R'; supplier id refers to l_suppkey; order with the total price of 218195.43 refers to o_totalprice = 218195.43;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Clerk#000000936 dealt with a ""Not Specified"" order on 1995/3/13, what was the charge for the part of the order shipped by truck? MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) WHERE o_clerk = 'Clerk#000000936', o_orderstatus = '4-NOT SPECIFIED', o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order? SUBTRACT(l_receiptdate, l_commitdate) WHERE o_orderdate = '1996-07-27' AND o_custkey = '129301';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give the name of the customer who made an order with Clerk#000000803 on 1997/12/10. name of the customer refers to c_name; o_clerk = 'Clerk#000000803'; order on 1997/12/10 refers to o_orderdate = '1997-12-10';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculates the profit processed by Supplier No. 7414 on order No. 817154. SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) WHERE l_suppkey = 7414 AND l_orderkey = 817154;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which country has the most number of suppliers whose account is in debt? country refers to n_name; the most number of suppliers whose account is in debt refers to MAX(SUM(s_acctbal < 0));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the percentage of the European countries among the given countries? DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give the percentage of Japanese suppliers whose account is in debt. account is in debt if s_acctbal < 0; DIVIDE(COUNT(s_acctbal < 0 where n_name = 'JAPAN'), COUNT(s_name where n_name = 'JAPAN')) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the customer with the highest amount of debt? customer with the highest amount of debt refers to c_name where MIN(c_acctbal);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders were shipped in 1998? orders refer to l_orderkey; shipped in 1998 refers to year(l_shipdate) = 1998;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers are in debt? customers are in debt refer to c_custkey where c_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many items that were shipped via air were returned in 1994? items refer to l_linenumber; shipped via air in 1994 refers to year(l_shipdate) = 1994 where l_shipmode = 'AIR'; returned refer to l_returnflag = 'R';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers are in the automobile market segment? automobile market segment refers to c_mktsegment = 'AUTOMOBILE';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the top 2 order keys of the item with the highest amount of extended price? the highest amount of extended price refers to MAX(l_extendedprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: When was the order with the highest amount of total price shipped? when shipped refers to l_shipdate; the highest amount of total price refers to MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: In which country do most of the customers come from? country refers to n_name; most of the customers refer to MAX(COUNT(c_custkey));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many urgent orders were shipped the next day? the order is urgent if o_orderpriority = '1-URGENT'; shipped the next day refers to SUBTRACT(l_shipdate, o_orderdate) = 1;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many in debt customers in the household market segment are from Russia? in debt customers refer to c_custkey where c_acctbal < 0; c_mktsegment = 'HOUSEHOLD'; Russian is the name of the nation which refers to n_name = 'RUSSIA';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many suppliers are from Japan? suppliers refer to s_nationkey; Japan is the name of the nation which refers to n_name = 'JAPAN';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders shipped via ship have a medium priority? orders shipped via ship refer to o_orderkey where l_shipmode = 'SHIP'; medium priority refers to o_orderpriority = '3-MEDIUM';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers from the United States, which market segment has the highest number of customers? the highest number of customers refer to MAX(COUNT(c_custkey)); the United States is the name of the nation which refers to n_name = 'UNITED STATES'; market segment refers to c_mktsegment;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the countries in the region of Asia? countries in the region of Asia refer to n_name where r_name = 'ASIA';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the names of the parts manufactured by manufacturer 3 that have a supply cost of 1,000? names of the parts refer to p_name; manufacturer 3 refers to p_mfgr = 'Manufacturer#3'; ps_supplycost = 1000;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many countries are there in the region whose comment description is ""asymptotes sublate after the r."" r_comment = 'asymptotes sublate after the r'; countries refer to n_nationkey;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail? manufacturer 5 refers to p_mfgr = 'Manufacturer#5'; retail price of no more than 1,000 refers to p_retailprice < 1000; shipped via rail refers to shipmode = 'RAIL';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How much is the profit for smoke turquoise purple blue salmon that was delivered in person on 5/7/1996? SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'smoke turquoise purple blue salmon' and l_receiptdate = '1996-05-07' and l_shipinstruct = 'DELIVER IN PERSON';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the average price before discount of the top 10 orders with the highest total price? DIVIDE(SUM(l_extendedprice), 10) where MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Identify the names of the top 3 customers with the highest number of orders of all time and calculate for the average total price per order of each customers. customers with the highest number of orders refer to c_name where MAX(COUNT(o_orderkey)); DIVIDE(SUM(o_totalprice), COUNT(o_orderkey));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many items were shipped on 4th December, 1993? items shipped on 4th December, 1993 refer to l_linenumber where l_shipdate = '1993-12-04';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What was the order date of items with the highest total price? the highest total price refers to MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the percentage of customers' accounts in debt. DIVIDE(COUNT(c_custkey where c_acctbal < 0), COUNT(c_custkey)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many part supplies were nearly out of stock? supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the percentage of manufactured parts by Manufacturer#3. DIVIDE(COUNT(p_partkey where p_mfgr = 'Manufacturer#3'), COUNT(p_partkey)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List any five parts name in Medium Plated Brass. p_type = 'MEDIUM PLATED BRASS'; parts name refer to p_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the orders shipped in November, 1998 by air, how many orders were urgent? orders shipped in November, 1998 refer to o_orderkey where l_shipdate LIKE '1998-11-%'; by air refers to l_shipmode = 'AIR'; the order is urgent if o_orderpriority = '1-URGENT' ;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers are there in India? customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers from Morocco, how many customers were in debt? customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List down the nation keys and names in Africa. Africa refers to r_name = 'Africa';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the total price of orders by Customer#000000013. Customer#000000013 is the name of the customer which refers to c_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many items did Customer#000021159 order? Calculate those items total charges. items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the total profit made by chocolate floral blue coral cyan. SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'chocolate floral blue coral cyan';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the percentage of suppliers in Germany. DIVIDE(COUNT(s_suppkey where n_name = 'GERMANY'), COUNT(s_suppkey)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the suppliers' names which supplied smoke red pale saddle plum. p_name = 'smoke red pale saddle plum'; the suppliers' names refer to s_name;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the suppliers from Middle East region, how many suppliers were in debt? suppliers from Middle East region refer to s_name where r_name = 'MIDDLE EAST'; in debt refers to s_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount. shipped by rail on 1st December, 1995 refers to l_shipmode = 'RAIL' where l_shipdate = '1995-12-01'; part names with 10% discount refer to p_name where l_discount = 0.1;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the parts supplied by Supplier#000000018, provide parts names which had supply costs above 900. Supplier#000000018 is the name of supplier which refers to s_name; supply costs above 900 refer to ps_supplycost > 900;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders were shipped in 1994? orders shipped in 1994 refer to l_orderkey where year(l_shipdate) = 1994;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many of the line items have been shipped by rail with a quantity less than 30? shipped by rail refers to l_shipmode = 'RAIL'; quantity less than 30 refers to l_quantity < 30;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers in the furniture market segment, how many of them have a nation key of 1? furniture market segment refers to c_mktsegment = 'FURNITURE';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give the phone number of the customer with the highest account balance. phone number of the customer refers to c_phone; the highest account balance refers to MAX(c_acctbal);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the order priority of the order with the highest total price? order with the highest total price refers to MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total number of orders made by customers in United States? orders refer to o_orderkey; the United States is the name of the nation which refers to n_name = 'UNITED STATES';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers from Brazil, how many customers are in automobile market segment? customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; c_mktsegment = 'automobile';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Provide the order comments for at least 5 orders made by customers in the furniture segment. order comments refer to o_comment; c_mktsegment = 'Furniture';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List down the countries that are located in Asia. countries in Asia refer to n_name where r_name = 'ASIA';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Name the countries that belong in the region with comment description ""furiously express accounts wake sly"". r_comment = 'furiously express accounts wake sly';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total number of suppliers from Germany? suppliers refer to s_suppkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers in Asia, how many customers are in debt? customers in Asia refer to n_name where r_name = 'ASIA'; customers in debt refer to c_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Provide the phone number of the customer with the highest total price in an order. phone number of the customer refers to c_phone; the highest total price refers to MAX(o_totalprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the products that have a retail price greater than 1,000, how many products were shipped via ship? products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name and marketing segment of the customer with the total order price of 199180.63? name of the customer refers to c_name; total order price of 199180.63 refers o_totalprice = 199180.63; marketing segment refers to c_mktsegment;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Provide the nation and region of the customer with the address of wH55UnX7 VI? nation refers to n_name; region refers to r_name; address of wH55UnX7 VI refers to c_address = 'wH55UnX7 VI';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the customers in Brazil, how many of them have an account balance of less than 1000? customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers. country name refers to n_name; building marketing segment refers to c_mktsegment = 'BUILDING'; account balance greater than 80% of the average account balance of all customers refers to c_acctbal > MULTIPLY(AVG(c_acctbal), 0.8);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US? DIVIDE(COUNT(c_custkey where n_name = 'United States' and c_acctbal < 4000), COUNT(c_custkey where c_acctbal < 4000)) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Give the name and phone number of the customers who have more than 9000 account balance. the name of the customer refers to c_name; phone number of the customer refers to c_phone; have more than 9000 account balance refers to c_acctbal > 9000;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the average number of items shipped each day in April of 1994? AVG(l_linenumber) where l_shipdate between '1994-01-01' and '1994-01-30';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the order key of the orders with a total price between 200000 and 300000. orders with a total price between 200000 and 300000 refer to o_totalprice between 200000 and 300000;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Find and list the part key of the parts which has an above-average retail price. part key of the parts which has an above-average retail price refer to p_partkey where p_retailprice > AVG(p_retailprice);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the percentage of part supply that costs more than 500. DIVIDE(COUNT(ps_suppkey where ps_supplycost > 500)), COUNT(ps_suppkey) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance. supply key refers to s_suppkey; the most amount account balance refers to MAX(s_acctbal);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers who are not in debt ordered an urgent order? customers who are not in debt refer to c_custkey where c_acctbal > 0; the order is urgent if o_orderpriority = '1-URGENT' ;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the name and phone number of customers in India who have an above-average account balance. name of customer refers to c_name; phone number of customer refers to c_phone; customers in India who have an above-average account balance refer to n_name = 'INDIA' and c_acctbal > AVG(c_acctbal);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: In the parts supply by Supplier#000000654, list the top five parts with the most supply cost in descending order of supply cost. Supplier#000000654 is the name of the supplier which refers to s_name; parts with the most supply cost refer to ps_partkey where MAX(ps_supplycost);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What percentage of customers from France is in the automobile segment? DIVIDE(COUNT(c_name where c_mktsegment = 'AUTOMOBILE' and n_name = 'FRANCE'), COUNT(c_name where n_name = 'FRANCE')) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Name the part which is most profitable. profit can be calculated as SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))); part which is most profitable refers to p_name where MAX(profit);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the names of the countries with the below-average number of customers in ascending order of customer numbers. the names of countries with the below-average number of customers refer to n_name where COUNT(c_name) < DIVIDE(COUNT(c_name)), COUNT(n_name);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What percentage of customers from the African region is in the household segment? DIVIDE(COUNT(c_custkey where c_mktsegment = 'HOUSEHOLD' and r_name = 'AFRICA'), COUNT(c_custkey where r_name = 'AFRICA')) as percentage;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the name of the top ten items with the most quantity available in the descending order of availability. items with the most quantity available refer to p_name where MAX(ps_availqty);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the difference in the average retail price of parts shipped via ship and air. SUBTRACT(DIVIDE(SUM(p_retailprice where l_shipmode = 'SHIP'), COUNT(l_shipmode = 'SHIP')), DIVIDE(SUM(p_retailprice where l_shipmode = 'AIR'), COUNT(l_shipmode = 'AIR')));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the average discount for the parts made by Manufacturer#5? DIVIDE(SUM(l_discount), COUNT(l_partkey)) where p_mfgr = 'Manufacturer#5';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: In the parts shipped by rail, how many are of medium priority? parts shipped by rail refer to l_partkey where l_shipmode = 'RAIL'; medium priority refers to o_orderpriority = '3-MEDIUM';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the suppliers in the European region, what percentage have a below-average account balance? DIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996. SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List by their id all customers who have a debit balance in their accounts. customers who have a debt balance refer to c_custkey where c_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List by order number the 3 items with the lowest price after applying the discount. order number refers to l_orderkey; the lowest price after applying the discount refers to MIN(MULTIPLY(l_extendedprice), SUBTRACT(1, l_discount));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders of more than 10 items have been returned? more than 10 items have been returned refer to l_returnflag = 'R' where l_quantity > 10; orders refer to l_orderkey;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total price charged for orders shipped by air without shipping instructions? SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where l_shipmode = 'AIR' and l_shipinstruct = 'NONE';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Of the orders with a lower delivery priority, how many have an urgent priority order? an urgent priority order refers to o_orderkey where o_orderpriority = '1-URGENT'; earlier orderdate have higher priority in delivery; lower delivery priority refers to MAX(o_orderdate);"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many suppliers from Egypt have a debit balance? suppliers refer to s_suppkey; Egypt is the name of the nation which refers to n_name = 'EGYPT'; the balance is in debt if s_acctbal < 0;"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many items shipped by REG AIR were ordered on March 22, 1995? items shipped by REG AIR refer to l_linenumber where l_shipmode = 'REG AIR'; ordered on March 22, 1995 refers to o_orderdate = '1995-03-22';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many European suppliers are there? European suppliers refer to s_suppkey where r_name = 'EUROPE';"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: To which segment belongs the customer that made the most orders in April 1994? segment refers to c_mktsegment; customer made the most orders in April 1994 refers to c_custkey where o_orderdate LIKE '1994-04-%' and MAX(COUNT(o_orderkey));"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Lists all parts supplied by Supplier#000000034. part refers to p_name; Supplier#000000034 refers to s_name = 'Supplier#000000034'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the cost prices of large burnished copper? cost price refers to ps_supplycost; large burnished copper refers to p_type = 'LARGE BURNISHED COPPER'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many clients from Mozambique required orders with a low priority order? Mozambique refers to n_name = 'MOZAMBIQUE'; low priority order refers to o_orderpriority = '5-LOW'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Indicate the name of the product that is close to being sold out and that has the lowest cost price. name of the product refers to p_name; close to being sold out refers to ps_availqty < 10; the lowest cost price refers to min(ps_supplycost)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many different clerks have served the customer with the address uFTe2u518et8Q8UC? clerk who have served the customer refers to o_clerk"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Indicate the name of the parts without discount. name of the part refers to p_name; without discount refers to l_discount = 0.0000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many suppliers from Germany have left a comment with 'carefully regular packages'? Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many products shipped on 19/11/1994 were ordered on 21/09/1994? shipped on 19/11/1994 refers to l_shipdate = '1994-11-19'; ordered on 21/09/1994 refers to o_orderdate = '1994-09-21'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the average profit of prom brushed steel products. prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What percentage of customers engaged in the household segment are from Iran? the household segment refers to c_mktsegment = 'HOUSEHOLD'; Iran is nation name which refers to n_name = 'IRAN'; percentage = divide(count(c_custkey where n_name = 'IRAN'), count(c_custkey)) where c_mktsegment = 'HOUSEHOLD' * 100%"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please state the segment, the name, the address, and the phone number of customer number 3. segment refers to c_mktsegment; name refers to c_name; address refers to c_address; phone number refers to c_phone; customer number 3 refers to c_custkey = 3"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list any three line item numbers that have 10% off. line item number refers to l_linenumber; 10% off refers to l_discount = 0.1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many of the line items that have a quantity greater than 40 have been shipped by air? quantity greater than 40 refers to l_quantity > 40; shipped by air refers to l_shipmode = 'AIR'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which ship mode has more ""deliver in person"" instructions, rail or mail? ship mode refers to l_shipmode; ""deliver in person"" instruction refers to l_shipinstruct = 'DELIVER IN PERSON'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total price and the order priority of order number 33? total price refers to o_totalprice; order priority refers to o_orderpriority; order number 33 refers to o_orderkey = 33"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many orders in 1998 had a total price under 950? 1998 refers to year(o_orderdate) = '1998'; a total price under 950 refers to o_totalprice < 950"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list any three customers with debt. customer refers to c_name; with debt refers to c_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the discounted price of line item number 1? discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); line item number 1 refers to l_linenumber = 1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the difference between the number of returned items and not returned items with the full price of under 16947.7? full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the supply cost of large plated tin? supply cost refers to ps_supplycost; large plated tin refers to p_type = 'large plated tin'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please name any three parts that have an available quantity of more than 9998. part name refers to p_name; an available quantity of more than 9998 refers to ps_availqty > 9998"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list any two parts that come with the wrap bag container and have a supply cost of under 10. part name refers to p_name; wrap bag container refers to p_container = 'WRAP BAG'; supply cost of under 10 refers to ps_supplycost < 10"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the nationality of supplier number 1? nationality refers to n_name; supplier number 1 refers to s_suppkey = 1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the countries that belong to Africa? country is nation name which refers to n_name; Africa is region name refers to r_name = 'Africa'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which region has the lowest number of countries? region refers to has r_name; the lowest number of countries refers to min(count(n_name))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers from the furniture segments come from Iraq? furniture segment refers to c_mktsegment = 'FURNITURE'; Iraq refers to n_name = 'Iraq'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the customer number 93697 with the total order price of 191918.92? customer name refers to c_name; number 93697 refers to o_custkey = 93697; total order price of 191918.92 refers to o_totalprice = 191918.92"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which nation and region does the Customer#000000008 come from? nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the delivery time and the clerk of order number 6? delivery time = subtract(l_receiptdate, l_commitdate); clerk refers to o_clerk; order number 6 refers to o_orderkey = 6"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many Japanese suppliers have their accounts in debt? Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which customer is the most in debt? customer refers to c_name; the most in debt refers to max(c_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List all the dates of the urgent orders. date refers to o_orderdate; urgent order refers to o_orderpriority = '1-URGENT'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many of the items are instructed to be delivered in person? instructed to be delivered in person refers to l_shipinstruct = 'DELIVER IN PERSON'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the largest supplier's account balance? the largest supplier's account balance refers to max(s_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many part supplies are close to being out of stock? close to being out of stock refers to ps_availqty < 10"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List all the nations in Europe. nation refers to n_name; Europe refers to r_name = 'EUROPE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the supply cost for the part ""violet olive rose ivory sandy""? supply cost refers to ps_supplycost; part ""violet olive rose ivory sandy"" refers to p_name = 'violet olive rose ivory sandy'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List all the customers' phone numbers from Ethiopia. phone number refers to c_phone; Ethiopia refers to n_name = 'Ethiopia'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total price of all orders from the customer with the phone number ""627-220-3983""? total price = sum(o_totalprice); phone number ""627-220-3983"" refers to c_phone = '627-220-3983'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the shipping methods for the orders on 12/31/1994? shipping method refers to l_shipmode; order on 12/31/1994 refers to o_orderdate = '1994-12-31'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the account balance of the supplier with the most parts? account balance refers to s_acctbal; the most parts refers to max(count(ps_suppkey))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which nation does the supplier with the account balance of ""4393.04"" belong to? nation refers to n_name; account balance of ""4393.04"" refers to s_acctbal = 4393.04"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the region with the most customers? region refers to r_name; the most customers refers to max(count(c_custkey))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the phone number of the customer who placed orders with a total price of more than $300,000. phone number refers to c_phone; a total price of more than $300,000 refers to o_totalprice > 300000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the clerks of orders with line items shipped by mail? clerk refers to o_clerk; shipped by mail refers to l_shipmode = 'MAIL'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the top 5 nations of suppliers with the lowest account balance? nation refers to n_name; the lowest account balance refers to min(s_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List all the addresses for the suppliers of the biggest parts. addresses refers to s_address; the biggest part refers to max(p_size)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which part and supplier have the most profit? part refers to p_name; supplier refers to s_name; the most profit refers to max(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity)))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What proportion of suppliers are from Asia? Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please indicate the total price of order key 32. total price refers to o_totalprice; order key 32 refers to o_orderkey = 32"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many order keys are not applied for the discount? order key refers to l_orderkey; not applied for the discount refers to l_discount = 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List line items shipped by truck with delivery time before 1997. line item refers to l_linenumber; shipped by truck refers to l_shipmode = 'truck'; delivery time before 1997 refers to year(l_shipdate) < 1997"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many line items were returned in 1998? line item refers to l_linenumber; returned refers to returnflag = 'R'; in 1998 refers to year(l_shipdate) = 1998"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which line item with the highest quantity is shipped by air? line item refers to l_linenumber; the highest quantity refers to max(l_quantity); shipped by air refers to l_shipmode = 'AIR'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the names of customers whose accounts are in debt. name of customer refers to c_name; account in debt refers to c_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers belong to the household segment in Germany? household segment refers to c_mktsegment = 'household'; Germany refers to n_name = 'Germany'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the phone numbers of customers whose order priority is urgent. phone number refers to c_phone; order priority is urgent refers to o_orderpriority = '1-URGENT'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Name of customer whose order is applied with the highest discount. customer name refers to c_name; the highest discount refers to max(l_discount)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the 5 orders with the highest total price, indicating the delivery date. order refers to o_orderkey; the highest total price refers to max(o_totalprice); delivery date refers to l_shipdate"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the comments describing orders from customers in the furniture segment. comment refers to o_comment; furniture segment refers to c_mktsegment = 'FURNITURE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please indicate the names of the customers whose order with a total price over $300000. customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Name customers in India with account balances over $5000. customer name refers to c_name; India refers to n_name = 'INDIA'; account balance over $5000 refers to c_acctbal > 5000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: List the phone numbers of suppliers from Japan. phone number refers to s_phone; Japan refers to n_name = 'JAPAN'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the providers in Argentina, which supplier has an account that is in debt? Argentina refers to n_name = 'ARGENTINA'; supplier refers to s_name; an account in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many countries belong to the Algeria region? the algeria region refers to r_name = 'ALGERIA'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995. customer name refers to c_name; 10% discount refers to l_discount = 0.1; order dates between 1/1/1994 and 1/1/1995 refers to year(o_orderdate) = 1994 OR o_orderdate = '1995-01-01'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate the percentage of countries that belong to the American region. the American region refers to r_name = 'America'; percentage = divide(count(n_name where r_name = 'America'), count(n_name)) * 100%"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Calculate percentage of household segment in Indonesia. household segment refers to c_mktsegment = 'HOUSEHOLD'; Indonesia refers to n_name = 'Indonesia'; percentage = divide(count(c_mktsegment = 'HOUSEHOLD'), count(c_mktsegment)) where n_name = 'Indonesia' * 100%"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the names of all the products under the type ""promo brushed steel"". product name refers to p_name; type ""promo brushed steel"" refers to p_type = 'PROMO BRUSHED STEEL'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the comment of the product ""burlywood plum powder puff mint""? comment refers to p_comment; product ""burlywood plum powder puff mint"" refers to p_name = 'burlywood plum powder puff mint'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many parts have a retail price of over 1900? a retail price of over 1900 refers to p_retailprice > 1900"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the products under the type ""promo brushed steel"", how many of them are manufactured by Manufacturer#5? type ""promo brushed steel"" refers to p_type = 'PROMO BRUSHED STEEL'; Manufacturer#5 refers to p_mfgr = 'Manufacturer#5'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list all the brands that contain a part under the type ""promo brushed steel"". brand refers to p_brand; type ""promo brushed steel"" refers to p_type = 'PROMO BRUSHED STEEL'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the product with the highest retail price? name of the product refers to p_name; the highest retail price refers to p_retailprice"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which part has a bigger size, ""pink powder drab lawn cyan"" or ""cornflower sky burlywood green beige""? size refers to p_size; ""pink powder drab lawn cyan"" or ""cornflower sky burlywood green beige"" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many parts have a jumbo case container? jumbo case container refers to p_container = 'JUMBO CASE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the size of the smallest part in a jumbo case container? size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many suppliers have their accounts in debt? account in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the names of the top 3 suppliers with the most amount of money in their accounts. supplier name refers to s_name; the most amount of money refers to max(s_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the phone numbers of all the suppliers in Germany. phone number refers to s_phone; Germany refers to n_name = 'Germany'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the names of all the suppliers for the part ""hot spring dodger dim light"". supplier name refers to s_name; part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the lowest supply cost for the part ""hot spring dodger dim light""? the lowest supply cost refers to min(ps_supplycost); part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the supplier that provides the part ""hot spring dodger dim light"" with the lowest supply cost? supplier name refers to s_name; part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'; the lowest supply cost refers to min(ps_supplycost)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total quantity available by all suppliers for the part ""hot spring dodger dim light""? total quantity available refers to sum(ps_availqty); part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which supplier can provide the most number of ""hot spring dodger dim light""? Please give the supplier's phone number. the most number refers to max(ps_availqty); ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the names of all the suppliers for the part with the highest retail price. supplier name refers to s_name; the highest retail price refers to max(p_retailprice)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many suppliers for the part ""hot spring dodger dim light"" are in Vietnam? part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'; Vietnam refers to n_name = 'VIETNAM'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the suppliers providing parts under the type ""promo brushed steel"", how many of them are in debt? type ""promo brushed steel"" refers to p_type = 'PROMO BRUSHED STEEL'; in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the names of all the suppliers for parts under Brand#55. supplier name refers to s_name; Brand#55 refers to p_brand = 'Brand#55'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the parts under the type ""promo brushed steel"", how many of them have a total available quantity from all suppliers of under 5000? type ""promo brushed steel"" refers to p_type = 'PROMO BRUSHED STEEL'; a total available quantity of under 5000 refers to sum(ps_availqty) < 5000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: The part ""hot spring dodger dim light"" is ordered in how many orders? part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total quantity of the part ""hot spring dodger dim light"" ordered in all orders? total quantity refers to sum(l_quantity); part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the order keys of all the orders that have more than 2 parts with a jumbo case container. order key refers to l_orderkey; jumbo case container refers to p_container = 'JUMBO CASE'; more than 2 parts refers to count(l_partkey) > 2"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the suppliers in debt, how many of them are in Europe? in debt refers to s_acctbal < 0; Europe refers to r_name = 'EUROPE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among all the suppliers providing the part ""hot spring dodger dim light"", how many of them are in Europe? part ""hot spring dodger dim light"" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list the phone numbers of all the suppliers for the parts ordered in order no.1. phone number refers to s_phone; order no.1 refers to l_orderkey = 1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the suppliers for the parts ordered in order no.4, how many of them are in debt? order no.4 refers to l_orderkey = 4; in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the parts that are returned, how many of them are provided by a supplier in debt? returned refers to l_returnflag = 'R'; in debt refers to s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: On which date was the part ""burnished seashell gainsboro navajo chocolate"" in order no.1 shipped? date refers to l_shipdate; part ""burnished seashell gainsboro navajo chocolate"" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the quantity of the part ""burnished seashell gainsboro navajo chocolate"" ordered in order no.1? quantity refers to l_quantity; part ""burnished seashell gainsboro navajo chocolate"" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which part is ordered in a bigger amount in order no.1, ""burnished seashell gainsboro navajo chocolate"" or ""salmon white grey tan navy""? amount refers to sum(l_quantity); order no.1 refers to l_orderkey = 1; ""burnished seashell gainsboro navajo chocolate"" or ""salmon white grey tan navy"" refers to p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate')"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the biggest discount among all orders for the part ""burnished seashell gainsboro navajo chocolate""? the biggest discount refers to max(l_discount); part ""burnished seashell gainsboro navajo chocolate"" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Please list all the modes of shipping for the part ""burnished seashell gainsboro navajo chocolate"". mode of shipping refers to l_shipmode; part ""burnished seashell gainsboro navajo chocolate"" refers to p_name = 'burnished seashell gainsboro navajo chocolate'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the average supply cost for the part ""hot spring dodger dim light""? average supply cost refers to avg(ps_supplycost); part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How much higher in percentage is the highest supply cost of the part ""hot spring dodger dim light"" than the lowest supply cost? part ""hot spring dodger dim light"" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100%"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the profit for part no.98768 in order no.1? part no.98768 refers to l_partkey = 98768; order no.1 refers to l_orderkey = 1; profit = subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the discounted price of the part ""burnished seashell gainsboro navajo chocolate"" in order no.1? part ""burnished seashell gainsboro navajo chocolate"" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1; discounted price refers to multiply(l_extendedprice, subtract(1, l_discount))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which market segment does the customer with the highest amount of debt belongs to? market segment refers to c_mktsegment; the highest amount of debt refers to max(c_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: In 1997, how many orders were shipped via mail? 1997 refers to year(l_shipdate) = 1997; shipped via mail refers to l_shipmode = 'MAIL'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers are in the furniture segment? furniture segment refers to c_mktsegment = 'FURNITURE'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Among the items shipped in 1994 via truck, how many items were returned? 1994 refers to year(l_shipdate) = 1994; via truck refers to l_shipmode = 'TRUCK'; returned refers to l_returnflag = 'R'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers in the machinery segment are in debt? machinery segment refers to c_mktsegment = 'MACHINERY'; in debt refers to c_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many urgent orders did Clerk#000000001 handle in 1997? urgent order refers to o_orderpriority = '1-URGENT'; Clerk#000000001 refers to o_clerk = 'Clerk#000000001'; 1997 refers to year(o_orderdate) = 1997"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the customer whose order was delivered the longest? name of the customer refers to c_name; delivered the longest refers to max(subtract(l_receiptdate, l_commitdate))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How much is the total price of all the orders shipped to customers in Argentina? total price = sum(o_totalprice); Argentina refers to n_name = 'Argentina'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How many customers in the building segments have orders with a total price of no less than 50,000? building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Which country has the least number of suppliers? country refers to n_name; the least number of suppliers refers to min(count(s_name))"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How much is the part supply cost for the medium metallic grey dodger linen? part supply cost refers to ps_supplycost; medium metallic grey dodger linen refers to p_name = 'medium metallic grey dodger linen'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the top 2 countries with the highest number of indebted suppliers? country refers to c_name; highest number of indebted refers to max(sum(acctbal)) where s_acctbal < 0"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the names of the parts that have a part supply cost of at least 1,000? name of the part refers to p_name; part supply cost of at least 1,000 refers to ps_supplycost > 1000"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the name of the country of the supplier with the highest debt? name of the country refers to n_name; the highest debt refers to min(s_acctbal)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: Who is the clerk in charge of handling the item with the highest amount of extended price? clerk refers to o_clerk; the highest amount of extended price refers to max(l_extendedprice)"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the total quantities of the items ordered by customer 101660 on 10/5/1995? total quantity refers to sum(l_quantity); customer 101660 refers to o_custkey = 101660; on 10/5/1995 refers to o_orderdate = '1995-10-05'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994? total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: What are the names of the parts that were ordered by customer 110942? name of the part refers to p_name; customer 110942 refers to o_custkey = 110942"
retails,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE customer (
c_custkey integer,
c_mktsegment text,
c_nationkey integer,
c_name text,
c_address text,
c_phone text,
c_acctbal real,
c_comment text,
PRIMARY KEY (c_custkey),
FOREIGN KEY (c_nationkey) REFERENCES nation(n_nationkey),
);
CREATE TABLE lineitem (
l_shipdate date,
l_orderkey integer,
l_discount real,
l_extendedprice real,
l_suppkey integer,
l_quantity integer,
l_returnflag text,
l_partkey integer,
l_linestatus text,
l_tax real,
l_commitdate date,
l_receiptdate date,
l_shipmode text,
l_linenumber integer,
l_shipinstruct text,
l_comment text,
FOREIGN KEY (l_orderkey) REFERENCES orders(o_orderkey),
FOREIGN KEY (l_suppkey) REFERENCES partsupp(ps_suppkey),
FOREIGN KEY (l_partkey) REFERENCES partsupp(ps_partkey),
);
CREATE TABLE nation (
n_nationkey integer,
n_name text,
n_regionkey integer,
n_comment text,
PRIMARY KEY (n_nationkey),
FOREIGN KEY (n_regionkey) REFERENCES region(r_regionkey),
);
CREATE TABLE orders (
o_orderdate date,
o_orderkey integer,
o_custkey integer,
o_orderpriority text,
o_shippriority integer,
o_clerk text,
o_orderstatus text,
o_totalprice real,
o_comment text,
PRIMARY KEY (o_orderkey),
FOREIGN KEY (o_custkey) REFERENCES customer(c_custkey),
);
CREATE TABLE part (
p_partkey integer,
p_type text,
p_size integer,
p_brand text,
p_name text,
p_container text,
p_mfgr text,
p_retailprice real,
p_comment text,
PRIMARY KEY (p_partkey),
);
CREATE TABLE partsupp (
ps_partkey integer,
ps_suppkey integer,
ps_supplycost real,
ps_availqty integer,
ps_comment text,
FOREIGN KEY (ps_partkey) REFERENCES part(p_partkey),
FOREIGN KEY (ps_suppkey) REFERENCES supplier(s_suppkey),
);
CREATE TABLE region (
r_regionkey integer,
r_name text,
r_comment text,
PRIMARY KEY (r_regionkey),
);
CREATE TABLE supplier (
s_suppkey integer,
s_nationkey integer,
s_comment text,
s_name text,
s_address text,
s_phone text,
s_acctbal real,
PRIMARY KEY (s_suppkey),
FOREIGN KEY (s_nationkey) REFERENCES nation(n_nationkey),
);
---------------------
QUESTION: How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item. discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); customer 111511 refers to o_custkey = 111511; order 53159 refers to o_orderkey = 53159; name of the part refers to p_name"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the height of David Bornhammar in inches? heigh in inches refers to height_in_inch;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Please list the names of all the players with a height of over 6'2"" inches. name of the players refers to PlayerName; height of over 6'2"" inches refers to height_in_inch > '6''2""' ;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players with a height of over 6'2"" inches, how many of them were born in Sweden? height of over 6'2"" inches refers to height_in_inch > '6''2""'; born in Sweden refers to nation = 'Sweden' ;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the name of the tallest player? tallest player refers to MAX(height_in_cm);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How much does David Bornhammar weigh in kilograms? weigh in kilograms refers to weight_in_kg;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players weigh more than 90 kg? weigh more than 90 kg refers to weight_in_kg > 90;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players that weigh more than 90 kg, how many of them have a position of defense? weigh more than 90 kg refers to weight_in_kg > 90; position of defense refers to position_info = 'D' ;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players that weigh more than 90 kg, what is the name of the player that has the most attendance in the player's first 7 years of NHL career? weigh more than 90 kg refers to weight_in_kg > 90; name of the player refers to PlayerName; most attendance in the player's first 7 years of NHL career refers to MAX(sum_7yr_GP);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the weight of the player with the longest time on ice in the player’s first 7 years of NHL career in kilograms? weight in kilograms refers to weight_in_kg; longest time on ice in the player's first 7 years of NHL career refers to MAX(sum_7yr_TOI);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How much taller is David Bornhammar than Pauli Levokari in centimeters? how much taller = SUBTRACT(SUM(height_in_cm WHERE PlayerName = 'David Bornhammar'), SUM(height_in_cm WHERE PlayerName = 'Pauli Levokari')); height in centimeters refers to height_in_cm;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all the players that are right-shooted, how many of them weigh over 90 kg? right-shooted refers to shoots = 'R'; weigh over 90 kg refers to weight_in_kg > 90;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Please list the names of all the players that are over 90 kg and are right-shooted. names of the players refers to PlayerName; over 90 kg refers to weight_in_kg > 90; right-shooted refers to shoots = 'R';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the BMI of David Bornhammar? BMI = DIVIDE(weight_in_kg, power(DIVIDE(height_in_cm, 100), 2));"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the average height in centimeters of all the players in the position of defense? average = AVG(height_in_cm); players refers to PlayerName; position of defense refers to position_info = 'D' ;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the weight in pounds of the heaviest player? weight in pounds refers to weight_in_lbs; heaviest player refers to MAX(weight_in_lbs);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many right-shooted players have a height of 5'7''? right-shooted players refers to shoots = 'R'; height of 5'7'' refers to height_in_inch = '5''7""';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players whose total NHL games played in their first 7 years of NHL career is no less than 500, what is the name of the player who committed the most rule violations? total NHL games played in their first 7 years of NHL career is no less than 500 refers to sum_7yr_GP > 500; name of the player refers to PlayerName; committed the most rule violations refers to MAX(PIM);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada? height in centimeter refers to height_in_cm; tallest player refers to MAX(height_in_cm); born in Edmonton, Alberta, Canada refers to birthplace = 'Edmonton, AB, CAN';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players, who were drafted by Anaheim Ducks in 2008, have played for U.S. National U18 Team? drafted by Anaheim Ducks refers to overallby = 'Anaheim Ducks'; in 2008 refers to draftyear = 2008; played for U.S. National U18 Team refers to TEAM = 'U.S. National U18 Team';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the weight in kilograms of the player with the highest number of goal differential of all time? weight in kilograms refers to weight_in_kg; highest number of goal differential of all time refers to MAX(PLUSMINUS);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the most valuable player in QMJHL league during the 2004-2005 season? most valuable player refers to MAX(P); QMJHL league refers to LEAGUE = 'QMJHL'; 2004-2005 season refers to SEASON = '2004-2005';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What are the names of the players who played for Acadie-Bathurst Titan during the regular season in 1998-1999? names of the players refers to PlayerName; played for Acadie-Bathurst Titan refers to TEAM = 'AcadieandBathurst Titan'; regular season refers to GAMETYPE = 'Regular Season'; in 1998-1999 refers to SEASON = '1998-1999';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many games did the tallest player have ever played? tallest player refers to MAX(height_in_cm);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the youngest player to have played during the 1997-1998 season for OHL League? youngest player refers to MAX(birthdate); 1997-1998 season refers to SEASON = '1997-1998'; OHL league refers to LEAGUE = 'OHL';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players who played 72 games, how many are left-shooters? played 72 games refers to GP = 72; left-shooters refers to shoots = 'L';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season? difference = SUBTRACT(SUM(G WHERE GAMETYPE = 'Regular Season'), SUM(G WHERE GAMETYPE = 'Playoffs') WHERE SEASON = '1998-1999'); number of goals scored refers to G; regular season refers to GAMETYPE = 'Regular Season'; playoffs refers to GAMETYPE = 'Playoffs'; 1998-1999 season refers to SEASON = '1998-1999';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the average weight in pounds of all the players with the highest prospects for the draft? average = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; highest prospects for the draft refers to MAX(CSS_rank);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all the teams that made the playoffs in the 2007-2008 season, identify the percentage that played over 20 games. playoffs refers to GAMETYPE = 'Playoffs'; percentage = MULTIPLY(DIVIDE(SUM(GP > 20), COUNT(ELITEID)), 100); played over 20 games refers to GP > 20; 2007-2008 season refers to SEASON = '2007-2008';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Name the player who scored the most goals in a single game in the 2007-2008 season of WHL? name of the player refers to PlayerName; scored the most goals in a single game refers to MAX(G); WHL refers to LEAGUE = 'WHL'; 2007-2008 season refers to SEASON = '2007-2008';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Name the Chilliwack Chiefs players who have scored 100 points or more in the NHL. name of the player refers to PlayerName; Chilliwack Chiefs refers to TEAM = 'Chilliwack Chiefs'; scored 100 points or more in the NHL refers to P > 100;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Identify the players who weigh 120 kg. players refers to PlayerName; weigh 120 kg refers to weight_in_kg = 120;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Identify the players with the same height as Brian Gionta. How tall are they? players refers to PlayerName; height refers to height_in_cm;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Identify the name and position of the player who has committed the most rule violations. name of the player refers to PlayerName; position of the player refers to position_info; committed the most rule violations refers to MAX(PIM);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Name the player who has the most NHL points in draft year. name of the player refers to PlayerName; most NHL points in draft year refers to MAX(P);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all players drafted by the Toronto Maple Leafs, identify the percentage who are from Eastern Europe. players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; percentage = MULTIPLY(DIVIDE(SUM(nation = 'Eastern Europe'), COUNT(ELITEID) WHERE overallby = 'Toronto Maple Leafs'), 100); from Eastern Europe refers to nation in ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine'); countries in a continent can be identified by referring to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all players drafted by the Toronto Maple Leafs in 2008, identify the player with the highest prospects for the draft. players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; highest prospects for the draft refers to MAX(CSS_rank);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Name the player and his team who made the playoffs in the 2006-2007 season of SuperElit league with the highest points. name of the player refers to PlayerName; playoffs refers to GAMETYPE = 'Playoffs'; highest points refers to MAX(P); 2006-2007 season refers to SEASON = '2006-2007'; SuperElit league refers to LEAGUE = 'SuperElit';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career? drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; played over 300 games in their first 7 years of the NHL career refers to sum_7yr_GP > 300;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How tall is the player from Yale University who picked up 28 penalty minutes in the 2005-2006 season? how tall refers to height_in_cm; Yale University refers to TEAM = 'Yale Univ.'; 28 penalty minutes refers to PIM = '28'; 2005-2006 season refers to SEASON = '2005-2006';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz. goals scored refers to G; Calgary Hitmen refers to TEAM = 'Calgary Hitmen'; percentage = MULTIPLY(DIVIDE(SUM(G WHERE PlayerName = 'Ian Schultz'), SUM(G)), 100); 2007-2008 season refers to SEASON = '2007-2008';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov. penalty minutes refers to PIM; Ak Bars Kazan refers to TEAM = 'Ak Bars Kazan'; percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE PlayerName = 'Yevgeni Muratov'), SUM(PIM)), 100.0); 1999-2000 season refers to SEASON = '1999-2000';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the birthplace of Aaron Gagnon? FALSE;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the weight in kg of Tony Martensson? FALSE;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List out the name of players who weight 190 lbs. name of players refers to PlayerName; weight 190 lbs refers to weight_in_lbs = 190;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who has the heaviest weight? who refers to PlayerName; heaviest weight refers to MAX(weight_in_kg);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the percentage of players who were born in Denmark and weight above 154 lbs? percentage = MULTIPLY(DIVIDE(SUM(weight_in_lbs > 154 and nation = 'Denmark'), COUNT(ELITEID)), 100); players refers to PlayerName; born in Denmark refers to nation = 'Denmark'; weight above 154 lbs refers to weight_in_lbs > 154;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Which team does Andreas Jamtin belong to? FALSE;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List out the seasons that Niklas Eckerblom played. FALSE;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Mention the type of game that Matthias Trattnig played. type of game refers to GAMETYPE;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List out the nation of players who played for the 1997-1998 season . players refers to PlayerName; 1997-1998 season refers to SEASON = '1997-1998';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the highest point highest point of Per Mars in the draft year? highest point in the draft year refers to MAX(P);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the Italian players, who has the shortest height? Italian refers to nation = 'Italy'; players refers to PlayerName; shortest height refers to MIN(height_in_cm);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List out the name of players who have a height of 5'8"". name of players refers to PlayerName; height of 5'8"" refers to height_in_inch = '5''8""';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players were born in 1982 and have a height above 182cm? born in 1982 refers to birthyear = 1982; height above 182cm refers to height_in_cm > 182 ;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the percentage of Russian players who have a height of under 200 inch? percentage = MULTIPLY(DIVIDE(SUM(nation = 'Russia' WHERE height_in_cm < 200), COUNT(ELITEID)), 100); Russian refers to nation = 'Russia'; players refers to PlayerName; height of under 200 inch refers to height_in_cm < 200;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the USA players, who has the lightest weight? USA refers to nation = 'USA' ; players refers to PlayerName; lightest weight refers to MIN(weight_in_lbs);"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who among the players in season 2000-2001 has committed the highest rule violations or penalty minutes? committed the highest rule violations or penalty minutes refers to MAX(PIM); 2000-2001 season refers to SEASON = '2000-2001'"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List the names of all players in team Avangard Omsk in season 2000-2001. names of the players refers to PlayerName; team Avangard Omsk refers to TEAM = 'Avangard Omsk'; 2000-2001 season refers to SEASON = '2000-2001';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who among the players drafted by Arizona Coyotes in 2000 has committed the highest rule violations? who refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; committed the highest rule violations refers to MAX(PIM); in 2000 refers to draftyear = 2000;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players were drafted by Arizona Coyotes whose height reaches 195 centimeters? drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; height reaches 195 centimeters refers to height_in_cm = 195;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List the names of all players from Avangard Omsk that have played for playoffs in season 2000-2001. names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; playoffs refers to GAMETYPE = 'Playoffs'; 2000-2001 season refers to SEASON = '2000-2001';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the most valuable player who played in the 2000-2001 season of the International league? most valuable player refers to MAX(P); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many players who were born in 1980 weigh 185 in pounds? born in 1980 refers to birthyear = 1980; weigh 185 in pounds refers to weight_in_lbs = 185;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who has played the most game plays in the 2000-2001 season of the International league? played the most game plays refers to MAX(GP); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List the names of all players from Avangard Omsk who played in the 2000-2001 season of the International league that have no goals in draft year. names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; International league refers to LEAGUE = 'International'; no goals in draft year refers to G = 0; 2000-2001 season refers to SEASON = '2000-2001';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the oldest player who played for Avangard Omsk during the regular season in 2000-2001? oldest player refers to MIN(birthdate); Avangard Omsk refers to TEAM = 'Avangard Omsk'; regular season refers to GAMETYPE = 'Regular Season'; 2000-2001 season refers to SEASON = '2000-2001';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Among the players who played in OHL league during the regular season in 2007-2008, who is the player that attained the most number of assist? OHL league refers to LEAGUE = 'OHL'; who refers to PlayerName; regular season refers to GAMETYPE = 'Regular Season'; most number of assist refers to MAX(A); 2007-2008 season refers to SEASON = '2007-2008';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many teams did the heaviest player drafted by Arizona Coyotes have played for? heaviest player refers to MAX(weight_in_lb); drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Calculate the average weight in pounds of all players drafted by Arizona Coyotes. average weight in pounds = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season. average height in centimeter = AVG(height_in_cm); height in centimeter refers to height_in_cm; players refers to PlayerName; Acadie-Bathurst Titan refers to TEAM = 'Acadie-Bathurst Titan'; regular season refers to GAMETYPE = 'Regular Season';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many games did Per Mars play in the 1997-1998 season? 1997-1998 season refers to SEASON = '1997-1998';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How heavy is Matthias Trattnig in kilograms? how heavy in kilograms refers to weight_in_kg;"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: List the name of players who have a height over 5'9. names of players refers to PlayerName; height over 5'9 refers to height_in_inch > '5''9""';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What team did Niklas Eckerblom play in the 1997-1998 season? 1997-1998 season refers to SEASON = '1997-1998';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Which team has the most Swedish? Swedish refers to nation = 'Sweden'; team with the most Swedish refers to MAX(TEAM WHERE nation = 'Sweden');"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: How many playoffs did Per Mars participate in? playoffs refers to GAMETYPE = 'Playoffs';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Name the player who had the most goals for team Rimouski Oceanic in playoff. name of the player refers to PlayerName; most goals refers to MAX(G); team Rimouski Oceanic refers to TEAM = 'Rimouski Oceanic'; playoff refers to GAMETYPE = 'Playoffs';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Which country do most players of team Plymouth Whalers come from? country and nation are synonyms; country where most players come from refers to MAX(COUNT(nation WHERE TEAM = 'Plymouth Whalers')); players refers to PlayerName; team Plymouth Whalers refers to TEAM = 'Plymouth Whalers';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who had the most assists of team Plymouth Whalers in the 1999-2000 season? who refers to PlayerName; most assists refers to MAX(A); team Plymouth Whalers refers to TEAM = 'Plymouth Whalers'; 1999-2000 season refers to SEASON = '1999-2000';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Indicate the height of all players from team Oshawa Generals in inches. height in inches refers to height_in_inch; players refers to PlayerName; team Oshawa Generals refers to TEAM = 'Oshawa Generals';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the oldest player that participated in OHL league in the 1997 - 2000 season? oldest player refers to MIN(birthdate); OHL league refers to LEAGUE = 'OHL'; 1997-2000 season refers to SEASON = '1997-2000';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Who is the tallest player in team USA U20? tallest refers to MAX(height_in_cm); 
player refers to PlayerName; team USA U20 refers to TEAM = 'USA U20';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: What is the percentage of Swedish players in playoffs games in the 1997 - 2000 season? percentage = MULTIPLY(DIVIDE(SUM(nation = 'Sweden'), COUNT(ELITEID) WHERE SEASON = '1997-2000'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; playoffs games refers to GAMETYPE = 'Playoffs'; 1997-2000 season refers to 3 consecutive SEASONs : '1997-1998', '1998-1999', '1999-2000';"
ice_hockey_draft,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE height_info (
height_id integer,
height_in_cm integer,
height_in_inch text,
PRIMARY KEY (height_id),
);
CREATE TABLE weight_info (
weight_id integer,
weight_in_kg integer,
weight_in_lbs integer,
PRIMARY KEY (weight_id),
);
CREATE TABLE PlayerInfo (
ELITEID integer,
PlayerName text,
birthdate text,
birthyear date,
birthmonth integer,
birthday integer,
birthplace text,
nation text,
height integer,
weight integer,
position_info text,
shoots text,
draftyear integer,
draftround integer,
overall integer,
overallby text,
CSS_rank integer,
sum_7yr_GP integer,
sum_7yr_TOI integer,
GP_greater_than_0 text,
PRIMARY KEY (ELITEID),
FOREIGN KEY (height) REFERENCES height_info(height_id),
FOREIGN KEY (weight) REFERENCES weight_info(weight_id),
);
CREATE TABLE SeasonStatus (
ELITEID integer,
SEASON text,
TEAM text,
LEAGUE text,
GAMETYPE text,
GP integer,
G integer,
A integer,
P integer,
PIM integer,
PLUSMINUS integer,
FOREIGN KEY (ELITEID) REFERENCES PlayerInfo(ELITEID),
);
---------------------
QUESTION: Calculate the percentage of penalty minutes of Swedish players in OHL league among all players. percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE nation = 'Sweden'), COUNT(ELITEID) WHERE LEAGUE = 'OHL'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; OHL league refers to LEAGUE = 'OHL';"
works_cycles,"Based on the database schema below and the question, create a SQL query that will return the desired result:
DATABASE SCHEMA
---------------------
CREATE TABLE CountryRegion (
CountryRegionCode text,
Name text,
ModifiedDate datetime,
PRIMARY KEY (CountryRegionCode),
);
CREATE TABLE Culture (
CultureID text,
Name text,
ModifiedDate datetime,
PRIMARY KEY (CultureID),
);
CREATE TABLE Currency (
CurrencyCode text,
Name text,
ModifiedDate datetime,
PRIMARY KEY (CurrencyCode),
);
CREATE TABLE CountryRegionCurrency (
CountryRegionCode text,
CurrencyCode text,
ModifiedDate datetime,
FOREIGN KEY (CountryRegionCode) REFERENCES CountryRegion(CountryRegionCode),
FOREIGN KEY (CurrencyCode) REFERENCES Currency(CurrencyCode),
);
CREATE TABLE Person (
BusinessEntityID integer,
PersonType text,
NameStyle integer,
Title text,
FirstName text,
MiddleName text,
LastName text,
Suffix text,
EmailPromotion integer,
AdditionalContactInfo text,
Demographics text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES BusinessEntity(BusinessEntityID),
);
CREATE TABLE BusinessEntityContact (
BusinessEntityID integer,
PersonID integer,
ContactTypeID integer,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES BusinessEntity(BusinessEntityID),
FOREIGN KEY (PersonID) REFERENCES Person(BusinessEntityID),
FOREIGN KEY (ContactTypeID) REFERENCES ContactType(ContactTypeID),
);
CREATE TABLE EmailAddress (
BusinessEntityID integer,
EmailAddressID integer,
EmailAddress text,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES Person(BusinessEntityID),
);
CREATE TABLE Employee (
BusinessEntityID integer,
NationalIDNumber text,
LoginID text,
OrganizationNode text,
OrganizationLevel integer,
JobTitle text,
BirthDate date,
MaritalStatus text,
Gender text,
HireDate date,
SalariedFlag integer,
VacationHours integer,
SickLeaveHours integer,
CurrentFlag integer,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES Person(BusinessEntityID),
);
CREATE TABLE Password (
BusinessEntityID integer,
PasswordHash text,
PasswordSalt text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES Person(BusinessEntityID),
);
CREATE TABLE PersonCreditCard (
BusinessEntityID integer,
CreditCardID integer,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES Person(BusinessEntityID),
FOREIGN KEY (CreditCardID) REFERENCES CreditCard(CreditCardID),
);
CREATE TABLE ProductCategory (
ProductCategoryID integer,
Name text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ProductCategoryID),
);
CREATE TABLE ProductDescription (
ProductDescriptionID integer,
Description text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ProductDescriptionID),
);
CREATE TABLE ProductModel (
ProductModelID integer,
Name text,
CatalogDescription text,
Instructions text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ProductModelID),
);
CREATE TABLE ProductModelProductDescriptionCulture (
ProductModelID integer,
ProductDescriptionID integer,
CultureID text,
ModifiedDate datetime,
FOREIGN KEY (ProductModelID) REFERENCES ProductModel(ProductModelID),
FOREIGN KEY (ProductDescriptionID) REFERENCES ProductDescription(ProductDescriptionID),
FOREIGN KEY (CultureID) REFERENCES Culture(CultureID),
);
CREATE TABLE ProductPhoto (
ProductPhotoID integer,
ThumbNailPhoto blob,
ThumbnailPhotoFileName text,
LargePhoto blob,
LargePhotoFileName text,
ModifiedDate datetime,
PRIMARY KEY (ProductPhotoID),
);
CREATE TABLE ProductSubcategory (
ProductSubcategoryID integer,
ProductCategoryID integer,
Name text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ProductSubcategoryID),
FOREIGN KEY (ProductCategoryID) REFERENCES ProductCategory(ProductCategoryID),
);
CREATE TABLE SalesReason (
SalesReasonID integer,
Name text,
ReasonType text,
ModifiedDate datetime,
PRIMARY KEY (SalesReasonID),
);
CREATE TABLE SalesTerritory (
TerritoryID integer,
Name text,
CountryRegionCode text,
Group text,
SalesYTD real,
SalesLastYear real,
CostYTD real,
CostLastYear real,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (TerritoryID),
FOREIGN KEY (CountryRegionCode) REFERENCES CountryRegion(CountryRegionCode),
);
CREATE TABLE SalesPerson (
BusinessEntityID integer,
TerritoryID integer,
SalesQuota real,
Bonus real,
CommissionPct real,
SalesYTD real,
SalesLastYear real,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES Employee(BusinessEntityID),
FOREIGN KEY (TerritoryID) REFERENCES SalesTerritory(TerritoryID),
);
CREATE TABLE SalesPersonQuotaHistory (
BusinessEntityID integer,
QuotaDate datetime,
SalesQuota real,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES SalesPerson(BusinessEntityID),
);
CREATE TABLE SalesTerritoryHistory (
BusinessEntityID integer,
TerritoryID integer,
StartDate datetime,
EndDate datetime,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES SalesPerson(BusinessEntityID),
FOREIGN KEY (TerritoryID) REFERENCES SalesTerritory(TerritoryID),
);
CREATE TABLE ScrapReason (
ScrapReasonID integer,
Name text,
ModifiedDate datetime,
PRIMARY KEY (ScrapReasonID),
);
CREATE TABLE Shift (
ShiftID integer,
Name text,
StartTime text,
EndTime text,
ModifiedDate datetime,
PRIMARY KEY (ShiftID),
);
CREATE TABLE ShipMethod (
ShipMethodID integer,
Name text,
ShipBase real,
ShipRate real,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ShipMethodID),
);
CREATE TABLE SpecialOffer (
SpecialOfferID integer,
Description text,
DiscountPct real,
Type text,
Category text,
StartDate datetime,
EndDate datetime,
MinQty integer,
MaxQty integer,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (SpecialOfferID),
);
CREATE TABLE BusinessEntityAddress (
BusinessEntityID integer,
AddressID integer,
AddressTypeID integer,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (BusinessEntityID) REFERENCES BusinessEntity(BusinessEntityID),
FOREIGN KEY (AddressID) REFERENCES Address(AddressID),
FOREIGN KEY (AddressTypeID) REFERENCES AddressType(AddressTypeID),
);
CREATE TABLE SalesTaxRate (
SalesTaxRateID integer,
StateProvinceID integer,
TaxType integer,
TaxRate real,
Name text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (SalesTaxRateID),
FOREIGN KEY (StateProvinceID) REFERENCES StateProvince(StateProvinceID),
);
CREATE TABLE Store (
BusinessEntityID integer,
Name text,
SalesPersonID integer,
Demographics text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES BusinessEntity(BusinessEntityID),
FOREIGN KEY (SalesPersonID) REFERENCES SalesPerson(BusinessEntityID),
);
CREATE TABLE SalesOrderHeaderSalesReason (
SalesOrderID integer,
SalesReasonID integer,
ModifiedDate datetime,
FOREIGN KEY (SalesOrderID) REFERENCES SalesOrderHeader(SalesOrderID),
FOREIGN KEY (SalesReasonID) REFERENCES SalesReason(SalesReasonID),
);
CREATE TABLE TransactionHistoryArchive (
TransactionID integer,
ProductID integer,
ReferenceOrderID integer,
ReferenceOrderLineID integer,
TransactionDate datetime,
TransactionType text,
Quantity integer,
ActualCost real,
ModifiedDate datetime,
PRIMARY KEY (TransactionID),
);
CREATE TABLE UnitMeasure (
UnitMeasureCode text,
Name text,
ModifiedDate datetime,
PRIMARY KEY (UnitMeasureCode),
);
CREATE TABLE ProductCostHistory (
ProductID integer,
StartDate date,
EndDate date,
StandardCost real,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE ProductDocument (
ProductID integer,
DocumentNode text,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
FOREIGN KEY (DocumentNode) REFERENCES Document(DocumentNode),
);
CREATE TABLE ProductInventory (
ProductID integer,
LocationID integer,
Shelf text,
Bin integer,
Quantity integer,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
FOREIGN KEY (LocationID) REFERENCES Location(LocationID),
);
CREATE TABLE ProductProductPhoto (
ProductID integer,
ProductPhotoID integer,
Primary integer,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
FOREIGN KEY (ProductPhotoID) REFERENCES ProductPhoto(ProductPhotoID),
);
CREATE TABLE ProductReview (
ProductReviewID integer,
ProductID integer,
ReviewerName text,
ReviewDate datetime,
EmailAddress text,
Rating integer,
Comments text,
ModifiedDate datetime,
PRIMARY KEY (ProductReviewID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE ShoppingCartItem (
ShoppingCartItemID integer,
ShoppingCartID text,
Quantity integer,
ProductID integer,
DateCreated datetime,
ModifiedDate datetime,
PRIMARY KEY (ShoppingCartItemID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE SpecialOfferProduct (
SpecialOfferID integer,
ProductID integer,
rowguid text,
ModifiedDate datetime,
FOREIGN KEY (SpecialOfferID) REFERENCES SpecialOffer(SpecialOfferID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE SalesOrderDetail (
SalesOrderID integer,
SalesOrderDetailID integer,
CarrierTrackingNumber text,
OrderQty integer,
ProductID integer,
SpecialOfferID integer,
UnitPrice real,
UnitPriceDiscount real,
LineTotal real,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (SalesOrderDetailID),
FOREIGN KEY (SalesOrderID) REFERENCES SalesOrderHeader(SalesOrderID),
FOREIGN KEY (ProductID) REFERENCES SpecialOfferProduct(ProductID),
FOREIGN KEY (SpecialOfferID) REFERENCES SpecialOfferProduct(SpecialOfferID),
);
CREATE TABLE TransactionHistory (
TransactionID integer,
ProductID integer,
ReferenceOrderID integer,
ReferenceOrderLineID integer,
TransactionDate datetime,
TransactionType text,
Quantity integer,
ActualCost real,
ModifiedDate datetime,
PRIMARY KEY (TransactionID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE Vendor (
BusinessEntityID integer,
AccountNumber text,
Name text,
CreditRating integer,
PreferredVendorStatus integer,
ActiveFlag integer,
PurchasingWebServiceURL text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
FOREIGN KEY (BusinessEntityID) REFERENCES BusinessEntity(BusinessEntityID),
);
CREATE TABLE ProductVendor (
ProductID integer,
BusinessEntityID integer,
AverageLeadTime integer,
StandardPrice real,
LastReceiptCost real,
LastReceiptDate datetime,
MinOrderQty integer,
MaxOrderQty integer,
OnOrderQty integer,
UnitMeasureCode text,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
FOREIGN KEY (BusinessEntityID) REFERENCES Vendor(BusinessEntityID),
FOREIGN KEY (UnitMeasureCode) REFERENCES UnitMeasure(UnitMeasureCode),
);
CREATE TABLE PurchaseOrderHeader (
PurchaseOrderID integer,
RevisionNumber integer,
Status integer,
EmployeeID integer,
VendorID integer,
ShipMethodID integer,
OrderDate datetime,
ShipDate datetime,
SubTotal real,
TaxAmt real,
Freight real,
TotalDue real,
ModifiedDate datetime,
PRIMARY KEY (PurchaseOrderID),
FOREIGN KEY (EmployeeID) REFERENCES Employee(BusinessEntityID),
FOREIGN KEY (VendorID) REFERENCES Vendor(BusinessEntityID),
FOREIGN KEY (ShipMethodID) REFERENCES ShipMethod(ShipMethodID),
);
CREATE TABLE PurchaseOrderDetail (
PurchaseOrderID integer,
PurchaseOrderDetailID integer,
DueDate datetime,
OrderQty integer,
ProductID integer,
UnitPrice real,
LineTotal real,
ReceivedQty real,
RejectedQty real,
StockedQty real,
ModifiedDate datetime,
PRIMARY KEY (PurchaseOrderDetailID),
FOREIGN KEY (PurchaseOrderID) REFERENCES PurchaseOrderHeader(PurchaseOrderID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE WorkOrder (
WorkOrderID integer,
ProductID integer,
OrderQty integer,
StockedQty integer,
ScrappedQty integer,
StartDate datetime,
EndDate datetime,
DueDate datetime,
ScrapReasonID integer,
ModifiedDate datetime,
PRIMARY KEY (WorkOrderID),
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
FOREIGN KEY (ScrapReasonID) REFERENCES ScrapReason(ScrapReasonID),
);
CREATE TABLE WorkOrderRouting (
WorkOrderID integer,
ProductID integer,
OperationSequence integer,
LocationID integer,
ScheduledStartDate datetime,
ScheduledEndDate datetime,
ActualStartDate datetime,
ActualEndDate datetime,
ActualResourceHrs real,
PlannedCost real,
ActualCost real,
ModifiedDate datetime,
FOREIGN KEY (WorkOrderID) REFERENCES WorkOrder(WorkOrderID),
FOREIGN KEY (LocationID) REFERENCES Location(LocationID),
);
CREATE TABLE Customer (
CustomerID integer,
PersonID integer,
StoreID integer,
TerritoryID integer,
AccountNumber text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (CustomerID),
FOREIGN KEY (PersonID) REFERENCES Person(BusinessEntityID),
FOREIGN KEY (StoreID) REFERENCES Store(BusinessEntityID),
FOREIGN KEY (TerritoryID) REFERENCES SalesTerritory(TerritoryID),
);
CREATE TABLE ProductListPriceHistory (
ProductID integer,
StartDate date,
EndDate date,
ListPrice real,
ModifiedDate datetime,
FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
);
CREATE TABLE Address (
AddressID integer,
AddressLine1 text,
AddressLine2 text,
City text,
StateProvinceID integer,
PostalCode text,
SpatialLocation text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (AddressID),
);
CREATE TABLE AddressType (
AddressTypeID integer,
Name text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (AddressTypeID),
);
CREATE TABLE BillOfMaterials (
BillOfMaterialsID integer,
ProductAssemblyID integer,
ComponentID integer,
StartDate datetime,
EndDate datetime,
UnitMeasureCode text,
BOMLevel integer,
PerAssemblyQty real,
ModifiedDate datetime,
PRIMARY KEY (BillOfMaterialsID),
);
CREATE TABLE BusinessEntity (
BusinessEntityID integer,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (BusinessEntityID),
);
CREATE TABLE ContactType (
ContactTypeID integer,
Name text,
ModifiedDate datetime,
PRIMARY KEY (ContactTypeID),
);
CREATE TABLE CurrencyRate (
CurrencyRateID integer,
CurrencyRateDate datetime,
FromCurrencyCode text,
ToCurrencyCode text,
AverageRate real,
EndOfDayRate real,
ModifiedDate datetime,
PRIMARY KEY (CurrencyRateID),
);
CREATE TABLE Department (
DepartmentID integer,
Name text,
GroupName text,
ModifiedDate datetime,
PRIMARY KEY (DepartmentID),
);
CREATE TABLE EmployeeDepartmentHistory (
BusinessEntityID integer,
DepartmentID integer,
ShiftID integer,
StartDate date,
EndDate date,
ModifiedDate datetime,
);
CREATE TABLE EmployeePayHistory (
BusinessEntityID integer,
RateChangeDate datetime,
Rate real,
PayFrequency integer,
ModifiedDate datetime,
);
CREATE TABLE JobCandidate (
JobCandidateID integer,
BusinessEntityID integer,
Resume text,
ModifiedDate datetime,
PRIMARY KEY (JobCandidateID),
);
CREATE TABLE Location (
LocationID integer,
Name text,
CostRate real,
Availability real,
ModifiedDate datetime,
PRIMARY KEY (LocationID),
);
CREATE TABLE PhoneNumberType (
PhoneNumberTypeID integer,
Name text,
ModifiedDate datetime,
PRIMARY KEY (PhoneNumberTypeID),
);
CREATE TABLE Product (
ProductID integer,
Name text,
ProductNumber text,
MakeFlag integer,
FinishedGoodsFlag integer,
Color text,
SafetyStockLevel integer,
ReorderPoint integer,
StandardCost real,
ListPrice real,
Size text,
SizeUnitMeasureCode text,
WeightUnitMeasureCode text,
Weight real,
DaysToManufacture integer,
ProductLine text,
Class text,
Style text,
ProductSubcategoryID integer,
ProductModelID integer,
SellStartDate datetime,
SellEndDate datetime,
DiscontinuedDate datetime,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (ProductID),
);
CREATE TABLE Document (
DocumentNode text,
DocumentLevel integer,
Title text,
Owner integer,
FolderFlag integer,
FileName text,
FileExtension text,
Revision text,
ChangeNumber integer,
Status integer,
DocumentSummary text,
Document blob,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (DocumentNode),
);
CREATE TABLE StateProvince (
StateProvinceID integer,
StateProvinceCode text,
CountryRegionCode text,
IsOnlyStateProvinceFlag integer,
Name text,
TerritoryID integer,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (StateProvinceID),
);
CREATE TABLE CreditCard (
CreditCardID integer,
CardType text,
CardNumber text,
ExpMonth integer,
ExpYear integer,
ModifiedDate datetime,
PRIMARY KEY (CreditCardID),
);
CREATE TABLE SalesOrderHeader (
SalesOrderID integer,
RevisionNumber integer,
OrderDate datetime,
DueDate datetime,
ShipDate datetime,
Status integer,
OnlineOrderFlag integer,
SalesOrderNumber text,
PurchaseOrderNumber text,
AccountNumber text,
CustomerID integer,
SalesPersonID integer,
TerritoryID integer,
BillToAddressID integer,
ShipToAddressID integer,
ShipMethodID integer,
CreditCardID integer,
CreditCardApprovalCode text,
CurrencyRateID integer,
SubTotal real,
TaxAmt real,
Freight real,
TotalDue real,
Comment text,
rowguid text,
ModifiedDate datetime,
PRIMARY KEY (SalesOrderID),
);
---------------------
QUESTION: What is the average standard cost of product number CA-1098? Average cost = AVG(StandardCost)"
